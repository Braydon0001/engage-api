// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Learning;

#nullable disable

namespace Persistence.Learning.Migrations
{
    [DbContext(typeof(LearningDbContext))]
    [Migration("20221025102522_IdentityNumberLength")]
    partial class IdentityNumberLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Learning.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiDesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("DesignationId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApiRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApiStaffId")
                        .HasColumnType("int");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Country_Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("DesignationName")
                        .HasColumnType("longtext");

                    b.Property<string>("Disability")
                        .HasColumnType("longtext");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSetaLearner")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Race")
                        .HasColumnType("longtext");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("StaffNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("StaffId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.HasIndex("StoreId");

                    b.HasIndex("Surname");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Domain.Learning.Entities.StaffLearningPath", b =>
                {
                    b.Property<int>("StaffLearningPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("AssessmentScore")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("AssessmentTrainerFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("ControlSheetName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ControlSheetStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfTopicCompletion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExternalStaffCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalTopicCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsControlSheetCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsModuleCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTopicCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ModuleStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NoOfTopicsCompleted")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("StaffName")
                        .HasColumnType("longtext");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("TopicStarted")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StaffLearningPathId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TopicId");

                    b.ToTable("StaffLearningPaths");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsElearningStore")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Pin")
                        .HasColumnType("longtext");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("longtext");

                    b.Property<string>("StoreName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("StoreId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("StoreName");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ApiTopicId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalModuleCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("ModuleIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModuleIsCoreModule")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModuleIsCriticalModule")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModuleIsDevelopmentModule")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModuleLearnerDriven")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ModulePassmark")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ModuleTags")
                        .HasColumnType("longtext");

                    b.Property<bool>("ModuleTrainerDrivenOffsite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ModuleTrainerDrivenOnsite")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TopicName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Learning.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Learning.Entities.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("Domain.Learning.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Domain.Learning.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Region");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Domain.Learning.Entities.StaffLearningPath", b =>
                {
                    b.HasOne("Domain.Learning.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("Domain.Learning.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.Navigation("Staff");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Learning.Entities.Store", b =>
                {
                    b.HasOne("Domain.Learning.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
