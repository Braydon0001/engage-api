// <auto-generated />
using System;
using Engage.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Engage.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Engage.Domain.Entities.AnalysisPillarGroup", b =>
                {
                    b.Property<int>("AnalysisPillarGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnalysisPillarGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("AnalysisPillarGroupId");

                    b.ToTable("AnalysisPillarGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.AnalysisPillarSubGroup", b =>
                {
                    b.Property<int>("AnalysisPillarSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnalysisPillarSubGroupId"));

                    b.Property<int>("AnalysisPillarGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("AnalysisPillarSubGroupId");

                    b.HasIndex("AnalysisPillarGroupId");

                    b.ToTable("AnalysisPillarSubGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ApiKey", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ApiKeyId"));

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ApiKeyId");

                    b.ToTable("ApiKeys");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.AssetOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_AssetOwners", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.AssetStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_AssetStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_AttachmentTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BankAccountOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BankAccountOwners", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BankAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BankAccountTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BankName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BankNames", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BankPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BankPaymentMethods", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BenefitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BenefitTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BudgetId"));

                    b.Property<int>("BudgetPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetVersionId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GLAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<double>("Value")
                        .HasMaxLength(20)
                        .HasColumnType("double");

                    b.HasKey("BudgetId");

                    b.HasIndex("BudgetPeriodId");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("BudgetYearId");

                    b.HasIndex("GLAccountId");

                    b.HasIndex("BudgetVersionId", "BudgetYearId", "BudgetPeriodId", "GLAccountId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Budgets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetPeriod", b =>
                {
                    b.Property<int>("BudgetPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BudgetPeriodId"));

                    b.Property<int>("BudgetYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("No")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("BudgetPeriodId");

                    b.HasIndex("BudgetYearId");

                    b.ToTable("BudgetPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BudgetTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_BudgetVersions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetYear", b =>
                {
                    b.Property<int>("BudgetYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BudgetYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("BudgetYearId");

                    b.ToTable("BudgetYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFile", b =>
                {
                    b.Property<int>("CategoryFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryFileId"));

                    b.Property<int>("CategoryFileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CategorySubGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TargetRule")
                        .HasColumnType("json");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryFileId");

                    b.HasIndex("CategoryFileTypeId");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("CategorySubGroupId");

                    b.HasIndex("StoreId");

                    b.ToTable("CategoryFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileTarget", b =>
                {
                    b.Property<int>("CategoryFileTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryFileTargetId"));

                    b.Property<int>("CategoryFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryFileTargetId");

                    b.HasIndex("CategoryFileId");

                    b.ToTable("CategoryFileTargets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CategoryFileTarget");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileType", b =>
                {
                    b.Property<int>("CategoryFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryFileTypeId");

                    b.ToTable("CategoryFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryGroup", b =>
                {
                    b.Property<int>("CategoryGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryGroupId");

                    b.ToTable("CategoryGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryStoreGroup", b =>
                {
                    b.Property<int>("CategoryStoreGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryStoreGroupId"));

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryStoreGroupId");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("StoreId");

                    b.ToTable("CategoryStoreGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategorySubGroup", b =>
                {
                    b.Property<int>("CategorySubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategorySubGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategorySubGroupId");

                    b.ToTable("CategorySubGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTarget", b =>
                {
                    b.Property<int>("CategoryTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryTargetId"));

                    b.Property<string>("AvailableLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CategoryTargetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OccupiedLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<float?>("Target")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TextQuestion")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryTargetId");

                    b.HasIndex("CategoryTargetTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CategoryTargets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetAnswer", b =>
                {
                    b.Property<int>("CategoryTargetAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryTargetAnswerId"));

                    b.Property<float?>("Available")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("CategoryTargetId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTargetStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryTargetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotApplicable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastUserVerifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("Occupied")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<float?>("Target")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryTargetAnswerId");

                    b.HasIndex("CategoryTargetId");

                    b.HasIndex("CategoryTargetStoreId");

                    b.HasIndex("CategoryTargetTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CategoryTargetAnswers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetAnswerHistory", b =>
                {
                    b.Property<int>("CategoryTargetAnswerHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryTargetAnswerHistoryId"));

                    b.Property<float?>("Available")
                        .HasColumnType("float");

                    b.Property<int>("CategoryTargetAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTargetId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryTargetStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryTargetTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotApplicable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastUserVerifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("Occupied")
                        .HasColumnType("float");

                    b.Property<float?>("Target")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryTargetAnswerHistoryId");

                    b.HasIndex("CategoryTargetAnswerId");

                    b.HasIndex("CategoryTargetId");

                    b.HasIndex("CategoryTargetStoreId");

                    b.HasIndex("CategoryTargetTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CategoryTargetAnswerHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetStore", b =>
                {
                    b.Property<int>("CategoryTargetStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryTargetStoreId"));

                    b.Property<int>("CategoryTargetId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryTargetStoreId");

                    b.HasIndex("CategoryTargetId");

                    b.HasIndex("StoreId");

                    b.ToTable("CategoryTargetStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetType", b =>
                {
                    b.Property<int>("CategoryTargetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryTargetTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CategoryTargetTypeId");

                    b.ToTable("CategoryTargetTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ClaimAccountManagerId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimClassificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ClaimFloatId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimManagerId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClaimPendingReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimReference")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int?>("ClaimRejectedReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeDivisionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClaimFromSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDairy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPayStore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVatInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PaidBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PendingBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PendingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PendingReason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierApprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SupplierApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UnapprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnapprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.HasKey("ClaimId");

                    b.HasIndex("ClaimAccountManagerId");

                    b.HasIndex("ClaimClassificationId");

                    b.HasIndex("ClaimFloatId");

                    b.HasIndex("ClaimManagerId");

                    b.HasIndex("ClaimNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClaimPeriodId");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ClaimSupplierStatusId");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("EmployeeDivisionId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VatId");

                    b.ToTable("Claims");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBatch", b =>
                {
                    b.Property<int>("ClaimBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimBatchId"));

                    b.Property<int>("ClaimClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimBatchId");

                    b.HasIndex("ClaimClassificationId");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ClaimSupplierStatusId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("ClaimBatches");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBatchDetail", b =>
                {
                    b.Property<int>("ClaimBatchDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimBatchDetailId"));

                    b.Property<int>("ClaimBatchId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimBatchDetailId");

                    b.HasIndex("ClaimBatchId");

                    b.HasIndex("ClaimId");

                    b.ToTable("ClaimBatchDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimClassification", b =>
                {
                    b.Property<int>("ClaimClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimClassificationId"));

                    b.Property<int?>("ClaimTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditIsClaimFromSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EditIsPayStore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAttachmentRequiredOnSubmit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClaimFromSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDairy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPayStore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSupplierProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimClassificationId");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ClaimClassifications");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimFloat", b =>
                {
                    b.Property<int>("ClaimFloatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimFloatId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ClaimTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastToppedUp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastToppedUpBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Reference")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<decimal?>("TopUpAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ClaimFloatId");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ClaimFloats");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimFloatTopUpHistory", b =>
                {
                    b.Property<int>("ClaimFloatTopUpHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimFloatTopUpHistoryId"));

                    b.Property<int>("ClaimFloatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TopUpAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ClaimFloatTopUpHistoryId");

                    b.HasIndex("ClaimFloatId");

                    b.ToTable("ClaimFloatTopUpHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimHistory", b =>
                {
                    b.Property<int>("ClaimHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimHistoryId"));

                    b.Property<int?>("ClaimHistoryHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimPendingReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimRejectedReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PendingReason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimHistoryId");

                    b.HasIndex("ClaimHistoryHeaderId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ClaimPendingReasonId");

                    b.HasIndex("ClaimRejectedReasonId");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ClaimSupplierStatusId");

                    b.ToTable("ClaimHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimHistoryHeader", b =>
                {
                    b.Property<int>("ClaimHistoryHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimHistoryHeaderId"));

                    b.Property<int>("ClaimClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimSupplierStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimHistoryHeaderId");

                    b.HasIndex("ClaimClassificationId");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ClaimSupplierStatusId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("ClaimHistoryHeaders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimNotificationUser", b =>
                {
                    b.Property<int>("ClaimNotificationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimNotificationUserId"));

                    b.Property<int>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClaimNotificationUserId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("UserId");

                    b.HasIndex("ClaimStatusId", "UserId", "EngageRegionId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ClaimNotificationUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimPendingReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimPendingReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimPeriod", b =>
                {
                    b.Property<int>("ClaimPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimPeriodId"));

                    b.Property<int>("ClaimYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimPeriodId");

                    b.HasIndex("ClaimYearId");

                    b.ToTable("ClaimPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimQuantityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimQuantityTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimRejectedReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimRejectedReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimReportTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimSku", b =>
                {
                    b.Property<int>("ClaimSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimSkuId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimQuantityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimSkuStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimSkuTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(65,30)")
                        .HasComputedColumnSql("Amount + VatAmount");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ClaimSkuId");

                    b.HasIndex("ClaimQuantityTypeId");

                    b.HasIndex("ClaimSkuStatusId");

                    b.HasIndex("ClaimSkuTypeId");

                    b.HasIndex("DCProductId");

                    b.HasIndex("ClaimId", "DCProductId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ClaimSkus");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimSkuStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimSkuStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimSkuType", b =>
                {
                    b.Property<int>("ClaimSkuTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimSkuTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVatInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimSkuTypeId");

                    b.ToTable("ClaimSkuTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimStatusUser", b =>
                {
                    b.Property<int>("ClaimStatusUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimStatusUserId"));

                    b.Property<int>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClaimStatusUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("ClaimStatusId", "UserId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ClaimStatusUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimSupplierStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClaimSupplierStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimType", b =>
                {
                    b.Property<int>("ClaimTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDairy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmployeeClaim")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVatInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.HasKey("ClaimTypeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VatId");

                    b.ToTable("ClaimTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimYear", b =>
                {
                    b.Property<int>("ClaimYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimYearId");

                    b.ToTable("ClaimYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ClientTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistory", b =>
                {
                    b.Property<int>("CommunicationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommunicationHistoryId"));

                    b.Property<string>("AttachmentUrls")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<string>("CcEmails")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("CommunicationTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)");

                    b.Property<string>("Error")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FromName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("HasMemoryStreamAttachment")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CommunicationHistoryId");

                    b.HasIndex("CommunicationTemplateId");

                    b.ToTable("CommunicationHistories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CommunicationHistory");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationTemplate", b =>
                {
                    b.Property<int>("CommunicationTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommunicationTemplateId"));

                    b.Property<string>("Body")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("CommunicationTemplateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExternalTemplateId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FromEmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FromMobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FromName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CommunicationTemplateId");

                    b.HasIndex("CommunicationTemplateTypeId");

                    b.HasIndex("CommunicationTypeId");

                    b.ToTable("CommunicationTemplates");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationTemplateType", b =>
                {
                    b.Property<int>("CommunicationTemplateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommunicationTemplateTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CommunicationTemplateTypeId");

                    b.ToTable("CommunicationTemplateTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationType", b =>
                {
                    b.Property<int>("CommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommunicationTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CommunicationTypeId");

                    b.ToTable("CommunicationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("PrimaryEmailContactItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryMobileContactItemId")
                        .HasColumnType("int");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ContactId");

                    b.HasIndex("FullName");

                    b.HasIndex("PrimaryEmailContactItemId");

                    b.HasIndex("PrimaryMobileContactItemId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("Contacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactEvent", b =>
                {
                    b.Property<int>("ContactEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactEventId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecurringEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ContactEventId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("ContactEvents");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactItem", b =>
                {
                    b.Property<int>("ContactItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactItemId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("varchar(260)");

                    b.HasKey("ContactItemId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("ContactItems");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ContactTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostCenterId"));

                    b.Property<int>("CostTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostCenterId");

                    b.HasIndex("CostTypeId");

                    b.ToTable("CostCenters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenterDepartment", b =>
                {
                    b.Property<int>("CostCenterDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostCenterDepartmentId"));

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CostDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostCenterDepartmentId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CostDepartmentId");

                    b.ToTable("CostCenterDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenterEmployee", b =>
                {
                    b.Property<int>("CostCenterEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostCenterEmployeeId"));

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostCenterEmployeeId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CostCenterEmployees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostDepartment", b =>
                {
                    b.Property<int>("CostDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostDepartmentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostDepartmentId");

                    b.ToTable("CostDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostSubDepartment", b =>
                {
                    b.Property<int>("CostSubDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostSubDepartmentId"));

                    b.Property<int>("CostDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostSubDepartmentId");

                    b.HasIndex("CostDepartmentId");

                    b.ToTable("CostSubDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostType", b =>
                {
                    b.Property<int>("CostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CostTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CostTypeId");

                    b.ToTable("CostTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Creditor", b =>
                {
                    b.Property<int>("CreditorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorId"));

                    b.Property<DateTime>("BankConfirmationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("CreditorStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EvolutionCreditorNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsVatRegistered")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CreditorId");

                    b.HasIndex("CreditorStatusId");

                    b.ToTable("Creditors");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorBankAccount", b =>
                {
                    b.Property<int>("CreditorBankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorBankAccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("BankAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BankNameId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorBankAccountId");

                    b.HasIndex("BankAccountTypeId");

                    b.HasIndex("BankNameId");

                    b.ToTable("CreditorBankAccounts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorCutOffSetting", b =>
                {
                    b.Property<int>("CreditorCutOffSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorCutOffSettingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CreditorCutOff")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentCutOff")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorCutOffSettingId");

                    b.ToTable("CreditorCutOffSettings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorFile", b =>
                {
                    b.Property<int>("CreditorFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("CreditorFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreditorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorFileId");

                    b.HasIndex("CreditorFileTypeId");

                    b.HasIndex("CreditorId");

                    b.ToTable("CreditorFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorFileType", b =>
                {
                    b.Property<int>("CreditorFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorFileTypeId");

                    b.ToTable("CreditorFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorNotificationStatusUser", b =>
                {
                    b.Property<int>("CreditorNotificationStatusUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorNotificationStatusUserId"));

                    b.Property<int>("CreditorStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CreditorNotificationStatusUserId");

                    b.HasIndex("CreditorStatusId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditorNotificationStatusUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorStatus", b =>
                {
                    b.Property<int>("CreditorStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorStatusId");

                    b.ToTable("CreditorStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorStatusHistory", b =>
                {
                    b.Property<int>("CreditorStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CreditorStatusHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("CreditorId")
                        .HasColumnType("int");

                    b.Property<int>("CreditorStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("CreditorStatusHistoryId");

                    b.HasIndex("CreditorId");

                    b.HasIndex("CreditorStatusId");

                    b.ToTable("CreditorStatusHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCAccount", b =>
                {
                    b.Property<int>("DCAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DCAccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("DCAccountId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("StoreId");

                    b.ToTable("DCAccounts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCDepartment", b =>
                {
                    b.Property<int>("DCDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DCDepartmentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("DCDepartmentId");

                    b.ToTable("DCDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCProduct", b =>
                {
                    b.Property<int>("DCProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DCProductId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<string>("EANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<float>("PackSize")
                        .HasColumnType("float");

                    b.Property<int>("ProductActiveStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductClassId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSubWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseStatusId")
                        .HasColumnType("int");

                    b.Property<float>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SubWarehouse")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("DCProductId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("Name");

                    b.HasIndex("ProductActiveStatusId");

                    b.HasIndex("ProductClassId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ProductSubWarehouseId");

                    b.HasIndex("ProductWarehouseStatusId");

                    b.HasIndex("UnitTypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("DCProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DCDepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("DCDepartmentId");

                    b.ToTable("opt_DCProductClasses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCStockOnHand", b =>
                {
                    b.Property<int>("DCStockOnHandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DCStockOnHandId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<float>("OnOrderQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("StockDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("DCStockOnHandId");

                    b.HasIndex("DCProductId");

                    b.ToTable("DCStockOnHands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DeductionCycleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_DeductionCycleTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DeductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_DeductionTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.DistributionCenter", b =>
                {
                    b.Property<int>("DistributionCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DistributionCenterId"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("DistributionCenterId");

                    b.ToTable("DistributionCenters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EducationLevels", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistory", b =>
                {
                    b.Property<int>("EmailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmailHistoryId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("EmailHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistoryCCEmail", b =>
                {
                    b.Property<int>("EmailHistoryCCEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailHistoryCCEmailId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmailHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmailHistoryCCEmailId");

                    b.HasIndex("EmailHistoryId");

                    b.ToTable("EmailHistoryCCEmails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistoryTemplateVariable", b =>
                {
                    b.Property<int>("EmailHistoryTemplateVariableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailHistoryTemplateVariableId"));

                    b.Property<string>("ApproverName")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CutOffDate")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisputedReason")
                        .HasColumnType("longtext");

                    b.Property<int>("EmailHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StoreName")
                        .HasColumnType("longtext");

                    b.Property<int?>("SurveyInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TerminationDate")
                        .HasColumnType("longtext");

                    b.Property<string>("TerminationReason")
                        .HasColumnType("longtext");

                    b.Property<string>("TerminatorName")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("EmailHistoryTemplateVariableId");

                    b.HasIndex("EmailHistoryId");

                    b.ToTable("EmailHistoryTemplateVariables");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmailTemplateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalTemplateId")
                        .HasColumnType("longtext");

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FromEmailName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmailTemplateId");

                    b.HasIndex("EmailTemplateTypeId");

                    b.HasIndex("EmailTypeId");

                    b.ToTable("EmailTemplates");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplateHistory", b =>
                {
                    b.Property<int>("EmailTemplateHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailTemplateHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailTemplateHistoryId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailTemplateHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmailTemplateTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplateVariableClaimNumber", b =>
                {
                    b.Property<int>("EmailTemplateVariableClaimNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmailTemplateVariableClaimNumberId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ClaimNo")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmailHistoryTemplateVariableId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmailTemplateVariableClaimNumberId");

                    b.HasIndex("EmailHistoryTemplateVariableId");

                    b.ToTable("EmailTemplateVariableClaimNumbers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmailTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("AnnualLeave")
                        .HasColumnType("int");

                    b.Property<string>("BlobName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BlobUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("CostCenterManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmployeeCitzenshipId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeDefaultPayslipId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeDisabledTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeGenderId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeIdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeIncentiveTierId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeJobTitleTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeJobTitleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeLanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeNationalityId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePassportNationalityId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePersonTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeRaceId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeReinstatementReasonId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeSDLExemptionId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStandardIndustryCodeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStandardIndustryGroupCodeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStateId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTaxStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTerminationReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeUIFExemptionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentActionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageSubRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyLeave")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("GroupStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HomeNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Initials")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsApplyTaxForPublicServiceEmployee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCovidVaccinated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefaultPayslip")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmploymentTaxIncentive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEncashLeave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForeignNational")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNotReemployable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVoluntaryOverDeduction")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KnownAs")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<float?>("LeaveAccumulationRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LeaveCycleStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LeaveManagerId")
                        .HasColumnType("int");

                    b.Property<string>("MaidenName")
                        .HasColumnType("longtext");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MobileAppVersion")
                        .HasColumnType("longtext");

                    b.Property<string>("NextOfKinAddess")
                        .HasColumnType("longtext");

                    b.Property<string>("NextOfKinContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("NextOfKinName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NextOfKinTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PAYENumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("PassportEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("PassportStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PayrollPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("RANumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ReinstatementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SARSNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("SickLeave")
                        .HasColumnType("int");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StatutoryEmploymentDateOverride")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UIFNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("UniformSizeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkExtension")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkNumber")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CostCenterManagerId");

                    b.HasIndex("EmployeeCitzenshipId");

                    b.HasIndex("EmployeeDefaultPayslipId");

                    b.HasIndex("EmployeeDisabledTypeId");

                    b.HasIndex("EmployeeGenderId");

                    b.HasIndex("EmployeeIdentificationTypeId");

                    b.HasIndex("EmployeeIncentiveTierId");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasIndex("EmployeeJobTitleTimeId");

                    b.HasIndex("EmployeeJobTitleTypeId");

                    b.HasIndex("EmployeeLanguageId");

                    b.HasIndex("EmployeeNationalityId");

                    b.HasIndex("EmployeePassportNationalityId");

                    b.HasIndex("EmployeePersonTypeId");

                    b.HasIndex("EmployeeRaceId");

                    b.HasIndex("EmployeeReinstatementReasonId");

                    b.HasIndex("EmployeeSDLExemptionId");

                    b.HasIndex("EmployeeStandardIndustryCodeId");

                    b.HasIndex("EmployeeStandardIndustryGroupCodeId");

                    b.HasIndex("EmployeeStateId");

                    b.HasIndex("EmployeeTaxStatusId");

                    b.HasIndex("EmployeeTerminationReasonId");

                    b.HasIndex("EmployeeTitleId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("EmployeeUIFExemptionId");

                    b.HasIndex("EmploymentActionId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("EngageSubRegionId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("LeaveManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NextOfKinTypeId");

                    b.HasIndex("PayrollPeriodId");

                    b.HasIndex("StakeholderId")
                        .IsUnique();

                    b.HasIndex("UniformSizeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAddress", b =>
                {
                    b.Property<int>("EmployeeAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeAddressId"));

                    b.Property<string>("CareOfIntermediary")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("City")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ComplexName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPostalAddressCareOfAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSameAsPhysicalAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PostalComplexName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("PostalCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("PostalProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("PostalStreetName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("PostalStreetNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PostalSuburb")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("PostalUnitNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Suburb")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("EmployeeAddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PostalCountryId");

                    b.HasIndex("PostalProvinceId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("EmployeeAddresses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAsset", b =>
                {
                    b.Property<int>("EmployeeAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeAssetId"));

                    b.Property<int>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Contract")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeAssetBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeAssetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("HandedBackDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Imei")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RecievedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sim")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeAssetId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("EmployeeAssetBrandId");

                    b.HasIndex("EmployeeAssetTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAssets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAssetBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeAssetBrands", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAssetHistory", b =>
                {
                    b.Property<int>("EmployeeAssetHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeAssetHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeAssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NewEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OldEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeAssetHistoryId");

                    b.HasIndex("EmployeeAssetId");

                    b.HasIndex("NewEmployeeId");

                    b.HasIndex("OldEmployeeId");

                    b.ToTable("EmployeeAssetHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeAssetTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBadge", b =>
                {
                    b.Property<int>("EmployeeBadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeBadgeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeBadgeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeBadgeId");

                    b.HasIndex("EmployeeBadgeTypeId");

                    b.ToTable("EmployeeBadges");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBadgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeBadgeTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBankDetail", b =>
                {
                    b.Property<int>("EmployeeBankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeBankDetailId"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("BankAccountOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BankNameId")
                        .HasColumnType("int");

                    b.Property<int>("BankPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("RoutingCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeBankDetailId");

                    b.HasIndex("BankAccountOwnerId");

                    b.HasIndex("BankAccountTypeId");

                    b.HasIndex("BankNameId");

                    b.HasIndex("BankPaymentMethodId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeBankDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBenefit", b =>
                {
                    b.Property<int>("EmployeeBenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeBenefitId"));

                    b.Property<int>("BenefitTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("EmployeeBenefitId");

                    b.HasIndex("BenefitTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeBenefits");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBox", b =>
                {
                    b.Property<int>("EmployeeCoolerBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeCoolerBoxId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeCoolerBoxConditionId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("HandedBackDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RecievedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeCoolerBoxId");

                    b.HasIndex("EmployeeCoolerBoxConditionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCoolerBoxes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBoxCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeCoolerBoxConditions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBoxHistory", b =>
                {
                    b.Property<int>("EmployeeCoolerBoxHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeCoolerBoxHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeCoolerBoxId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NewEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OldEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeCoolerBoxHistoryId");

                    b.HasIndex("EmployeeCoolerBoxId");

                    b.HasIndex("NewEmployeeId");

                    b.HasIndex("OldEmployeeId");

                    b.ToTable("EmployeeCoolerBoxHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDeduction", b =>
                {
                    b.Property<int>("EmployeeDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeDeductionId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DeductionCycleTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeductionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeDeductionId");

                    b.HasIndex("DeductionCycleTypeId");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDeductions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDefaultPayslip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeDefaultPayslips", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDisabledType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeDisabledTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDisciplinaryProcedure", b =>
                {
                    b.Property<int>("EmployeeDisciplinaryProcedureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeDisciplinaryProcedureId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DisciplinaryProcedureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeDisciplinaryProcedureId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDisciplinaryProcedures");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDivision", b =>
                {
                    b.Property<int>("EmployeeDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeDivisionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRihCallCycles")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeDivisionId");

                    b.ToTable("EmployeeDivisions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeExpenseClaim", b =>
                {
                    b.Property<int>("EmployeeExpenseClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeExpenseClaimId"));

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("KMDistanse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RecoverFrom")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("EmployeeExpenseClaimId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("EmployeeExpenseClaims");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFile", b =>
                {
                    b.Property<int>("EmployeeFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeFileId");

                    b.HasIndex("EmployeeFileTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFileType", b =>
                {
                    b.Property<int>("EmployeeFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeFileTypeId");

                    b.ToTable("EmployeeFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFuel", b =>
                {
                    b.Property<int>("EmployeeFuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeFuelId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BlobName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BlobUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeFuelExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeePaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeVehicleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float?>("Litres")
                        .HasColumnType("float");

                    b.Property<int?>("Odometer")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TollgateName")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeFuelId");

                    b.HasIndex("EmployeeFuelExpenseTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePaymentTypeId");

                    b.HasIndex("EmployeeVehicleId");

                    b.ToTable("EmployeeFuels");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFuelExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeFuelExpenseTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeHealthCondition", b =>
                {
                    b.Property<int>("EmployeeHealthConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeHealthConditionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeHealthConditionId");

                    b.ToTable("EmployeeHealthConditions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeIdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeIdentificationTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeIncentiveTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeIncentiveTiers", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitle", b =>
                {
                    b.Property<int>("EmployeeJobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeJobTitleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeJobTitleId");

                    b.HasIndex("ParentId");

                    b.ToTable("EmployeeJobTitles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleTime", b =>
                {
                    b.Property<int>("EmployeeJobTitleTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeJobTitleTimeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeJobTitleTimeId");

                    b.HasIndex("EmployeeJobTitleId");

                    b.ToTable("EmployeeJobTitleTimes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleType", b =>
                {
                    b.Property<int>("EmployeeJobTitleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeJobTitleTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeJobTitleTypeId");

                    b.HasIndex("EmployeeJobTitleId");

                    b.ToTable("EmployeeJobTitleTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleUserGroup", b =>
                {
                    b.Property<int>("EmployeeJobTitleUserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeJobTitleUserGroupId"));

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeJobTitleUserGroupId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("EmployeeJobTitleId", "UserGroupId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("EmployeeJobTitleUserGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpi", b =>
                {
                    b.Property<int>("EmployeeKpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeKpiId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeKpiTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeKpiId");

                    b.HasIndex("EmployeeKpiTypeId");

                    b.ToTable("EmployeeKpis");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiScore", b =>
                {
                    b.Property<int>("EmployeeKpiScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeKpiScoreId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKpiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeKpiTierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Score")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeKpiScoreId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeKpiId");

                    b.HasIndex("EmployeeKpiTierId");

                    b.ToTable("EmployeeKpiScores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiTier", b =>
                {
                    b.Property<int>("EmployeeKpiTierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeKpiTierId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeKpiId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeKpiTierId");

                    b.HasIndex("EmployeeKpiId");

                    b.ToTable("EmployeeKpiTiers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeKpiTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeLanguages", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeLeaveEntry", b =>
                {
                    b.Property<int>("EmployeeLeaveEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeLeaveEntryId"));

                    b.Property<bool>("AdjustLeave")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FromHalfDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ToHalfDay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("EmployeeLeaveEntryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("EmployeeLeaveEntries");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeLoan", b =>
                {
                    b.Property<int>("EmployeeLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeLoanId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<float>("Installment")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LoanTerm")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("RepayableAmount")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeLoanId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLoans");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeNationalities", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePayRate", b =>
                {
                    b.Property<int>("EmployeePayRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeePayRateId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("DaysPerPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePayRateFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePayRatePackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("HoursPerDay")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("HoursPerMonth")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("IncreaseReason")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<bool>("IsPayPackageAutomatically")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkFriday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkMonday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkSaturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkSunday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkThursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkTuesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorkWednesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("MonthlyRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeePayRateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePayRateFrequencyId");

                    b.HasIndex("EmployeePayRatePackageId");

                    b.ToTable("EmployeePayRates");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePayRateFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePayRateFrequencies", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePayRatePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePayRatePackages", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePaymentTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePension", b =>
                {
                    b.Property<int>("EmployeePensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeePensionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePensionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePensionContributionPercentageId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeePensionSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeePensionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePensionCategoryId");

                    b.HasIndex("EmployeePensionContributionPercentageId");

                    b.HasIndex("EmployeePensionSchemeId");

                    b.ToTable("EmployeePensions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePensionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePensionCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePensionContributionPercentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePensionContributionPercentages", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePensionScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePensionSchemes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeePersonTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePopiConsent", b =>
                {
                    b.Property<int>("EmployeePopiConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeePopiConsentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfConsent")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeePopiConsentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePopiConsents");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeQualification", b =>
                {
                    b.Property<int>("EmployeeQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeQualificationId"));

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("FinalYearSubjects")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("InstitutionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHighestQualification")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeQualificationId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InstitutionTypeId");

                    b.ToTable("EmployeeQualifications");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeRecurringTransaction", b =>
                {
                    b.Property<int>("EmployeeRecurringTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeRecurringTransactionId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BaseInstallmentOnAmountOrComponent")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreditorBankAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeRecurringTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("InitialAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsFringeBenefitLoan")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("LeavePayPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("PayrollPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeRecurringTransactionId");

                    b.HasIndex("CreditorBankAccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeRecurringTransactionStatusId");

                    b.HasIndex("EmployeeTransactionTypeId");

                    b.HasIndex("PayrollPeriodId");

                    b.ToTable("EmployeeRecurringTransactions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeRecurringTransactionStatus", b =>
                {
                    b.Property<int>("EmployeeRecurringTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeRecurringTransactionStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeRecurringTransactionStatusId");

                    b.ToTable("EmployeeRecurringTransactionStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeRegionContact", b =>
                {
                    b.Property<int>("EmployeeRegionContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeRegionContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeRegionContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("EmployeeRegionContacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeReinstatementHistory", b =>
                {
                    b.Property<int>("EmployeeReinstatementHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeReinstatementHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeReinstatementReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReinstatementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeReinstatementHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeReinstatementReasonId");

                    b.ToTable("EmployeeReinstatementHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeReinstatementReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeReinstatementReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSDLExemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeSDLExemptions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("EmployeeSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeSkillId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("ProficiencyId")
                        .HasColumnType("int");

                    b.Property<int>("SkillCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeSkillId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("EmployeeSkills");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSkillsDevelopment", b =>
                {
                    b.Property<int>("EmployeeSkillsDevelopmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeSkillsDevelopmentId"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeSkillsDevelopmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSkillsDevelopment");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStandardIndustryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeStandardIndustryCodes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStandardIndustryGroupCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeStandardIndustryGroupCodes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeStates", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendar", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarId"));

                    b.Property<DateTime>("CalendarDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailedTo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStoreCalendarGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStoreCalendarPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeStoreCalendarStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeStoreCalendarTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsManagerCreated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarId");

                    b.HasIndex("EmployeeStoreCalendarGroupId");

                    b.HasIndex("EmployeeStoreCalendarPeriodId");

                    b.HasIndex("EmployeeStoreCalendarStatusId");

                    b.HasIndex("EmployeeStoreCalendarTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyInstanceId");

                    b.HasIndex("EmployeeId", "StoreId", "CalendarDate")
                        .IsUnique();

                    b.ToTable("EmployeeStoreCalendars");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarBlockDay", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarBlockDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarBlockDayId"));

                    b.Property<DateTime>("CalendarDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStoreCalendarPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStoreCalendarStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStoreCalendarTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsManagerCreated")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarBlockDayId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeStoreCalendarPeriodId");

                    b.HasIndex("EmployeeStoreCalendarStatusId");

                    b.HasIndex("EmployeeStoreCalendarTypeId");

                    b.ToTable("EmployeeStoreCalendarBlockDays");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarGroup", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarGroupId");

                    b.ToTable("EmployeeStoreCalendarGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarPeriod", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeStoreCalendarYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarPeriodId");

                    b.HasIndex("EmployeeStoreCalendarYearId", "Number")
                        .IsUnique();

                    b.ToTable("EmployeeStoreCalendarPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarStatus", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarStatusId");

                    b.ToTable("EmployeeStoreCalendarStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarSurveyFormSubmission", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarSurveyFormSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarSurveyFormSubmissionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeStoreCalendarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormSubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarSurveyFormSubmissionId");

                    b.HasIndex("EmployeeStoreCalendarId");

                    b.HasIndex("SurveyFormSubmissionId");

                    b.ToTable("EmployeeStoreCalendarSurveyFormSubmissions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarType", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarTypeId");

                    b.ToTable("EmployeeStoreCalendarTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarYear", b =>
                {
                    b.Property<int>("EmployeeStoreCalendarYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCalendarYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCalendarYearId");

                    b.ToTable("EmployeeStoreCalendarYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCheckIn", b =>
                {
                    b.Property<int>("EmployeeStoreCheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreCheckInId"));

                    b.Property<float>("CheckInDistance")
                        .HasColumnType("float");

                    b.Property<float>("CheckInLat")
                        .HasColumnType("float");

                    b.Property<float>("CheckInLong")
                        .HasColumnType("float");

                    b.Property<DateTime>("CheckInTimezoneDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckInUTCDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CheckInUuid")
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("CheckOutDistance")
                        .HasColumnType("float");

                    b.Property<float?>("CheckOutLat")
                        .HasColumnType("float");

                    b.Property<float?>("CheckOutLong")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CheckOutTimezoneDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CheckOutUTCDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreCheckInId");

                    b.HasIndex("CheckInUuid")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("EmployeeStoreCheckIns");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreKpiScore", b =>
                {
                    b.Property<int>("EmployeeStoreKpiScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreKpiScoreId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKpiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeKpiTierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Score")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreKpiScoreId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeKpiId");

                    b.HasIndex("EmployeeKpiTierId");

                    b.HasIndex("StoreId");

                    b.ToTable("EmployeeStoreKpiScores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSuspension", b =>
                {
                    b.Property<int>("EmployeeSuspensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeSuspensionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeSuspensionReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeSuspensionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeSuspensionReasonId");

                    b.ToTable("EmployeeSuspensions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSuspensionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeSuspensionReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTaxStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeTaxStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTerminationHistory", b =>
                {
                    b.Property<int>("EmployeeTerminationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTerminationHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTerminationReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EmployeeTerminationHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeTerminationReasonId");

                    b.ToTable("EmployeeTerminationHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTerminationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeTerminationReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTrainingRecord", b =>
                {
                    b.Property<int>("EmployeeTrainingRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTrainingRecordId"));

                    b.Property<decimal>("AccommodationCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Additional5Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Additional6Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Assessor")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("CertificateExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CertificateNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("CourseResult")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DirectCourseCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("EmployeeRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("EmployeeTrainingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Facilitator")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<decimal>("FacilitatorCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("FoodAndBeverageCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsAddReminder")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TravelCost")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("EmployeeTrainingRecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeTrainingStatusId");

                    b.ToTable("EmployeeTrainingRecords");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTrainingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeTrainingStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransaction", b =>
                {
                    b.Property<int>("EmployeeTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Days")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeRecurringTransactionCount")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeRecurringTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeRecurringTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTransactionRemunerationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Hours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("PayrollPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("UnpaidDays")
                        .HasColumnType("float");

                    b.Property<float>("UnpaidHours")
                        .HasColumnType("float");

                    b.HasKey("EmployeeTransactionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeRecurringTransactionId");

                    b.HasIndex("EmployeeRecurringTransactionStatusId");

                    b.HasIndex("EmployeeTransactionRemunerationTypeId");

                    b.HasIndex("EmployeeTransactionStatusId");

                    b.HasIndex("EmployeeTransactionTypeId");

                    b.HasIndex("PayrollPeriodId");

                    b.ToTable("EmployeeTransactions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransactionRemunerationType", b =>
                {
                    b.Property<int>("EmployeeTransactionRemunerationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTransactionRemunerationTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeTransactionRemunerationTypeId");

                    b.ToTable("EmployeeTransactionRemunerationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransactionStatus", b =>
                {
                    b.Property<int>("EmployeeTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTransactionStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeTransactionStatusId");

                    b.ToTable("EmployeeTransactionStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransactionType", b =>
                {
                    b.Property<int>("EmployeeTransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTransactionTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeTransactionTypeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .HasColumnType("json");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float?>("OvertimeMultiple")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeTransactionTypeId");

                    b.HasIndex("EmployeeTransactionTypeGroupId");

                    b.ToTable("EmployeeTransactionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransactionTypeGroup", b =>
                {
                    b.Property<int>("EmployeeTransactionTypeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTransactionTypeGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeTransactionTypeGroupId");

                    b.ToTable("EmployeeTransactionTypeGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeUIFExemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmployeeUIFExemptions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeVehicle", b =>
                {
                    b.Property<int>("EmployeeVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeVehicleId"));

                    b.Property<int>("AssetOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HandedBackDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RecievedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Tracker")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Year")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmployeeVehicleId");

                    b.HasIndex("AssetOwnerId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VehicleBrandId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("EmployeeVehicles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeVehicleHistory", b =>
                {
                    b.Property<int>("EmployeeVehicleHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeVehicleHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeVehicleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NewEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OldEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeVehicleHistoryId");

                    b.HasIndex("EmployeeVehicleId");

                    b.HasIndex("NewEmployeeId");

                    b.HasIndex("OldEmployeeId");

                    b.ToTable("EmployeeVehicleHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeWorkRole", b =>
                {
                    b.Property<int>("EmployeeWorkRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeWorkRoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExitReason")
                        .HasColumnType("longtext");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("GradeLevel")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeWorkRoleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VacancyId");

                    b.ToTable("EmployeeWorkRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeWorkRoleContact", b =>
                {
                    b.Property<int>("EmployeeWorkRoleContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeWorkRoleContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmployeeWorkRoleId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("longtext")
                        .HasComputedColumnSql("concat(FirstName,' ',LastName)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("EmployeeWorkRoleContactId");

                    b.HasIndex("EmployeeWorkRoleId");

                    b.ToTable("EmployeeWorkRoleContacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmploymentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmploymentActions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EndDateReminderDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EmploymentTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSparBrand")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EngageBrands", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageSubGroupId");

                    b.ToTable("opt_EngageCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageDepartmentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageDepartmentGroupId");

                    b.ToTable("opt_EngageDepartments", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageDepartmentId");

                    b.ToTable("opt_EngageDepartmentCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EngageDepartmentGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EngageGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EngageLocations", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageMasterProduct", b =>
                {
                    b.Property<int>("EngageMasterProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EngageMasterProductId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsAllSuppliersProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCatalogue")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDairyProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDropShipment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFreshProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVATProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("ProductClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.HasKey("EngageMasterProductId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("EngageDepartmentId");

                    b.HasIndex("EngageSubCategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("ProductClassificationId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VatId");

                    b.ToTable("EngageMasterProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAllRegions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsApproveClaims")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClaimManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("StoreSparRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("StoreSparRegionId");

                    b.ToTable("opt_EngageRegions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageCategoryId");

                    b.ToTable("opt_EngageSubCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageDepartmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EngageGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("StoreDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageDepartmentCategoryId");

                    b.HasIndex("EngageDepartmentId");

                    b.HasIndex("EngageGroupId");

                    b.HasIndex("StoreDepartmentId");

                    b.ToTable("opt_EngageSubGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubRegion", b =>
                {
                    b.Property<int>("EngageSubRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EngageSubRegionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EngageSubRegionId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("EngageSubRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EngageTags", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageVariantProduct", b =>
                {
                    b.Property<int>("EngageVariantProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EngageVariantProductId"));

                    b.Property<string>("CaseBarcode")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EANNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EngageMasterProductId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsMaster")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<float>("PackSize")
                        .HasColumnType("float");

                    b.Property<string>("ShrinkBarcode")
                        .HasColumnType("longtext");

                    b.Property<float>("Size")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UnitBarcode")
                        .HasColumnType("longtext");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.HasKey("EngageVariantProductId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EngageMasterProductId");

                    b.HasIndex("Name");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("EngageVariantProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityBlob", b =>
                {
                    b.Property<int>("EntityBlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EntityBlobId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("EntityBlobId");

                    b.ToTable("EntityBlobs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EntityBlob");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContact", b =>
                {
                    b.Property<int>("EntityContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EntityContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EntityContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("longtext")
                        .HasComputedColumnSql("concat(FirstName,' ',LastName)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EntityContactId");

                    b.HasIndex("EntityContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityContacts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EntityContact");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContactCommunicationType", b =>
                {
                    b.Property<int>("EntityContactCommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EntityContactCommunicationTypeId"));

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EntityContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EntityContactCommunicationTypeId");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("EntityContactId");

                    b.ToTable("EntityContactCommunicationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContactRegion", b =>
                {
                    b.Property<int>("EntityContactRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EntityContactRegionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("EntityContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EntityContactRegionId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("EntityContactId");

                    b.ToTable("EntityContactRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EntityContactTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_EventTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.EvoLedger", b =>
                {
                    b.Property<int>("EvoLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EvoLedgerId"));

                    b.Property<int>("AnalysisPillarSubGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LedgerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EvoLedgerId");

                    b.HasIndex("AnalysisPillarSubGroupId");

                    b.ToTable("EvoLedgers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ExpenseClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ExpenseClaimStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<int>("ExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExpenseTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ExpenseTypeId");

                    b.ToTable("ExpenseTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Experiences", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ExternalUserType", b =>
                {
                    b.Property<int>("ExternalUserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExternalUserTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ExternalUserTypeId");

                    b.ToTable("ExternalUserTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileContainer", b =>
                {
                    b.Property<int>("FileContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FileContainerId"));

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FileNameStrategy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("PublicAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("FileContainerId");

                    b.ToTable("FileContainers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeBankDetailFile", b =>
                {
                    b.Property<int>("EmployeeBankDetailFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeBankDetailFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeBankDetailId")
                        .HasColumnType("int");

                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("EmployeeBankDetailFileId");

                    b.HasIndex("EmployeeBankDetailId");

                    b.HasIndex("FileContainerId");

                    b.ToTable("EmployeeBankDetailFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeCoolerBoxFile", b =>
                {
                    b.Property<int>("EmployeeCoolerBoxFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeCoolerBoxFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeCoolerBoxId")
                        .HasColumnType("int");

                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("EmployeeCoolerBoxFileId");

                    b.HasIndex("EmployeeCoolerBoxId");

                    b.HasIndex("FileContainerId");

                    b.ToTable("EmployeeCoolerBoxFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeQualificationFile", b =>
                {
                    b.Property<int>("EmployeeQualificationFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeQualificationFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("EmployeeQualificationFileId");

                    b.HasIndex("EmployeeQualificationId");

                    b.HasIndex("FileContainerId");

                    b.ToTable("EmployeeQualificationFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeSkillFile", b =>
                {
                    b.Property<int>("EmployeeSkillFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeSkillFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeSkillId")
                        .HasColumnType("int");

                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("EmployeeSkillFileId");

                    b.HasIndex("EmployeeSkillId");

                    b.HasIndex("FileContainerId");

                    b.ToTable("EmployeeSkillFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FileTypeId"));

                    b.Property<bool>("CanView")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Icon")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("IsUrl")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileUpload", b =>
                {
                    b.Property<int>("FileUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FileUploadId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("FileUploadId");

                    b.ToTable("FileUploads");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.FrequencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_FrequencyTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAccount", b =>
                {
                    b.Property<int>("GLAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GLAccountId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("GLAccountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("GLAccountId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("GLAccountTypeId");

                    b.ToTable("GLAccounts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAccountType", b =>
                {
                    b.Property<int>("GLAccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GLAccountTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("GLAccountTypeId");

                    b.ToTable("GLAccountTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAdjustment", b =>
                {
                    b.Property<int>("GLAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GLAdjustmentId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("BudgetPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<double>("CreditValue")
                        .HasMaxLength(20)
                        .HasColumnType("double");

                    b.Property<double>("DebitValue")
                        .HasMaxLength(20)
                        .HasColumnType("double");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("GLAdjustmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GLCode")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("GLDescription")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("GLAdjustmentId");

                    b.HasIndex("BudgetPeriodId");

                    b.HasIndex("BudgetYearId");

                    b.HasIndex("GLAdjustmentTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("GLAdjustments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAdjustmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_GLAdjustmentTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Genders", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Grades", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ImportFile", b =>
                {
                    b.Property<int>("ImportFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImportFileId"));

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ImportFileId");

                    b.ToTable("ImportFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ImportPromotionStore", b =>
                {
                    b.Property<int>("ImportPromotionStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImportPromotionStoreId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ImportFileId")
                        .HasColumnType("int");

                    b.Property<string>("ImportRowMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ImportRowType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ImportPromotionStoreId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StoreId");

                    b.HasIndex("ImportFileId", "RowNo")
                        .IsUnique();

                    b.ToTable("ImportPromotionStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ImportSurveyStore", b =>
                {
                    b.Property<int>("ImportSurveyStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImportSurveyStoreId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ImportFileId")
                        .HasColumnType("int");

                    b.Property<string>("ImportRowMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ImportRowType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ImportSurveyStoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("ImportFileId", "RowNo")
                        .IsUnique();

                    b.ToTable("ImportSurveyStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentId"));

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IncidentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("IncidentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("IncidentNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IncidentStatusId");

                    b.HasIndex("IncidentTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Incidents");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentSku", b =>
                {
                    b.Property<int>("IncidentSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentSkuId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentSkuStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IncidentSkuTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentSkuId");

                    b.HasIndex("DCProductId");

                    b.HasIndex("IncidentSkuStatusId");

                    b.HasIndex("IncidentSkuTypeId");

                    b.HasIndex("IncidentId", "DCProductId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("IncidentSkus");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentSkuStatus", b =>
                {
                    b.Property<int>("IncidentSkuStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentSkuStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentSkuStatusId");

                    b.ToTable("IncidentSkuStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentSkuType", b =>
                {
                    b.Property<int>("IncidentSkuTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentSkuTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentSkuTypeId");

                    b.ToTable("IncidentSkuTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentStatus", b =>
                {
                    b.Property<int>("IncidentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentStatusId");

                    b.ToTable("IncidentStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentType", b =>
                {
                    b.Property<int>("IncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IncidentTypeId");

                    b.ToTable("IncidentTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_InstitutionTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("BarCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<int>("InventoryGroupId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryUnitTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryGroupId");

                    b.HasIndex("InventoryStatusId");

                    b.HasIndex("InventoryUnitTypeId");

                    b.ToTable("Inventories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryGroup", b =>
                {
                    b.Property<int>("InventoryGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryGroupId");

                    b.ToTable("InventoryGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryPeriod", b =>
                {
                    b.Property<int>("InventoryPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InventoryYearId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryPeriodId");

                    b.HasIndex("InventoryYearId", "Number")
                        .IsUnique();

                    b.ToTable("InventoryPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryStatus", b =>
                {
                    b.Property<int>("InventoryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryStatusId");

                    b.ToTable("InventoryStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("InventoryTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryTransactionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("InventoryTransactionId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("InventoryTransactionStatusId");

                    b.HasIndex("InventoryTransactionTypeId");

                    b.HasIndex("InventoryWarehouseId");

                    b.ToTable("InventoryTransactions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryTransactionStatus", b =>
                {
                    b.Property<int>("InventoryTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryTransactionStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryTransactionStatusId");

                    b.ToTable("InventoryTransactionStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryTransactionType", b =>
                {
                    b.Property<int>("InventoryTransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryTransactionTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryTransactionTypeId");

                    b.ToTable("InventoryTransactionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryUnitType", b =>
                {
                    b.Property<int>("InventoryUnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryUnitTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryUnitTypeId");

                    b.ToTable("InventoryUnitTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryWarehouse", b =>
                {
                    b.Property<int>("InventoryWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryWarehouseId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryWarehouseId");

                    b.ToTable("InventoryWarehouses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryYear", b =>
                {
                    b.Property<int>("InventoryYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InventoryYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InventoryYearId");

                    b.ToTable("InventoryYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_LeaveTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.BudgetYearVersion", b =>
                {
                    b.Property<int>("BudgetYearId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("BudgetYearId", "BudgetVersionId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("BudgetVersionId");

                    b.ToTable("BudgetYearVersions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimClassificationType", b =>
                {
                    b.Property<int>("ClaimClassificationId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimClassificationId", "ClaimTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClaimTypeId");

                    b.ToTable("ClaimClassificationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimFloatClaim", b =>
                {
                    b.Property<int>("ClaimFloatId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimFloatId", "ClaimId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClaimId");

                    b.ToTable("ClaimFloatClaims");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimTypeReportType", b =>
                {
                    b.Property<int>("ClaimTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimReportTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ClaimTypeId", "ClaimReportTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClaimReportTypeId");

                    b.ToTable("ClaimTypeReportTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.DCDept", b =>
                {
                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<int>("DCDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("DistributionCenterId", "DCDepartmentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DCDepartmentId");

                    b.ToTable("DCDepts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeDepartment", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EngageDepartmentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageDepartmentId");

                    b.ToTable("EmployeeDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeBadge", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeBadgeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EmployeeBadgeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeBadgeId");

                    b.ToTable("EmployeeEmployeeBadges");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeDivision", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EmployeeDivisionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeDivisionId");

                    b.ToTable("EmployeeEmployeeDivisions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeHealthCondition", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeHealthConditionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EmployeeHealthConditionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeHealthConditionId");

                    b.ToTable("EmployeeEmployeeHealthConditions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeJobTitle", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EmployeeJobTitleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeJobTitleId");

                    b.ToTable("EmployeeEmployeeJobTitles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeKpi", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKpiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeKpiTierId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EmployeeKpiId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeKpiId");

                    b.HasIndex("EmployeeKpiTierId");

                    b.ToTable("EmployeeEmployeeKpis");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeManager", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "ManagerId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ManagerId");

                    b.ToTable("EmployeeManager");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeNotification", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "NotificationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NotificationId");

                    b.ToTable("EmployeeNotifications");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeRegion", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "EngageRegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageRegionId");

                    b.ToTable("EmployeeRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeReport", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "ReportId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReportId");

                    b.ToTable("EmployeeReports");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStore", b =>
                {
                    b.Property<int>("EmployeeStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageDepartmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreId");

                    b.HasIndex("EngageDepartmentCategoryId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("EmployeeId", "StoreId", "EngageSubGroupId")
                        .IsUnique();

                    b.ToTable("EmployeeStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStoreArchive", b =>
                {
                    b.Property<int>("EmployeeStoreArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeStoreArchiveId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageDepartmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeStoreArchiveId");

                    b.HasIndex("EngageDepartmentCategoryId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("EmployeeId", "StoreId", "EngageSubGroupId")
                        .IsUnique();

                    b.ToTable("EmployeeStoreArchives");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStoreKpi", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKpiId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeKpiTierId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EmployeeId", "StoreId", "EmployeeKpiId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeKpiId");

                    b.HasIndex("EmployeeKpiTierId");

                    b.HasIndex("StoreId");

                    b.ToTable("EmployeeStoreKpis");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeTraining", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<decimal>("AccommodationCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AdditionalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CarHireCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CateringCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DirectCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("FlightsCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("FuelCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("OtherCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("StationeryCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(65,30)")
                        .HasComputedColumnSql("DirectCost + AdditionalCost + AccommodationCost + CarHireCost + CateringCost + FlightsCost + FuelCost + StationeryCost + VenueCost + OtherCost");

                    b.Property<decimal>("VenueCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.HasKey("EmployeeId", "TrainingId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TrainingId");

                    b.ToTable("EmployeeTrainings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageProductTag", b =>
                {
                    b.Property<int>("EngageMasterProductId")
                        .HasColumnType("int");

                    b.Property<int>("EngageTagId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EngageMasterProductId", "EngageTagId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageTagId");

                    b.ToTable("EngageProductTags");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageRegionClaimManager", b =>
                {
                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EngageRegionId", "UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("EngageRegionClaimManagers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageSubGroupEngageBrand", b =>
                {
                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EngageSubGroupId", "EngageBrandId");

                    b.HasIndex("EngageBrandId");

                    b.ToTable("EngageSubGroupEngageBrands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageSubGroupSupplier", b =>
                {
                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("EngageSubGroupId", "SupplierId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId");

                    b.ToTable("EngageSubGroupSuppliers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationEmployeeRead", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("NotificationId", "EmployeeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeId");

                    b.ToTable("NotificationEmployeeReads");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationNotificationChannel", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationChannelId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("NotificationId", "NotificationChannelId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NotificationChannelId");

                    b.ToTable("NotificationNotificationChannels");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationRegion", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("NotificationId", "EngageRegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageRegionId");

                    b.ToTable("NotificationRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.OrderEngageDepartment", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderId", "EngageDepartmentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageDepartmentId");

                    b.ToTable("OrderEngageDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ProductWarehouseRegion", b =>
                {
                    b.Property<int>("ProductWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductWarehouseId", "EngageRegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageRegionId");

                    b.ToTable("ProductWarehouseRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.PromotionStore", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetingId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PromotionId", "StoreId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreId");

                    b.HasIndex("TargetingId");

                    b.ToTable("PromotionStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreConceptAttributeStoreAsset", b =>
                {
                    b.Property<int>("StoreConceptAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreConceptAttributeId", "StoreAssetId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreAssetId");

                    b.ToTable("StoreConceptAttributeStoreAssets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreConcept", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreConceptId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("StoreStoreConceptId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreId", "StoreConceptId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreConceptId");

                    b.ToTable("StoreStoreConcepts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreConceptPerformance", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreConceptId")
                        .HasColumnType("int");

                    b.Property<int>("FormatTarget")
                        .HasColumnType("int");

                    b.Property<string>("KpiTier")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreSkuCount")
                        .HasColumnType("int");

                    b.Property<int>("StoreSkuPercentDist")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StoreId", "StoreConceptId");

                    b.HasIndex("StoreConceptId");

                    b.ToTable("StoreStoreConceptPerformances");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreDepartment", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreId", "StoreDepartmentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreDepartmentId");

                    b.ToTable("StoreStoreDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreList", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreListId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreId", "StoreListId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreListId");

                    b.ToTable("StoreStoreList");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierClaimAccountManager", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierId", "UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("SupplierClaimAccountManagers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierClaimClassification", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierId", "ClaimClassificationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClaimClassificationId");

                    b.ToTable("SupplierClaimClassifications");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierEngageBrand", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierId", "EngageBrandId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageBrandId");

                    b.ToTable("SupplierEngageBrands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierProduct", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("EngageMasterProductId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierId", "EngageMasterProductId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageMasterProductId");

                    b.ToTable("SupplierProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierStore", b =>
                {
                    b.Property<int>("SupplierStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierStoreId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierSubRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierStoreId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierRegionId");

                    b.HasIndex("SupplierSubRegionId");

                    b.HasIndex("SupplierId", "StoreId", "EngageSubGroupId")
                        .IsUnique();

                    b.ToTable("SupplierStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierSupplierType", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierId", "SupplierTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("SupplierSupplierTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyEmployee", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetingId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyId", "EmployeeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TargetingId");

                    b.ToTable("SurveyEmployees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyEngageRegion", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyId", "EngageRegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageRegionId");

                    b.ToTable("SurveyEngageRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyQuestionFalseReason", b =>
                {
                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionFalseReasonId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyQuestionId", "QuestionFalseReasonId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("QuestionFalseReasonId");

                    b.ToTable("SurveyQuestionFalseReasons");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyStore", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetingId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyId", "StoreId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreId");

                    b.HasIndex("TargetingId");

                    b.ToTable("SurveyStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyStoreFormat", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyId", "StoreFormatId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StoreFormatId");

                    b.ToTable("SurveyStoreFormats");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.TrainingFacilitator", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<decimal>("AdditionalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DirectCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(65,30)")
                        .HasComputedColumnSql("DirectCost + AdditionalCost");

                    b.HasKey("EmployeeId", "TrainingId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingFacilitators");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.UserUserGroup", b =>
                {
                    b.Property<int>("UserUserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserUserGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserUserGroupId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId", "UserGroupId")
                        .IsUnique();

                    b.ToTable("UserUserGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("AddressLineTwo")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("BusinessUnit")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageLocationId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimaryAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float?>("Lat")
                        .HasColumnType("float");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<string>("Suburb")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("LocationId");

                    b.HasIndex("EngageLocationId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("Locations");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_LocationTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ManufacturerId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Manufacturers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_MaritalStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NPrinting", b =>
                {
                    b.Property<int>("NPrintingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NPrintingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Error")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NPrintingBatchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("NPrintingId");

                    b.HasIndex("NPrintingBatchId");

                    b.ToTable("NPrintings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NPrintingBatch", b =>
                {
                    b.Property<int>("NPrintingBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NPrintingBatchId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WebFileCategoryId")
                        .HasColumnType("int");

                    b.HasKey("NPrintingBatchId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("WebFileCategoryId");

                    b.ToTable("NPrintingBatches");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NextOfKinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_NextOfKinTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("Important")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNational")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<int?>("NotificationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<bool>("Targeted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationCategoryId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_NotificationCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_NotificationChannels", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationTarget", b =>
                {
                    b.Property<int>("NotificationTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationTargetId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("NotificationTargetId");

                    b.ToTable("NotificationTargets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NotificationTarget");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_NotificationTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystemOption")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("OptionTypeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("OptionTypeGroupId");

                    b.ToTable("OptionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OptionTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("OptionTypeGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Contact")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DCAccountNo")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmailedTo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("VATNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("OrderId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTemplateId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderQuantityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_OrderQuantityTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderSku", b =>
                {
                    b.Property<int>("OrderSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderSkuId"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<decimal>("GrossProfitPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderQuantityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderSkuStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderSkuTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTemplateProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PromotionPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderSkuId");

                    b.HasIndex("DCProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderQuantityTypeId");

                    b.HasIndex("OrderSkuStatusId");

                    b.HasIndex("OrderSkuTypeId");

                    b.HasIndex("OrderTemplateProductId");

                    b.ToTable("OrderSkus");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderSkuStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_OrderSkuStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderSkuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_OrderSkuTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderStaging", b =>
                {
                    b.Property<int>("OrderStagingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderStagingId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Date")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderContactEmail")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("OrderContactName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Reference")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Region")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("StoreName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("OrderStagingId");

                    b.ToTable("OrderStagings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderStagingSku", b =>
                {
                    b.Property<int>("OrderStagingSkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderStagingSkuId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("OrderStagingId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UnitType")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("OrderStagingSkuId");

                    b.HasIndex("OrderStagingId");

                    b.ToTable("OrderStagingSkus");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_OrderStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplate", b =>
                {
                    b.Property<int>("OrderTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderTemplateId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("OrderTemplateStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderTemplateId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("OrderTemplateStatusId");

                    b.ToTable("OrderTemplates");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateGroup", b =>
                {
                    b.Property<int>("OrderTemplateGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderTemplateGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OrderTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderTemplateGroupId");

                    b.HasIndex("OrderTemplateId");

                    b.ToTable("OrderTemplateGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateProduct", b =>
                {
                    b.Property<int>("OrderTemplateProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderTemplateProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<decimal>("GrossProfitPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OrderTemplateGroupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PromotionPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderTemplateProductId");

                    b.HasIndex("DCProductId");

                    b.HasIndex("OrderTemplateGroupId");

                    b.ToTable("OrderTemplateProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateStatus", b =>
                {
                    b.Property<int>("OrderTemplateStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderTemplateStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrderTemplateStatusId");

                    b.ToTable("OrderTemplateStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_OrderTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("JsonTheme")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("OrganizationSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .HasColumnType("json");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TenantIdentifier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("longtext");

                    b.Property<string>("ThemeCustomColor")
                        .HasColumnType("longtext");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OrganizationSettingId");

                    b.ToTable("Organizations");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrganizationSetting", b =>
                {
                    b.Property<int>("OrganizationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizationSettingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoDarkUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationTheme")
                        .HasColumnType("json");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("OrganizationSettingId");

                    b.ToTable("OrganizationSettings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("CreditorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsClaimFromSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentArchiveId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentBatchId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("VatId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CreditorId");

                    b.HasIndex("PaymentArchiveId");

                    b.HasIndex("PaymentBatchId");

                    b.HasIndex("PaymentPeriodId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("VatId");

                    b.ToTable("Payments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentArchive", b =>
                {
                    b.Property<int>("PaymentArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentArchiveId"));

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentArchiveId");

                    b.ToTable("PaymentArchives");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentBatch", b =>
                {
                    b.Property<int>("PaymentBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentBatchId"));

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentBatchId");

                    b.ToTable("PaymentBatches");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentBatchRegion", b =>
                {
                    b.Property<int>("PaymentBatchRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentBatchRegionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentBatchId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentBatchRegionId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("PaymentBatchId");

                    b.ToTable("PaymentBatchRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLine", b =>
                {
                    b.Property<int>("PaymentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("HasInvoice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasQuote")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSplitAmount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVat")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<float>("VatAmount")
                        .HasColumnType("float");

                    b.Property<int?>("VatId")
                        .HasColumnType("int");

                    b.HasKey("PaymentLineId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("VatId");

                    b.ToTable("PaymentLines");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineCostCenter", b =>
                {
                    b.Property<int>("PaymentLineCostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineCostCenterId"));

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentLineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineCostCenterId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("PaymentLineId");

                    b.ToTable("PaymentLineCostCenters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineCostSubDepartment", b =>
                {
                    b.Property<int>("PaymentLineCostSubDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineCostSubDepartmentId"));

                    b.Property<int>("CostSubDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentLineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineCostSubDepartmentId");

                    b.HasIndex("CostSubDepartmentId");

                    b.HasIndex("PaymentLineId");

                    b.ToTable("PaymentLineCostSubDepartments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineDivision", b =>
                {
                    b.Property<int>("PaymentLineDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineDivisionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeDivisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentLineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineDivisionId");

                    b.HasIndex("EmployeeDivisionId");

                    b.HasIndex("PaymentLineId");

                    b.ToTable("PaymentLineDivisions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineEmployee", b =>
                {
                    b.Property<int>("PaymentLineEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineEmployeeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentLineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentLineId");

                    b.ToTable("PaymentLineEmployees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineFile", b =>
                {
                    b.Property<int>("PaymentLineFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentLineFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentLineId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineFileId");

                    b.HasIndex("PaymentLineFileTypeId");

                    b.HasIndex("PaymentLineId");

                    b.ToTable("PaymentLineFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineFileType", b =>
                {
                    b.Property<int>("PaymentLineFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentLineFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentLineFileTypeId");

                    b.ToTable("PaymentLineFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentNotificationStatusUser", b =>
                {
                    b.Property<int>("PaymentNotificationStatusUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentNotificationStatusUserId"));

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentNotificationStatusUserId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentNotificationStatusUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentPeriod", b =>
                {
                    b.Property<int>("PaymentPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PaymentYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentPeriodId");

                    b.HasIndex("PaymentYearId", "Number")
                        .IsUnique();

                    b.ToTable("PaymentPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentProof", b =>
                {
                    b.Property<int>("PaymentProofId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentProofId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentProofId");

                    b.ToTable("PaymentProofs");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentProofPayment", b =>
                {
                    b.Property<int>("PaymentProofPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentProofPaymentId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentProofId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentProofPaymentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentProofId");

                    b.ToTable("PaymentProofPayments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentStatusHistory", b =>
                {
                    b.Property<int>("PaymentStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentStatusHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentStatusHistoryId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("PaymentStatusHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentYear", b =>
                {
                    b.Property<int>("PaymentYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PaymentYearId");

                    b.ToTable("PaymentYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PayrollPeriod", b =>
                {
                    b.Property<int>("PayrollPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PayrollPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PayrollYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PayrollPeriodId");

                    b.HasIndex("PayrollYearId", "Number")
                        .IsUnique();

                    b.ToTable("PayrollPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PayrollYear", b =>
                {
                    b.Property<int>("PayrollYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PayrollYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PayrollYearId");

                    b.ToTable("PayrollYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProductMasterColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductMasterSizeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductModuleStatusId")
                        .HasColumnType("int");

                    b.Property<float>("ProductPackSize")
                        .HasColumnType("float");

                    b.Property<int>("ProductPackSizeTypeId")
                        .HasColumnType("int");

                    b.Property<float>("ProductSize")
                        .HasColumnType("float");

                    b.Property<int>("ProductSizeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSystemStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedProductId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductMasterColorId");

                    b.HasIndex("ProductMasterId");

                    b.HasIndex("ProductMasterSizeId");

                    b.HasIndex("ProductModuleStatusId");

                    b.HasIndex("ProductPackSizeTypeId");

                    b.HasIndex("ProductSizeTypeId");

                    b.HasIndex("ProductSystemStatusId");

                    b.HasIndex("ProductWarehouseId");

                    b.HasIndex("RelatedProductId");

                    b.ToTable("Products");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductActiveStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductActiveStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductAnalysis", b =>
                {
                    b.Property<int>("ProductAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductAnalysisId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<int>("EngageCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EngageGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBakery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsButchery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHmr")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LedgerCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Listed")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("New")
                        .HasColumnType("int");

                    b.Property<string>("Product")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductAnalysisDivisionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAnalysisGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ProductAnalysisId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("EngageCategoryId");

                    b.HasIndex("EngageGroupId");

                    b.HasIndex("EngageSubCategoryId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("ProductAnalysisDivisionId");

                    b.HasIndex("ProductAnalysisGroupId");

                    b.ToTable("ProductAnalyses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductAnalysisDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductAnalysisDivisions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductAnalysisGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductAnalysisGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductBrand", b =>
                {
                    b.Property<int>("ProductBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductBrandId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SparBrand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductBrandId");

                    b.ToTable("ProductBrands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("ProductCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductClassifications", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductFilter", b =>
                {
                    b.Property<int>("ProductFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductFilterId"));

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FileUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductFilterId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("FileUploadId");

                    b.ToTable("ProductFilters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductFilterUpload", b =>
                {
                    b.Property<int>("ProductFilterUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductFilterUploadId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<string>("EngageVariantProductName")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("FileUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Filter")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("RowMessage")
                        .HasColumnType("longtext");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductFilterUploadId");

                    b.HasIndex("FileUploadId");

                    b.ToTable("ProductFilterUploads");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductGroup", b =>
                {
                    b.Property<int>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductGroupId");

                    b.ToTable("ProductGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductManufacturer", b =>
                {
                    b.Property<int>("ProductManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductManufacturerId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductSupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductManufacturerId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("ProductManufacturers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMaster", b =>
                {
                    b.Property<int>("ProductMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductMasterId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LedgerCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMasterStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductMasterSystemStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductReasonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVendorId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductMasterId");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductManufacturerId");

                    b.HasIndex("ProductMasterStatusId");

                    b.HasIndex("ProductMasterSystemStatusId");

                    b.HasIndex("ProductReasonId");

                    b.HasIndex("ProductSubCategoryId");

                    b.HasIndex("ProductVendorId");

                    b.ToTable("ProductMasters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterColor", b =>
                {
                    b.Property<int>("ProductMasterColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductMasterColorId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductMasterColorId");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("ProductMasterColors");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterSize", b =>
                {
                    b.Property<int>("ProductMasterSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductMasterSizeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductMasterId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductMasterSizeId");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("ProductMasterSizes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterStatus", b =>
                {
                    b.Property<int>("ProductMasterStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductMasterStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductMasterStatusId");

                    b.ToTable("ProductMasterStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterSystemStatus", b =>
                {
                    b.Property<int>("ProductMasterSystemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductMasterSystemStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductMasterSystemStatusId");

                    b.ToTable("ProductMasterSystemStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductModuleStatus", b =>
                {
                    b.Property<int>("ProductModuleStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductModuleStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductModuleStatusId");

                    b.ToTable("ProductModuleStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrder", b =>
                {
                    b.Property<int>("ProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("json");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductWarehouseOutId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderId");

                    b.HasIndex("ProductOrderStatusId");

                    b.HasIndex("ProductOrderTypeId");

                    b.HasIndex("ProductPeriodId");

                    b.HasIndex("ProductSupplierId");

                    b.HasIndex("ProductWarehouseId");

                    b.HasIndex("ProductWarehouseOutId");

                    b.ToTable("ProductOrders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderHistory", b =>
                {
                    b.Property<int>("ProductOrderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderHistoryId");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("ProductOrderStatusId");

                    b.ToTable("ProductOrderHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderLine", b =>
                {
                    b.Property<int>("ProductOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderLineId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderLineStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOrderLineTypeId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("ProductOrderLineStatusId");

                    b.HasIndex("ProductOrderLineTypeId");

                    b.ToTable("ProductOrderLines");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderLineStatus", b =>
                {
                    b.Property<int>("ProductOrderLineStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderLineStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderLineStatusId");

                    b.ToTable("ProductOrderLineStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderLineType", b =>
                {
                    b.Property<int>("ProductOrderLineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderLineTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderLineTypeId");

                    b.ToTable("ProductOrderLineTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderStatus", b =>
                {
                    b.Property<int>("ProductOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderStatusId");

                    b.ToTable("ProductOrderStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderType", b =>
                {
                    b.Property<int>("ProductOrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductOrderTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductOrderTypeId");

                    b.ToTable("ProductOrderTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductPackSizeType", b =>
                {
                    b.Property<int>("ProductPackSizeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductPackSizeTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductPackSizeTypeId");

                    b.ToTable("ProductPackSizeTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductPeriod", b =>
                {
                    b.Property<int>("ProductPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductPeriodId");

                    b.HasIndex("ProductYearId", "Name")
                        .IsUnique();

                    b.ToTable("ProductPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductPriceId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductReason", b =>
                {
                    b.Property<int>("ProductReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductReasonId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductReasonId");

                    b.ToTable("ProductReasons");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSizeType", b =>
                {
                    b.Property<int>("ProductSizeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductSizeTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductSizeTypeId");

                    b.ToTable("ProductSizeTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSubCategory", b =>
                {
                    b.Property<int>("ProductSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductSubCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductSubCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductSubCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSubGroup", b =>
                {
                    b.Property<int>("ProductSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductSubGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductSubGroupId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSupplier", b =>
                {
                    b.Property<int>("ProductSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductSupplierId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductSupplierId");

                    b.ToTable("ProductSuppliers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSystemStatus", b =>
                {
                    b.Property<int>("ProductSystemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductSystemStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductSystemStatusId");

                    b.ToTable("ProductSystemStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductTransaction", b =>
                {
                    b.Property<int>("ProductTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductTransactionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProductTransactionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPeriodId");

                    b.HasIndex("ProductTransactionStatusId");

                    b.HasIndex("ProductTransactionTypeId");

                    b.HasIndex("ProductWarehouseId");

                    b.ToTable("ProductTransactions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductTransactionStatus", b =>
                {
                    b.Property<int>("ProductTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductTransactionStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductTransactionStatusId");

                    b.ToTable("ProductTransactionStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductTransactionType", b =>
                {
                    b.Property<int>("ProductTransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductTransactionTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductTransactionTypeId");

                    b.ToTable("ProductTransactionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductVendor", b =>
                {
                    b.Property<int>("ProductVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductVendorId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductVendorId");

                    b.ToTable("ProductVendors");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouse", b =>
                {
                    b.Property<int>("ProductWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductWarehouseId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductWarehouseId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductWarehouses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_ProductWarehouseStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouseSummary", b =>
                {
                    b.Property<int>("ProductWarehouseSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductWarehouseSummaryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductWarehouseSummaryId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("ProductPeriodId");

                    b.HasIndex("ProductWarehouseId");

                    b.HasIndex("ProductId", "ProductWarehouseId", "ProductPeriodId", "EngageRegionId")
                        .IsUnique();

                    b.ToTable("ProductWarehouseSummaries");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductYear", b =>
                {
                    b.Property<int>("ProductYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProductYearId");

                    b.ToTable("ProductYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Proficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Proficiencies", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("AssignedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Emails")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<float?>("EstimatedHours")
                        .HasColumnType("float");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("json");

                    b.Property<string>("OpenedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectCampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("RemainingHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectCampaignId");

                    b.HasIndex("ProjectCategoryId");

                    b.HasIndex("ProjectPriorityId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectSubCategoryId");

                    b.HasIndex("ProjectSubTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Project");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectAssignee", b =>
                {
                    b.Property<int>("ProjectAssigneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectAssigneeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStakeholderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectAssigneeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStakeholderId");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("ProjectAssignees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCampaign", b =>
                {
                    b.Property<int>("ProjectCampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectCampaignId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("json");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectCampaignId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("ProjectCampaigns");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectCategoryId");

                    b.ToTable("ProjectCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCategorySupplier", b =>
                {
                    b.Property<int>("ProjectCategorySupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectCategorySupplierId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectCategorySupplierId");

                    b.HasIndex("ProjectCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProjectCategorySuppliers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectComment", b =>
                {
                    b.Property<int>("ProjectCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectCommentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("ProjectComments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectDcProduct", b =>
                {
                    b.Property<int>("ProjectDcProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectDcProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DcProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectDcProductId");

                    b.HasIndex("DcProductId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDcProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectEngageBrand", b =>
                {
                    b.Property<int>("ProjectEngageBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectEngageBrandId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectEngageBrandId");

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEngageBrands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectExternalUser", b =>
                {
                    b.Property<int>("ProjectExternalUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectExternalUserId"));

                    b.Property<string>("CellNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("ExternalUserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectExternalUserId");

                    b.HasIndex("ExternalUserTypeId");

                    b.ToTable("ProjectExternalUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectExternalUserCommunicationType", b =>
                {
                    b.Property<int>("ProjectExternalUserCommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectExternalUserCommunicationTypeId"));

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectExternalUserId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectExternalUserCommunicationTypeId");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("ProjectExternalUserId");

                    b.ToTable("ProjectExternalUserCommunicationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectFile", b =>
                {
                    b.Property<int>("ProjectFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectFileId");

                    b.HasIndex("ProjectFileTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectFileType", b =>
                {
                    b.Property<int>("ProjectFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectFileTypeId");

                    b.ToTable("ProjectFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectNote", b =>
                {
                    b.Property<int>("ProjectNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectNoteId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectNoteId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectPriority", b =>
                {
                    b.Property<int>("ProjectPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectPriorityId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEndDateRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectPriorityId");

                    b.ToTable("ProjectPriorities");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTag", b =>
                {
                    b.Property<int>("ProjectProjectTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectProjectTagId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectProjectTagId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProjectTags");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProjectProjectTag");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholder", b =>
                {
                    b.Property<int>("ProjectStakeholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectStakeholderId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectStakeholderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectStakeholders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProjectStakeholder");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectStatusId");

                    b.ToTable("ProjectStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStatusHistory", b =>
                {
                    b.Property<int>("ProjectStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectStatusHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectStatusHistoryId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("projectStatusHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStoreAsset", b =>
                {
                    b.Property<int>("ProjectStoreAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectStoreAssetId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectStoreAssetId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StoreAssetId");

                    b.ToTable("ProjectStoreAssets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSubCategory", b =>
                {
                    b.Property<int>("ProjectSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectSubCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectSubCategoryId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("ProjectSubCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSubType", b =>
                {
                    b.Property<int>("ProjectSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectSubTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectSubTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("ProjectSubTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSupplier", b =>
                {
                    b.Property<int>("ProjectSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectSupplierId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectSupplierId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProjectSuppliers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTacOp", b =>
                {
                    b.Property<int>("ProjectTacOpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTacOpId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectTacOpId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTacOps");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTacOpRegion", b =>
                {
                    b.Property<int>("ProjectTacOpId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTacOpId", "EngageRegionId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EngageRegionId");

                    b.ToTable("ProjectTacOpRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<int>("ProjectTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskId"));

                    b.Property<string>("AssignedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClosedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("EstimatedHours")
                        .HasColumnType("float");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OpenedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStakeholderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTaskPriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTaskSeverityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTaskTypeId")
                        .HasColumnType("int");

                    b.Property<float?>("RemainingHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStakeholderId");

                    b.HasIndex("ProjectTaskPriorityId");

                    b.HasIndex("ProjectTaskSeverityId");

                    b.HasIndex("ProjectTaskStatusId");

                    b.HasIndex("ProjectTaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTasks");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskAssignee", b =>
                {
                    b.Property<int>("ProjectTaskAssigneeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskAssigneeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStakeholderId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTaskStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskAssigneeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("ProjectTaskStatusId");

                    b.ToTable("ProjectTaskAssignees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskComment", b =>
                {
                    b.Property<int>("ProjectTaskCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskCommentId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskComments");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskNote", b =>
                {
                    b.Property<int>("ProjectTaskNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskNoteId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskNoteId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskNotes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskPriority", b =>
                {
                    b.Property<int>("ProjectTaskPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskPriorityId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskPriorityId");

                    b.ToTable("ProjectTaskPriorities");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskProjectStakeholderUser", b =>
                {
                    b.Property<int>("ProjectTaskProjectStakeholderUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskProjectStakeholderUserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectStakeholderId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskProjectStakeholderUserId");

                    b.HasIndex("ProjectStakeholderId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskProjectStakeholderUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskSeverity", b =>
                {
                    b.Property<int>("ProjectTaskSeverityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskSeverityId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskSeverityId");

                    b.ToTable("ProjectTaskSeverities");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskStakeholder", b =>
                {
                    b.Property<int>("ProjectTaskStakeholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskStakeholderId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Emails")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectStakeholderId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskStakeholderId");

                    b.HasIndex("ProjectStakeholderId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("ProjectTaskStatusId");

                    b.ToTable("ProjectTaskStakeholders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskStatus", b =>
                {
                    b.Property<int>("ProjectTaskStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskStatusId");

                    b.ToTable("ProjectTaskStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskStatusHistory", b =>
                {
                    b.Property<int>("ProjectTaskStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskStatusHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTaskStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskStatusHistoryId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("ProjectTaskStatusId");

                    b.ToTable("ProjectTaskStatusHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskType", b =>
                {
                    b.Property<int>("ProjectTaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTaskTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTaskTypeId");

                    b.ToTable("ProjectTaskTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDescriptionRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ProjectId", "UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("OrderEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OrderStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PromotionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.HasKey("PromotionId");

                    b.HasIndex("PromotionTypeId");

                    b.ToTable("Promotions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PromotionProduct", b =>
                {
                    b.Property<int>("PromotionProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PromotionProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("PromotionProductId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("PromotionProductTypeId");

                    b.ToTable("PromotionProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PromotionProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_PromotionProductTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.PromotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_PromotionTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Provinces", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.QuestionFalseReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_QuestionFalseReasons", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_QuestionTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Races", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ReportId");

                    b.ToTable("Report");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.RoleUserGroup", b =>
                {
                    b.Property<int>("RoleUserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleUserGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("RoleUserGroupId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("RoleId", "UserGroupId")
                        .IsUnique();

                    b.ToTable("RoleUserGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityOrganization", b =>
                {
                    b.Property<int>("SecurityOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SecurityOrganizationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SecurityOrganizationId");

                    b.ToTable("SecurityOrganizations");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityPermission", b =>
                {
                    b.Property<int>("SecurityPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SecurityPermissionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SecurityPermissionId");

                    b.ToTable("SecurityPermissions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityPermissionRole", b =>
                {
                    b.Property<int>("SecurityPermissionRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SecurityPermissionRoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SecurityPermissionId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityRoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SecurityPermissionRoleId");

                    b.HasIndex("SecurityPermissionId");

                    b.HasIndex("SecurityRoleId");

                    b.ToTable("SecurityPermissionRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityRole", b =>
                {
                    b.Property<int>("SecurityRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SecurityRoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SecurityRoleId");

                    b.ToTable("SecurityRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityRoleUser", b =>
                {
                    b.Property<int>("SecurityRoleUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SecurityRoleUserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SecurityRoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SecurityRoleUserId");

                    b.HasIndex("SecurityRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityRoleUsers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SettingId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Settings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SkillCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_SkillCategories", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparAnalysisGroup", b =>
                {
                    b.Property<int>("SparAnalysisGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparAnalysisGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparAnalysisGroupId");

                    b.ToTable("SparAnalysisGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparProduct", b =>
                {
                    b.Property<int>("SparProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparProductId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EvoLedgerId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SparAnalysisGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SparProductStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SparSystemStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SparUnitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<float?>("UnitSize")
                        .HasColumnType("float");

                    b.HasKey("SparProductId");

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("EngageSubCategoryId");

                    b.HasIndex("EvoLedgerId");

                    b.HasIndex("SparAnalysisGroupId");

                    b.HasIndex("SparProductStatusId");

                    b.HasIndex("SparSystemStatusId");

                    b.HasIndex("SparUnitTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SparProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparProductStatus", b =>
                {
                    b.Property<int>("SparProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparProductStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparProductStatusId");

                    b.ToTable("SparProductStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparSource", b =>
                {
                    b.Property<int>("SparSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparSourceId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparSourceId");

                    b.ToTable("SparSources");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparSubProduct", b =>
                {
                    b.Property<int>("SparSubProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparSubProductId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CaseBarcode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DCCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("PalletBarcode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShrinkBarcode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("SparProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SparSourceId")
                        .HasColumnType("int");

                    b.Property<int>("SparSubProductStatusId")
                        .HasColumnType("int");

                    b.Property<float?>("StockOnHand")
                        .HasColumnType("float");

                    b.Property<float?>("StockOnOrder")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Warehouse")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("SparSubProductId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("SparProductId");

                    b.HasIndex("SparSourceId");

                    b.HasIndex("SparSubProductStatusId");

                    b.ToTable("SparSubProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparSubProductStatus", b =>
                {
                    b.Property<int>("SparSubProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparSubProductStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparSubProductStatusId");

                    b.ToTable("SparSubProductStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparSystemStatus", b =>
                {
                    b.Property<int>("SparSystemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparSystemStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparSystemStatusId");

                    b.ToTable("SparSystemStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparUnitType", b =>
                {
                    b.Property<int>("SparUnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SparUnitTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SparUnitTypeId");

                    b.ToTable("SparUnitTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Stakeholder", b =>
                {
                    b.Property<int>("StakeholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StakeholderId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StakeholderType")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("StakeholderId");

                    b.HasIndex("VendorId");

                    b.ToTable("Stakeholders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StatsOrdersByRegion", b =>
                {
                    b.Property<int>("StatsOrdersByRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatsOrdersByRegionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersAll")
                        .HasColumnType("int");

                    b.Property<int>("OrdersLast1Day")
                        .HasColumnType("int");

                    b.Property<int>("OrdersLast7Days")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StatsOrdersByRegionId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("StatsOrdersByRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StatsStoresByRegion", b =>
                {
                    b.Property<int>("StatsStoresByRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatsStoresByRegionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int>("Stores")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StatsStoresByRegionId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("StatsStoresByRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("CatManStoreCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageLocationId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageSubRegionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHalaal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNotServiced")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("ParentStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryLocationId")
                        .HasColumnType("int");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<int>("StoreClusterId")
                        .HasColumnType("int");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.Property<int>("StoreGroupId")
                        .HasColumnType("int");

                    b.Property<string>("StoreImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("StoreLSMId")
                        .HasColumnType("int");

                    b.Property<int>("StoreLocationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreMediaGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreSparRegionId")
                        .HasColumnType("int");

                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("StoreId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EngageLocationId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("EngageSubRegionId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentStoreId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PrimaryLocationId");

                    b.HasIndex("StakeholderId")
                        .IsUnique();

                    b.HasIndex("StoreClusterId");

                    b.HasIndex("StoreFormatId");

                    b.HasIndex("StoreGroupId");

                    b.HasIndex("StoreLSMId");

                    b.HasIndex("StoreLocationTypeId");

                    b.HasIndex("StoreMediaGroupId");

                    b.HasIndex("StoreSparRegionId");

                    b.HasIndex("StoreTypeId");

                    b.HasIndex("StoreId", "ParentStoreId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Stores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAsset", b =>
                {
                    b.Property<int>("StoreAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetId"));

                    b.Property<int?>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("HasContract")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StoreAssetConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreAssetOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreAssetStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreAssetSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("UpliftDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StoreAssetId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("StoreAssetConditionId");

                    b.HasIndex("StoreAssetOwnerId");

                    b.HasIndex("StoreAssetStatusId");

                    b.HasIndex("StoreAssetSubTypeId");

                    b.HasIndex("StoreAssetTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreAssets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetBlob", b =>
                {
                    b.Property<int>("StoreAssetBlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetBlobId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("StoreAssetFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetBlobId");

                    b.HasIndex("StoreAssetFileTypeId");

                    b.HasIndex("StoreAssetId");

                    b.ToTable("StoreAssetBlobs");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetCondition", b =>
                {
                    b.Property<int>("StoreAssetConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetConditionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetConditionId");

                    b.ToTable("StoreAssetConditions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetFile", b =>
                {
                    b.Property<int>("StoreAssetFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreAssetFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetFileId");

                    b.HasIndex("StoreAssetFileTypeId");

                    b.HasIndex("StoreAssetId");

                    b.ToTable("StoreAssetFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetFileType", b =>
                {
                    b.Property<int>("StoreAssetFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetFileTypeId");

                    b.ToTable("StoreAssetFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreAssetOwners", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetOwnerStoreAssetType", b =>
                {
                    b.Property<int>("StoreAssetOwnerStoreAssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetOwnerStoreAssetTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreAssetOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetOwnerStoreAssetTypeId");

                    b.HasIndex("StoreAssetOwnerId");

                    b.HasIndex("StoreAssetTypeId");

                    b.ToTable("StoreAssetOwnerStoreAssetTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetStatus", b =>
                {
                    b.Property<int>("StoreAssetStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetStatusId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetStatusId");

                    b.ToTable("StoreAssetStatuses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetStoreAssetTypeContact", b =>
                {
                    b.Property<int>("StoreAssetStoreAssetTypeContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetStoreAssetTypeContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetTypeContactId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetStoreAssetTypeContactId");

                    b.HasIndex("StoreAssetId");

                    b.HasIndex("StoreAssetTypeContactId");

                    b.ToTable("StoreAssetStoreAssetTypeContacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetSubType", b =>
                {
                    b.Property<int>("StoreAssetSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetSubTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StoreAssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetSubTypeId");

                    b.HasIndex("StoreAssetTypeId");

                    b.ToTable("StoreAssetSubTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreAssetTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeContact", b =>
                {
                    b.Property<int>("StoreAssetTypeContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetTypeContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetTypeContactId");

                    b.ToTable("StoreAssetTypeContacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeStoreAssetSubType", b =>
                {
                    b.Property<int>("StoreAssetTypeStoreAssetSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetTypeStoreAssetSubTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreAssetSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetTypeStoreAssetSubTypeId");

                    b.HasIndex("StoreAssetSubTypeId");

                    b.HasIndex("StoreAssetTypeId");

                    b.ToTable("StoreAssetTypeStoreAssetSubTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeStoreAssetTypeContact", b =>
                {
                    b.Property<int>("StoreAssetTypeStoreAssetTypeContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreAssetTypeStoreAssetTypeContactId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreAssetTypeContactId")
                        .HasColumnType("int");

                    b.Property<int>("StoreAssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreAssetTypeStoreAssetTypeContactId");

                    b.HasIndex("StoreAssetTypeContactId");

                    b.HasIndex("StoreAssetTypeId");

                    b.ToTable("StoreAssetTypeStoreAssetTypeContacts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreBankDetail", b =>
                {
                    b.Property<int>("StoreBankDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreBankDetailId"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreBankDetailId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreBankDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreClaimTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreCluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreClusters", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EngageDepartmentId");

                    b.ToTable("opt_StoreConcepts", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttribute", b =>
                {
                    b.Property<int>("StoreConceptAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreConceptAttributeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StoreConceptAttributeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreConceptId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreConceptAttributeId");

                    b.HasIndex("StoreConceptAttributeTypeId");

                    b.HasIndex("StoreConceptId");

                    b.ToTable("StoreConceptAttributes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttributeOption", b =>
                {
                    b.Property<int>("StoreConceptAttributeOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreConceptAttributeOptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StoreConceptAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreConceptAttributeOptionId");

                    b.HasIndex("StoreConceptAttributeId");

                    b.ToTable("StoreConceptAttributeOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttributeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreConceptAttributeTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttributeValue", b =>
                {
                    b.Property<int>("StoreConceptAttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreConceptAttributeValueId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreConceptAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreConceptAttributeOptionId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StoreConceptAttributeValueId");

                    b.HasIndex("StoreConceptAttributeId");

                    b.HasIndex("StoreConceptAttributeOptionId");

                    b.HasIndex("StoreId", "StoreConceptAttributeId")
                        .IsUnique();

                    b.ToTable("StoreConceptAttributeValues");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptLevel", b =>
                {
                    b.Property<int>("StoreConceptLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreConceptLevelId"));

                    b.Property<int>("Actual")
                        .HasColumnType("int");

                    b.Property<string>("BlobName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BlobUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Concepts")
                        .HasColumnType("json");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.Property<int>("StoreConceptId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreConceptLevelId");

                    b.HasIndex("StoreConceptId");

                    b.HasIndex("StoreId", "StoreConceptId")
                        .IsUnique();

                    b.ToTable("StoreConceptLevels");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreConceptTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreCycle", b =>
                {
                    b.Property<int>("StoreCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreCycleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Friday")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Monday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoreCycleOperationId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<bool>("Sunday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("Thursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("StoreCycleId");

                    b.HasIndex("EngageDepartmentId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("StoreCycleOperationId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreCycles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreCycleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreCycleOperations", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreDepartments", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFilter", b =>
                {
                    b.Property<int>("StoreFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreFilterId"));

                    b.Property<string>("AS400")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FileUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreFilterId");

                    b.HasIndex("FileUploadId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreFilters");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFilterUpload", b =>
                {
                    b.Property<int>("StoreFilterUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreFilterUploadId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FileUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Filter")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("RowMessage")
                        .HasColumnType("longtext");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int>("RowType")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreFilterUploadId");

                    b.HasIndex("FileUploadId");

                    b.ToTable("StoreFilterUploads");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreFormats", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreLSM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreLSMs", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreList", b =>
                {
                    b.Property<int>("StoreListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreListId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreListId");

                    b.ToTable("StoreList");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreMediaGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreMediaGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreOwner", b =>
                {
                    b.Property<int>("StoreOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StoreOwnerId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPrimaryOwner")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoreGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreOwnerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StoreOwnerId");

                    b.HasIndex("StoreGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreOwnerTypeId");

                    b.ToTable("StoreOwners");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreOwnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreOwnerTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOS", b =>
                {
                    b.Property<int>("StorePOSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StorePOSId"));

                    b.Property<int>("A0PosterQty")
                        .HasColumnType("int");

                    b.Property<int>("A1PosterQty")
                        .HasColumnType("int");

                    b.Property<int>("A2PosterQty")
                        .HasColumnType("int");

                    b.Property<int>("A3BuntingQty")
                        .HasColumnType("int");

                    b.Property<int>("AisleBladesQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HangingMobilesQty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ShelfStripsQty")
                        .HasColumnType("int");

                    b.Property<int>("ShelfTalkersQty")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StorePOSTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TableClothsQty")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("TentCardsQty")
                        .HasColumnType("int");

                    b.Property<int>("WobblersQty")
                        .HasColumnType("int");

                    b.HasKey("StorePOSId");

                    b.HasIndex("StorePOSTypeId");

                    b.HasIndex("StoreId", "StorePOSTypeId")
                        .IsUnique();

                    b.ToTable("StorePOS");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSFreezerQuestion", b =>
                {
                    b.Property<int>("StorePOSFreezerQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StorePOSFreezerQuestionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FreezerDecalsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsFreezerDecals")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShelfTalker")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWobblers")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ShelfTalkerComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StorePOSFreezerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StorePOSTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("WobblersComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("StorePOSFreezerQuestionId");

                    b.HasIndex("StorePOSFreezerTypeId");

                    b.HasIndex("StorePOSTypeId");

                    b.HasIndex("StoreId", "StorePOSTypeId")
                        .IsUnique();

                    b.ToTable("StorePOSFreezerQuestions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSFreezerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StorePOSFreezerTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSQuestion", b =>
                {
                    b.Property<int>("StorePOSQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StorePOSQuestionId"));

                    b.Property<string>("AisleBladesComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BaseWrapComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EntryBoxComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FSUDecalsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FSUDecalsPaidComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FloorDecalsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FridgeDecalsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("GondolaHeaderComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("HangingMobilesComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsAisleBlades")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBaseWrap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEntryBox")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFSUDecals")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFSUDecalsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFloorDecals")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFridgeDecals")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGondolaHeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHangingMobiles")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNeckTags")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsParaciteUnits")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPollUpBanner")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSensorSleaves")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShelfStrips")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStandee")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NeckTagsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ParaciteUnitsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PollUpBannerComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SensorSleavesComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ShelfStripsComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("StandeeComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StorePOSTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("StorePOSQuestionId");

                    b.HasIndex("StorePOSTypeId");

                    b.HasIndex("StoreId", "StorePOSTypeId")
                        .IsUnique();

                    b.ToTable("StorePOSQuestions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StorePOSTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreSparRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreSparRegions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_StoreTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SubContractorBrand", b =>
                {
                    b.Property<int>("SubContractorBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubContractorBrandId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SubContractorBrandId");

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SubContractorBrands");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SubWarehouse", b =>
                {
                    b.Property<int>("SubWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubWarehouseId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SubWarehouseId");

                    b.ToTable("SubWarehouses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("BooleanSettings")
                        .HasColumnType("json");

                    b.Property<bool>("ClaimModuleEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClaimReportAccountNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClaimReportTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsClaimAccountManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClaimAccountManagerRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClaimFloatRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClaimManager")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDairy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmployeeClaim")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSubContractor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSupplierProductsOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JsonTheme")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("NumberSettings")
                        .HasColumnType("json");

                    b.Property<bool>("OrderModuleEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .HasColumnType("json");

                    b.Property<string>("ShortName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("StakeholderId")
                        .HasColumnType("int");

                    b.Property<string>("StringSettings")
                        .HasColumnType("json");

                    b.Property<int>("SupplierGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("longtext");

                    b.Property<string>("ThemeCustomColor")
                        .HasColumnType("longtext");

                    b.Property<string>("VATNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("SupplierId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PrimaryLocationId");

                    b.HasIndex("StakeholderId")
                        .IsUnique();

                    b.HasIndex("SupplierGroupId");

                    b.ToTable("Suppliers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowance", b =>
                {
                    b.Property<int>("SupplierAllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierAllowanceId"));

                    b.Property<string>("AdvertisingMarketingAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("AdvertisingMarketingAllowancePercent")
                        .HasColumnType("float");

                    b.Property<string>("CatmanNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("CatmanPercent")
                        .HasColumnType("float");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EncoreHouseAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EncoreHouseAllowancePercent")
                        .HasColumnType("float");

                    b.Property<string>("EncoreTradeMarketingNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EncoreTradeMarketingPercent")
                        .HasColumnType("float");

                    b.Property<string>("EngageNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EngagePercent")
                        .HasColumnType("float");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("GlMainCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GlSubCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NCircular")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("RebateNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("RebatePercent")
                        .HasColumnType("float");

                    b.Property<string>("RedistributionNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("RedistributionPercent")
                        .HasColumnType("float");

                    b.Property<string>("SettlementNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("SettlementPercent")
                        .HasColumnType("float");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierSalesLeadId")
                        .HasColumnType("int");

                    b.Property<string>("SwellNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("SwellPercent")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WarehouseAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("WarehouseAllowancePercent")
                        .HasColumnType("float");

                    b.HasKey("SupplierAllowanceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierSalesLeadId");

                    b.ToTable("SupplierAllowances");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowanceContract", b =>
                {
                    b.Property<int>("SupplierAllowanceContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierAllowanceContractId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EncoreReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NCircularReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierSalesLeadId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierAllowanceContractId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierSalesLeadId");

                    b.ToTable("SupplierAllowanceContracts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowanceSubContract", b =>
                {
                    b.Property<int>("SupplierAllowanceSubContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierAllowanceSubContractId"));

                    b.Property<string>("AdvertisingMarketingAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("AdvertisingMarketingAllowancePercent")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CatmanNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("CatmanPercent")
                        .HasColumnType("float");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EncoreHouseAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EncoreHouseAllowancePercent")
                        .HasColumnType("float");

                    b.Property<string>("EncoreTradeMarketingNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EncoreTradeMarketingPercent")
                        .HasColumnType("float");

                    b.Property<string>("EngageNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("EngagePercent")
                        .HasColumnType("float");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("GlMainCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GlSubCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NCircular")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("RebateNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("RebatePercent")
                        .HasColumnType("float");

                    b.Property<string>("RedistributionNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("RedistributionPercent")
                        .HasColumnType("float");

                    b.Property<string>("SettlementNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("SettlementPercent")
                        .HasColumnType("float");

                    b.Property<int>("SupplierAllowanceContractId")
                        .HasColumnType("int");

                    b.Property<string>("SwellNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("SwellPercent")
                        .HasColumnType("float");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WarehouseAllowanceNote")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("WarehouseAllowancePercent")
                        .HasColumnType("float");

                    b.HasKey("SupplierAllowanceSubContractId");

                    b.HasIndex("SupplierAllowanceContractId");

                    b.ToTable("SupplierAllowanceSubContracts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudget", b =>
                {
                    b.Property<int>("SupplierBudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierBudgetId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SupplierBudgetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierBudgetVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierContractDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierBudgetId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SupplierBudgetTypeId");

                    b.HasIndex("SupplierBudgetVersionId");

                    b.HasIndex("SupplierContractDetailId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierBudgets");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudgetType", b =>
                {
                    b.Property<int>("SupplierBudgetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierBudgetTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierBudgetTypeId");

                    b.ToTable("SupplierBudgetTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudgetVersion", b =>
                {
                    b.Property<int>("SupplierBudgetVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierBudgetVersionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SupplierBudgetVersionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierPeriodId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierBudgetVersionId");

                    b.HasIndex("SupplierBudgetVersionTypeId");

                    b.HasIndex("SupplierPeriodId");

                    b.ToTable("SupplierBudgetVersions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudgetVersionType", b =>
                {
                    b.Property<int>("SupplierBudgetVersionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierBudgetVersionTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierBudgetVersionTypeId");

                    b.ToTable("SupplierBudgetVersionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContract", b =>
                {
                    b.Property<int>("SupplierContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsEncore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEngage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEngine")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpar")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTops")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("Reference1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Reference2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierContactId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierContractGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierContractSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierContractTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplierContractId");

                    b.HasIndex("SupplierContactId");

                    b.HasIndex("SupplierContractGroupId");

                    b.HasIndex("SupplierContractSubGroupId");

                    b.HasIndex("SupplierContractTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContracts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractAmount", b =>
                {
                    b.Property<int>("SupplierContractAmountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractAmountId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("EndRangeAmount")
                        .HasColumnType("float");

                    b.Property<bool>("IsAmountPercent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRangeAmountPercent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("json");

                    b.Property<float?>("StartRangeAmount")
                        .HasColumnType("float");

                    b.Property<int>("SupplierContractAmountTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierContractSplitId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierSubContractDetailId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractAmountId");

                    b.HasIndex("SupplierContractAmountTypeId");

                    b.HasIndex("SupplierContractSplitId");

                    b.HasIndex("SupplierSubContractDetailId");

                    b.ToTable("SupplierContractAmounts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractAmountType", b =>
                {
                    b.Property<int>("SupplierContractAmountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractAmountTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractAmountTypeId");

                    b.ToTable("SupplierContractAmountTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractDetail", b =>
                {
                    b.Property<int>("SupplierContractDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractDetailId"));

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<string>("GlCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GlSubCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<float?>("RangeEndAmount")
                        .HasColumnType("float");

                    b.Property<float?>("RangeStartAmount")
                        .HasColumnType("float");

                    b.Property<string>("Reference1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SupplierContractDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierContractId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractDetailId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SupplierContractDetailTypeId");

                    b.HasIndex("SupplierContractId");

                    b.ToTable("SupplierContractDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractDetailType", b =>
                {
                    b.Property<int>("SupplierContractDetailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractDetailTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractDetailTypeId");

                    b.ToTable("SupplierContractDetailTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractGroup", b =>
                {
                    b.Property<int>("SupplierContractGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractGroupId");

                    b.ToTable("SupplierContractGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractSplit", b =>
                {
                    b.Property<int>("SupplierContractSplitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractSplitId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractSplitId");

                    b.ToTable("SupplierContractSplits");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractSubGroup", b =>
                {
                    b.Property<int>("SupplierContractSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractSubGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SupplierContractGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractSubGroupId");

                    b.HasIndex("SupplierContractGroupId");

                    b.ToTable("SupplierContractSubGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractType", b =>
                {
                    b.Property<int>("SupplierContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierContractTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierContractTypeId");

                    b.ToTable("SupplierContractTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_SupplierGroups", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierPeriod", b =>
                {
                    b.Property<int>("SupplierPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierYearId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierPeriodId");

                    b.HasIndex("SupplierYearId");

                    b.ToTable("SupplierPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("opt_SupplierRegions", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSalesLead", b =>
                {
                    b.Property<int>("SupplierSalesLeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSalesLeadId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("KnownAs")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSalesLeadId");

                    b.ToTable("SupplierSalesLeads");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSetting", b =>
                {
                    b.Property<int>("SupplierSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSettingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("SupplierSettingId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SettingId", "SupplierId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SupplierSettings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContract", b =>
                {
                    b.Property<int>("SupplierSubContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSubContractId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("GlMainCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GlSubCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("Reference1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SupplierContractId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierSubContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSubContractId");

                    b.HasIndex("SupplierContractId");

                    b.HasIndex("SupplierSubContractTypeId");

                    b.ToTable("SupplierSubContracts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContractDetail", b =>
                {
                    b.Property<int>("SupplierSubContractDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSubContractDetailId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Detail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SupplierSubContractDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierSubContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSubContractDetailId");

                    b.HasIndex("SupplierSubContractDetailTypeId");

                    b.HasIndex("SupplierSubContractTypeId");

                    b.ToTable("SupplierSubContractDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContractDetailType", b =>
                {
                    b.Property<int>("SupplierSubContractDetailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSubContractDetailTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSubContractDetailTypeId");

                    b.ToTable("SupplierSubContractDetailTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContractType", b =>
                {
                    b.Property<int>("SupplierSubContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSubContractTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSubContractTypeId");

                    b.ToTable("SupplierSubContractTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubRegion", b =>
                {
                    b.Property<int>("SupplierSubRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierSubRegionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SupplierRegionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierSubRegionId");

                    b.HasIndex("SupplierRegionId");

                    b.ToTable("SupplierSubRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_SupplierTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierYear", b =>
                {
                    b.Property<int>("SupplierYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SupplierYearId");

                    b.ToTable("SupplierYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageMasterProductId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmployeeTargeting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.HasKey("SurveyId");

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("EngageMasterProductId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("Surveys");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyAnswerId"));

                    b.Property<string>("Answer")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("QuestionFalseReasonId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("QuestionFalseReasonId");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("SurveyInstanceId", "SurveyQuestionId")
                        .IsUnique();

                    b.ToTable("SurveyAnswers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswerOption", b =>
                {
                    b.Property<int>("SurveyAnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyAnswerOptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionOptionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyAnswerOptionId");

                    b.HasIndex("SurveyQuestionOptionId");

                    b.HasIndex("SurveyAnswerId", "SurveyAnswerOptionId")
                        .IsUnique();

                    b.ToTable("SurveyAnswerOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswerPhoto", b =>
                {
                    b.Property<int>("SurveyAnswerPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyAnswerPhotoId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyAnswerPhotoId");

                    b.HasIndex("SurveyAnswerId");

                    b.ToTable("SurveyAnswerPhotos");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyForm", b =>
                {
                    b.Property<int>("SurveyFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EngageBrandId")
                        .HasColumnType("int");

                    b.Property<int?>("EngageSubgroupId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IgnoreSubgroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmployeeSurvey")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStoreRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Links")
                        .HasColumnType("json");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Rules")
                        .HasColumnType("json");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SurveyFormId");

                    b.HasIndex("EngageBrandId");

                    b.HasIndex("EngageSubgroupId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SurveyFormTypeId");

                    b.ToTable("SurveyForms");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswer", b =>
                {
                    b.Property<int>("SurveyFormAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormAnswerId"));

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerUuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasColumnType("json");

                    b.Property<int?>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyFormReasonId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormSubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormAnswerId");

                    b.HasIndex("SurveyFormId");

                    b.HasIndex("SurveyFormQuestionId");

                    b.HasIndex("SurveyFormReasonId");

                    b.HasIndex("SurveyFormSubmissionId");

                    b.ToTable("SurveyFormAnswers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerHistory", b =>
                {
                    b.Property<int>("SurveyFormAnswerHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormAnswerHistoryId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyFormReasonId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormAnswerHistoryId");

                    b.HasIndex("SurveyFormAnswerId");

                    b.HasIndex("SurveyFormReasonId");

                    b.ToTable("SurveyFormAnswerHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerOption", b =>
                {
                    b.Property<int>("SurveyFormAnswerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormAnswerOptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormOptionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormAnswerOptionId");

                    b.HasIndex("SurveyFormAnswerId");

                    b.HasIndex("SurveyFormOptionId");

                    b.ToTable("SurveyFormAnswerOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerOptionHistory", b =>
                {
                    b.Property<int>("SurveyFormAnswerOptionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormAnswerOptionHistoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormAnswerHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyFormOptionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormAnswerOptionHistoryId");

                    b.HasIndex("SurveyFormAnswerHistoryId");

                    b.HasIndex("SurveyFormOptionId");

                    b.ToTable("SurveyFormAnswerOptionHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormOption", b =>
                {
                    b.Property<int>("SurveyFormOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormOptionId"));

                    b.Property<bool>("CompleteSurvey")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormOptionId");

                    b.ToTable("SurveyFormOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormProduct", b =>
                {
                    b.Property<int>("SurveyFormProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageMasterProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormProductId");

                    b.HasIndex("EngageMasterProductId");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("SurveyFormProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestion", b =>
                {
                    b.Property<int>("SurveyFormQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool>("IsReasonRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Links")
                        .HasColumnType("json");

                    b.Property<DateTime?>("MaxDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metadata")
                        .HasColumnType("json");

                    b.Property<DateTime?>("MinDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rules")
                        .HasColumnType("json");

                    b.Property<int>("SurveyFormQuestionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormQuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionId");

                    b.HasIndex("SurveyFormQuestionGroupId");

                    b.HasIndex("SurveyFormQuestionTypeId");

                    b.ToTable("SurveyFormQuestions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionGroup", b =>
                {
                    b.Property<int>("SurveyFormQuestionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionGroupId"));

                    b.Property<float?>("CategoryTargetValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVirtualGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Links")
                        .HasColumnType("json");

                    b.Property<string>("Metadata")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rules")
                        .HasColumnType("json");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionGroupId");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("SurveyFormQuestionGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionGroupProduct", b =>
                {
                    b.Property<int>("SurveyFormQuestionGroupProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionGroupProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormQuestionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionGroupProductId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("SurveyFormQuestionGroupId");

                    b.ToTable("SurveyFormQuestionGroupProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionOption", b =>
                {
                    b.Property<int>("SurveyFormQuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionOptionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormOptionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionOptionId");

                    b.HasIndex("SurveyFormOptionId");

                    b.HasIndex("SurveyFormQuestionId");

                    b.ToTable("SurveyFormQuestionOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionProduct", b =>
                {
                    b.Property<int>("SurveyFormQuestionProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionProductId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionProductId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("SurveyFormQuestionId");

                    b.ToTable("SurveyFormQuestionProducts");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionReason", b =>
                {
                    b.Property<int>("SurveyFormQuestionReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionReasonId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormReasonId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionReasonId");

                    b.HasIndex("SurveyFormQuestionId");

                    b.HasIndex("SurveyFormReasonId");

                    b.ToTable("SurveyFormQuestionReasons");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionType", b =>
                {
                    b.Property<int>("SurveyFormQuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormQuestionTypeId");

                    b.ToTable("SurveyFormQuestionTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionValueComparisonOperation", b =>
                {
                    b.Property<int>("SurveyFormQuestionValueComparisonOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionValueComparisonOperationId"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SurveyFormQuestionValueComparisonOperationId");

                    b.ToTable("SurveyFormQuestionValueComparisonOperations");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionValueComparisonTargetType", b =>
                {
                    b.Property<int>("SurveyFormQuestionValueComparisonTargetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormQuestionValueComparisonTargetTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SurveyFormQuestionValueComparisonTargetTypeId");

                    b.ToTable("SurveyFormQuestionValueComparisonTargetTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormReason", b =>
                {
                    b.Property<int>("SurveyFormReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormReasonId"));

                    b.Property<bool>("CompleteSurvey")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormReasonId");

                    b.ToTable("SurveyFormReasons");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormSubmission", b =>
                {
                    b.Property<int>("SurveyFormSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormSubmissionId"));

                    b.Property<DateTime?>("AbandonedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionUuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SurveyFormSubmissionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyFormId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyFormSubmissions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormTarget", b =>
                {
                    b.Property<int>("SurveyFormTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormTargetId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyFormTargetId");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("SurveyFormTargets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SurveyFormTarget");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormType", b =>
                {
                    b.Property<int>("SurveyFormTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyFormTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideAddQuestion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideAddQuestionGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideDeleteQuestion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideDisableGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideDisableQuestion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideEmployeeTargeting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideEndDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideEngageSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideGroupRules")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideQuestionRules")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideReorderGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideReorderQuestion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideStoreRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideStoreTargeting")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideSurveyRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SurveyFormTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("UseTemplate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SurveyFormTypeId");

                    b.ToTable("SurveyFormTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyInstance", b =>
                {
                    b.Property<int>("SurveyInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyInstanceId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("date");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyInstanceId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("EmployeeId", "StoreId", "SurveyId", "SurveyDate")
                        .IsUnique();

                    b.ToTable("SurveyInstances");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Property<int>("SurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyQuestionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("EngageVariantProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFalseOptionRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreConceptAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreConceptId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex("EngageVariantProductId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("StoreConceptAttributeId");

                    b.HasIndex("StoreConceptId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestionOption", b =>
                {
                    b.Property<int>("SurveyQuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyQuestionOptionId"));

                    b.Property<bool>("CompleteSurvey")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyQuestionOptionId");

                    b.HasIndex("SurveyQuestionId", "DisplayOrder")
                        .IsUnique();

                    b.ToTable("SurveyQuestionOptions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestionRule", b =>
                {
                    b.Property<int>("SurveyQuestionRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyQuestionRuleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Operation")
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("RuleIndex")
                        .HasColumnType("int");

                    b.Property<string>("RuleText")
                        .HasColumnType("longtext");

                    b.Property<int>("RuleType")
                        .HasColumnType("int");

                    b.Property<int>("TargetQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("SurveyQuestionRuleId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TargetQuestionId");

                    b.ToTable("SurveyQuestionRules");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyTarget", b =>
                {
                    b.Property<int>("SurveyTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyTargetId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("SurveyTargetId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyTargets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SurveyTarget");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_SurveyTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TargetStrategy", b =>
                {
                    b.Property<int>("TargetStrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TargetStrategyId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TargetStrategyId");

                    b.ToTable("TargetStrategies");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Targeting", b =>
                {
                    b.Property<int>("TargetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TargetingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Criteria")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TargetingId");

                    b.ToTable("Targetings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TenantSetting", b =>
                {
                    b.Property<int>("TenantSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TenantSettingId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TenantSettingId");

                    b.HasIndex("SettingId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("TenantSettings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_Titles", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<decimal>("AccommodationCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AdditionalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CarHireCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CateringCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DirectCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<decimal>("FlightsCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("FuelCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsInternalTraining")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("NoOfParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("OtherCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Site")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("StationeryCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(65,30)")
                        .HasComputedColumnSql("DirectCost + AdditionalCost + AccommodationCost + CarHireCost + CateringCost + FlightsCost + FuelCost + StationeryCost + VenueCost + OtherCost");

                    b.Property<int?>("TrainingCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingProviderId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("VenueCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0m);

                    b.HasKey("TrainingId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("TrainingCategoryId");

                    b.HasIndex("TrainingDurationId");

                    b.HasIndex("TrainingPeriodId");

                    b.HasIndex("TrainingProviderId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("Trainings");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingCategory", b =>
                {
                    b.Property<int>("TrainingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingCategoryId");

                    b.ToTable("TrainingCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingDuration", b =>
                {
                    b.Property<int>("TrainingDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingDurationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingDurationId");

                    b.ToTable("TrainingDurations");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingFile", b =>
                {
                    b.Property<int>("TrainingFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("TrainingFileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("TrainingFileId");

                    b.HasIndex("TrainingFileTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingFileType", b =>
                {
                    b.Property<int>("TrainingFileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingFileTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingFileTypeId");

                    b.ToTable("TrainingFileTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingPeriod", b =>
                {
                    b.Property<int>("TrainingPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("TrainingYearId")
                        .HasColumnType("int");

                    b.HasKey("TrainingPeriodId");

                    b.HasIndex("TrainingYearId");

                    b.ToTable("TrainingPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingProvider", b =>
                {
                    b.Property<int>("TrainingProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingProviderId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingProviderId");

                    b.ToTable("TrainingProviders");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingType", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingTypeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingTypeId");

                    b.ToTable("TrainingTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingYear", b =>
                {
                    b.Property<int>("TrainingYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TrainingYearId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TrainingYearId");

                    b.ToTable("TrainingYears");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UniformSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_UniformSizes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_UnitTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("longtext")
                        .HasComputedColumnSql("concat(FirstName,' ',LastName)");

                    b.Property<bool>("IgnoreOrderProductFilters")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .HasColumnType("json");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Users");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserCommunicationType", b =>
                {
                    b.Property<int>("UserCommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserCommunicationTypeId"));

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCommunicationTypeId");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommunicationTypes");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEngageSubGroup", b =>
                {
                    b.Property<int>("UserEngageSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserEngageSubGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEngageSubGroupId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEngageSubGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserEntityId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deny")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEntityId");

                    b.HasIndex("Entity")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserEntities");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEntityRecord", b =>
                {
                    b.Property<int>("UserEntityRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserEntityRecordId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("UserEntityRecordId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserEntityRecords");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("VendorId")
                        .HasColumnType("longtext");

                    b.HasKey("UserGroupId");

                    b.HasIndex("EngageRegionId");

                    b.ToTable("UserGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserOrganization", b =>
                {
                    b.Property<int>("UserOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserOrganizationId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserOrganizationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("UserOrganizations");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserOrganizationRole", b =>
                {
                    b.Property<int>("UserOrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserOrganizationRoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserOrganizationRoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserOrganizationId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserOrganizationRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserPermissionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("UserPermissionId");

                    b.ToTable("UserPermissions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserRegion", b =>
                {
                    b.Property<int>("UserRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserRegionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRegionId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRegions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserRolePermission", b =>
                {
                    b.Property<int>("UserRolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserRolePermissionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserPermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserRolePermissionId");

                    b.HasIndex("UserPermissionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermissions");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserStore", b =>
                {
                    b.Property<int>("UserStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserStoreId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserStoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStores");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VacancyId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("VacancyId");

                    b.ToTable("Vacancies");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Vat", b =>
                {
                    b.Property<int>("VatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VatId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("VatId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Vat");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VatPeriod", b =>
                {
                    b.Property<int>("VatPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VatPeriodId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("VatId")
                        .HasColumnType("int");

                    b.HasKey("VatPeriodId");

                    b.HasIndex("VatId");

                    b.ToTable("VatPeriods");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VehicleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_VehicleBrands", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_VehicleTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DistributionCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("VendorId");

                    b.HasIndex("DistributionCenterId");

                    b.HasIndex("Name");

                    b.HasIndex("SupplierId");

                    b.ToTable("Vendors");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.StatsByEngageRegionView", b =>
                {
                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<string>("EngageRegionName")
                        .HasColumnType("longtext");

                    b.Property<int>("OverdueUnsubmittedOrdersCount")
                        .HasColumnType("int");

                    b.Property<int>("StoresCount")
                        .HasColumnType("int");

                    b.Property<int>("SubmittedOrdersCount")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("UnsubmittedOrdersCount")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_statsbyengageregion", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerRegionView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeeperregion", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerRegionView2", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeeperregion2", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreFormatView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeeperstoreformat", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeeperstore", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreView_", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeeperstore_", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeStoreView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeestore", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerRegionView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeesubgroupperregion", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerStoreFormatView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeesubgroupperstoreformat", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerStoreView", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EngageSubGroupId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable((string)null);

                    b.ToView("vw_surveysbyemployeesubgroupperstore", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<string>("ClosedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("VoucherStatusId")
                        .HasColumnType("int");

                    b.HasKey("VoucherId");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VoucherStatusId");

                    b.ToTable("Vouchers");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VoucherDetail", b =>
                {
                    b.Property<int>("VoucherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VoucherDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("ClosedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("StoreContactId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("VoucherDetailStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VoucherDetailId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreContactId");

                    b.HasIndex("StoreId");

                    b.HasIndex("VoucherDetailStatusId");

                    b.HasIndex("VoucherId", "VoucherNumber")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("VoucherDetails");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VoucherDetailStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_VoucherDetailStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VoucherStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_VoucherStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.VoucherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_VoucherTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("DCId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("DCId");

                    b.ToTable("Warehouses");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WarehouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_WarehouseTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebEvent", b =>
                {
                    b.Property<int>("WebEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebEventId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("WebEventTypeId")
                        .HasColumnType("int");

                    b.HasKey("WebEventId");

                    b.HasIndex("WebEventTypeId");

                    b.ToTable("WebEvents");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_WebEventTypes", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFile", b =>
                {
                    b.Property<int>("WebFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebFileId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Files")
                        .HasColumnType("json");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("NPrintingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TargetStrategyId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WebFileCategoryId")
                        .HasColumnType("int");

                    b.HasKey("WebFileId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("NPrintingId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TargetStrategyId");

                    b.HasIndex("WebFileCategoryId");

                    b.ToTable("WebFiles");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileCategory", b =>
                {
                    b.Property<int>("WebFileCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebFileCategoryId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WebFileGroupId")
                        .HasColumnType("int");

                    b.HasKey("WebFileCategoryId");

                    b.HasIndex("WebFileGroupId");

                    b.ToTable("WebFileCategories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileGroup", b =>
                {
                    b.Property<int>("WebFileGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebFileGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("WebFileGroupId");

                    b.ToTable("WebFileGroups");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileTarget", b =>
                {
                    b.Property<int>("WebFileTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebFileTargetId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("WebFileId")
                        .HasColumnType("int");

                    b.HasKey("WebFileTargetId");

                    b.HasIndex("WebFileId");

                    b.ToTable("WebFileTargets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WebFileTarget");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebPage", b =>
                {
                    b.Property<int>("WebPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebPageId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("WebPageId");

                    b.ToTable("WebPages");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebPageEmployee", b =>
                {
                    b.Property<int>("WebPageEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WebPageEmployeeId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WebPageId")
                        .HasColumnType("int");

                    b.HasKey("WebPageEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebPageId");

                    b.ToTable("WebPageEmployees");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WhatsAppHistory", b =>
                {
                    b.Property<int>("WhatsAppHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WhatsAppHistoryId"));

                    b.Property<string>("AttachmentUrls")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ContentVariables")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Error")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ExternalTemplateId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FromMobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FromName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ToMobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("WhatsAppHistoryId");

                    b.ToTable("WhatsAppHistories");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.WorkRoleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("opt_WorkRoleStatuses", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Property<int>("AuditEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AuditEntryID"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(6);

                    b.Property<string>("EntitySetName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("StateName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(4);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("AuditEntryID");

                    b.ToTable("AuditEntries");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.Property<int>("AuditEntryPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AuditEntryPropertyID"));

                    b.Property<int>("AuditEntryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("NewValueFormatted")
                        .HasColumnType("longtext")
                        .HasColumnName("NewValue")
                        .HasColumnOrder(5);

                    b.Property<string>("OldValueFormatted")
                        .HasColumnType("longtext")
                        .HasColumnName("OldValue")
                        .HasColumnOrder(4);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(3);

                    b.Property<string>("RelationName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("AuditEntryPropertyID");

                    b.HasIndex("AuditEntryID");

                    b.ToTable("AuditEntryProperties");

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileCategoryGroup", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("int");

                    b.HasIndex("CategoryGroupId");

                    b.HasDiscriminator().HasValue("CategoryFileCategoryGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("CategoryFileEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEmployeeJobTitle", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasDiscriminator().HasValue("CategoryFileEmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasDiscriminator().HasValue("CategoryFileEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEngageSubGroup", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("EngageSubGroupId")
                        .HasColumnType("int");

                    b.HasIndex("EngageSubGroupId");

                    b.HasDiscriminator().HasValue("CategoryFileEngageSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("CategoryFileStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileStoreFormat", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CategoryFileTarget");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.HasIndex("StoreFormatId");

                    b.HasDiscriminator().HasValue("CategoryFileStoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryClaim", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasIndex("ClaimId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryClaim");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryClaimFloat", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("ClaimFloatId")
                        .HasColumnType("int");

                    b.HasIndex("ClaimFloatId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryClaimFloat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryEmployeeStoreCalendar", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("EmployeeStoreCalendarId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeStoreCalendarId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryEmployeeStoreCalendar");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryOrder", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryOrder");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryProject", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasIndex("ProjectId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryProject");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.CommunicationHistory");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("CommunicationHistoryStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBlob", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.EntityBlob");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasIndex("ClaimId");

                    b.HasDiscriminator().HasValue("ClaimBlob");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageRegionContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.EntityContact");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasDiscriminator().HasValue("EngageRegionContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.EntityContact");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("StoreContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.EntityContact");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("SupplierContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.NotificationTarget");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NotificationId", "EmployeeId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NotificationEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEmployeeJobTitle", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.NotificationTarget");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasIndex("NotificationId", "EmployeeJobTitleId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NotificationEmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.NotificationTarget");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("NotificationId", "EngageRegionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NotificationEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.NotificationTarget");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasIndex("NotificationId", "StoreId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NotificationStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationStoreFormat", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.NotificationTarget");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.HasIndex("StoreFormatId");

                    b.HasIndex("NotificationId", "StoreFormatId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("NotificationStoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.Project");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("ProjectStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagClaim", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasIndex("ClaimId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagClaim");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagDCProduct", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("DCProductId")
                        .HasColumnType("int");

                    b.HasIndex("DCProductId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagDCProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagEmployeeJobTitle", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagEmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagOrder", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagOrder");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagStoreAsset", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("StoreAssetId")
                        .HasColumnType("int");

                    b.HasIndex("StoreAssetId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagStoreAsset");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagSupplier", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagSupplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagUser", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectProjectTag");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ProjectProjectTagUser");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderEmployeeRegionContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectStakeholder");

                    b.Property<int>("EmployeeRegionContactId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeRegionContactId");

                    b.HasDiscriminator().HasValue("ProjectStakeholderEmployeeRegionContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderExternalUser", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectStakeholder");

                    b.Property<int>("ProjectExternalUserId")
                        .HasColumnType("int");

                    b.HasIndex("ProjectExternalUserId");

                    b.HasDiscriminator().HasValue("ProjectStakeholderExternalUser");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderStoreContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectStakeholder");

                    b.Property<int>("StoreContactId")
                        .HasColumnType("int");

                    b.HasIndex("StoreContactId");

                    b.HasDiscriminator().HasValue("ProjectStakeholderStoreContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderSupplierContact", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectStakeholder");

                    b.Property<int>("SupplierContactId")
                        .HasColumnType("int");

                    b.HasIndex("SupplierContactId");

                    b.HasDiscriminator().HasValue("ProjectStakeholderSupplierContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderUser", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.ProjectStakeholder");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ProjectStakeholderUser");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("SurveyFormEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeDivision", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("EmployeeDivisionId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeDivisionId");

                    b.HasDiscriminator().HasValue("SurveyFormEmployeeDivision");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("EmployeeEngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeEngageRegionId");

                    b.HasDiscriminator().HasValue("SurveyFormEmployeeEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeJobTitle", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasDiscriminator().HasValue("SurveyFormEmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEngageDepartment", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.HasIndex("EngageDepartmentId");

                    b.HasDiscriminator().HasValue("SurveyFormEngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormExcludedEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("ExcludedEmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("ExcludedEmployeeId");

                    b.HasDiscriminator().HasValue("SurveyFormExcludedEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormExcludedStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("ExcludedStoreId")
                        .HasColumnType("int");

                    b.HasIndex("ExcludedStoreId");

                    b.HasDiscriminator().HasValue("SurveyFormExcludedStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("SurveyFormStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreCluster", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreClusterId")
                        .HasColumnType("int");

                    b.HasIndex("StoreClusterId");

                    b.HasDiscriminator().HasValue("SurveyFormStoreCluster");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreEngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("StoreEngageRegionId");

                    b.HasDiscriminator().HasValue("SurveyFormStoreEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreFormat", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.HasIndex("StoreFormatId");

                    b.HasDiscriminator().HasValue("SurveyFormStoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreLSM", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreLSMId")
                        .HasColumnType("int");

                    b.HasIndex("StoreLSMId");

                    b.HasDiscriminator().HasValue("SurveyFormStoreLSM");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreType", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyFormTarget");

                    b.Property<int>("StoreTypeId")
                        .HasColumnType("int");

                    b.HasIndex("StoreTypeId");

                    b.HasDiscriminator().HasValue("SurveyFormStoreType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEmployeeJobTitleTarget", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyTarget");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasIndex("SurveyId", "EmployeeJobTitleId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SurveyEmployeeJobTitleTarget");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEmployeeTarget", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyTarget");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SurveyId", "EmployeeId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SurveyEmployeeTarget");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEngageRegionTarget", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyTarget");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("SurveyId", "EngageRegionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SurveyEngageRegionTarget");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyStoreFormatTarget", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyTarget");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.HasIndex("StoreFormatId");

                    b.HasIndex("SurveyId", "StoreFormatId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SurveyStoreFormatTarget");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyStoreTarget", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.SurveyTarget");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasIndex("SurveyId", "StoreId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SurveyStoreTarget");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployee", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WebFileId", "EmployeeId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployeeDivision", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("EmployeeDivisionId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeDivisionId");

                    b.HasIndex("WebFileId", "EmployeeDivisionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileEmployeeDivision");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployeeJobTitle", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("EmployeeJobTitleId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeJobTitleId");

                    b.HasIndex("WebFileId", "EmployeeJobTitleId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileEmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEngageDepartment", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("EngageDepartmentId")
                        .HasColumnType("int");

                    b.HasIndex("EngageDepartmentId");

                    b.HasIndex("WebFileId", "EngageDepartmentId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileEngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEngageRegion", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("EngageRegionId")
                        .HasColumnType("int");

                    b.HasIndex("EngageRegionId");

                    b.HasIndex("WebFileId", "EngageRegionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileStore", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasIndex("WebFileId", "StoreId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileStoreFormat", b =>
                {
                    b.HasBaseType("Engage.Domain.Entities.WebFileTarget");

                    b.Property<int>("StoreFormatId")
                        .HasColumnType("int");

                    b.HasIndex("StoreFormatId");

                    b.HasIndex("WebFileId", "StoreFormatId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("WebFileStoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.AnalysisPillarSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.AnalysisPillarGroup", "AnalysisPillarGroup")
                        .WithMany()
                        .HasForeignKey("AnalysisPillarGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisPillarGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Budget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BudgetPeriod", "BudgetPeriod")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetPeriodId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BudgetType", "BudgetType")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetTypeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BudgetVersion", "BudgetVersion")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetVersionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BudgetYear", "BudgetYear")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetYearId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.GLAccount", "GLAccount")
                        .WithMany("Budgets")
                        .HasForeignKey("GLAccountId")
                        .IsRequired();

                    b.Navigation("BudgetPeriod");

                    b.Navigation("BudgetType");

                    b.Navigation("BudgetVersion");

                    b.Navigation("BudgetYear");

                    b.Navigation("GLAccount");
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BudgetYear", "BudgetYear")
                        .WithMany("BudgetPeriods")
                        .HasForeignKey("BudgetYearId")
                        .IsRequired();

                    b.Navigation("BudgetYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryFileType", "CategoryFileType")
                        .WithMany()
                        .HasForeignKey("CategoryFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany()
                        .HasForeignKey("CategoryGroupId");

                    b.HasOne("Engage.Domain.Entities.CategorySubGroup", "CategorySubGroup")
                        .WithMany()
                        .HasForeignKey("CategorySubGroupId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("CategoryFileType");

                    b.Navigation("CategoryGroup");

                    b.Navigation("CategorySubGroup");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryFile", "CategoryFile")
                        .WithMany()
                        .HasForeignKey("CategoryFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryFile");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryStoreGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany()
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreCategoryGroups")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryGroup");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryTargetType", "CategoryTargetType")
                        .WithMany()
                        .HasForeignKey("CategoryTargetTypeId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryTargetType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetAnswer", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryTarget", "CategoryTarget")
                        .WithMany()
                        .HasForeignKey("CategoryTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryTargetStore", "CategoryTargetStore")
                        .WithMany()
                        .HasForeignKey("CategoryTargetStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryTargetType", "CategoryTargetType")
                        .WithMany()
                        .HasForeignKey("CategoryTargetTypeId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("CategoryTarget");

                    b.Navigation("CategoryTargetStore");

                    b.Navigation("CategoryTargetType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetAnswerHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryTargetAnswer", "CategoryTargetAnswer")
                        .WithMany()
                        .HasForeignKey("CategoryTargetAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryTarget", "CategoryTarget")
                        .WithMany()
                        .HasForeignKey("CategoryTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryTargetStore", "CategoryTargetStore")
                        .WithMany()
                        .HasForeignKey("CategoryTargetStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CategoryTargetType", "CategoryTargetType")
                        .WithMany()
                        .HasForeignKey("CategoryTargetTypeId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("CategoryTarget");

                    b.Navigation("CategoryTargetAnswer");

                    b.Navigation("CategoryTargetStore");

                    b.Navigation("CategoryTargetType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryTargetStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryTarget", "CategoryTarget")
                        .WithMany()
                        .HasForeignKey("CategoryTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryTarget");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Claim", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "ClaimAccountManager")
                        .WithMany()
                        .HasForeignKey("ClaimAccountManagerId");

                    b.HasOne("Engage.Domain.Entities.ClaimClassification", "ClaimClassification")
                        .WithMany()
                        .HasForeignKey("ClaimClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimFloat", "ClaimFloat")
                        .WithMany()
                        .HasForeignKey("ClaimFloatId");

                    b.HasOne("Engage.Domain.Entities.User", "ClaimManager")
                        .WithMany()
                        .HasForeignKey("ClaimManagerId");

                    b.HasOne("Engage.Domain.Entities.ClaimPeriod", "ClaimPeriod")
                        .WithMany()
                        .HasForeignKey("ClaimPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimSupplierStatus", "ClaimSupplierStatus")
                        .WithMany()
                        .HasForeignKey("ClaimSupplierStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany()
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeDivision", "EmployeeDivision")
                        .WithMany()
                        .HasForeignKey("EmployeeDivisionId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimAccountManager");

                    b.Navigation("ClaimClassification");

                    b.Navigation("ClaimFloat");

                    b.Navigation("ClaimManager");

                    b.Navigation("ClaimPeriod");

                    b.Navigation("ClaimStatus");

                    b.Navigation("ClaimSupplierStatus");

                    b.Navigation("ClaimType");

                    b.Navigation("ClientType");

                    b.Navigation("DistributionCenter");

                    b.Navigation("EmployeeDivision");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBatch", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimClassification", "ClaimClassification")
                        .WithMany()
                        .HasForeignKey("ClaimClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId");

                    b.HasOne("Engage.Domain.Entities.ClaimSupplierStatus", "ClaimSupplierStatus")
                        .WithMany()
                        .HasForeignKey("ClaimSupplierStatusId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimClassification");

                    b.Navigation("ClaimStatus");

                    b.Navigation("ClaimSupplierStatus");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBatchDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimBatch", "ClaimBatch")
                        .WithMany()
                        .HasForeignKey("ClaimBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("ClaimBatch");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimClassification", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("ClaimType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimFloat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimType");

                    b.Navigation("EngageRegion");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimFloatTopUpHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimFloat", "ClaimFloat")
                        .WithMany("ClaimFloatTopUpHistory")
                        .HasForeignKey("ClaimFloatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimFloat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimHistoryHeader", "ClaimHistoryHeader")
                        .WithMany()
                        .HasForeignKey("ClaimHistoryHeaderId");

                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany("ClaimHistory")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimPendingReason", "ClaimPendingReason")
                        .WithMany()
                        .HasForeignKey("ClaimPendingReasonId");

                    b.HasOne("Engage.Domain.Entities.ClaimRejectedReason", "ClaimRejectedReason")
                        .WithMany()
                        .HasForeignKey("ClaimRejectedReasonId");

                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimSupplierStatus", "ClaimSupplierStatus")
                        .WithMany()
                        .HasForeignKey("ClaimSupplierStatusId");

                    b.Navigation("Claim");

                    b.Navigation("ClaimHistoryHeader");

                    b.Navigation("ClaimPendingReason");

                    b.Navigation("ClaimRejectedReason");

                    b.Navigation("ClaimStatus");

                    b.Navigation("ClaimSupplierStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimHistoryHeader", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimClassification", "ClaimClassification")
                        .WithMany()
                        .HasForeignKey("ClaimClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId");

                    b.HasOne("Engage.Domain.Entities.ClaimSupplierStatus", "ClaimSupplierStatus")
                        .WithMany()
                        .HasForeignKey("ClaimSupplierStatusId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimClassification");

                    b.Navigation("ClaimStatus");

                    b.Navigation("ClaimSupplierStatus");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimNotificationUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimStatus");

                    b.Navigation("EngageRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimYear", "ClaimYear")
                        .WithMany("ClaimPeriods")
                        .HasForeignKey("ClaimYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimSku", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany("ClaimSkus")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimQuantityType", "ClaimQuantityType")
                        .WithMany()
                        .HasForeignKey("ClaimQuantityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimSkuStatus", "ClaimSkuStatus")
                        .WithMany()
                        .HasForeignKey("ClaimSkuStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimSkuType", "ClaimSkuType")
                        .WithMany()
                        .HasForeignKey("ClaimSkuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("ClaimQuantityType");

                    b.Navigation("ClaimSkuStatus");

                    b.Navigation("ClaimSkuType");

                    b.Navigation("DCProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimStatusUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimStatus", "ClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CommunicationTemplate", "CommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("CommunicationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationTemplate");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationTemplate", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CommunicationTemplateType", "CommunicationTemplateType")
                        .WithMany()
                        .HasForeignKey("CommunicationTemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationTemplateType");

                    b.Navigation("CommunicationType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ContactItem", "PrimaryEmailContactItem")
                        .WithMany("PrimaryEmailContactItems")
                        .HasForeignKey("PrimaryEmailContactItemId");

                    b.HasOne("Engage.Domain.Entities.ContactItem", "PrimaryMobileContactItem")
                        .WithMany("PrimaryMobileContactItems")
                        .HasForeignKey("PrimaryMobileContactItemId");

                    b.HasOne("Engage.Domain.Entities.Stakeholder", "Stakeholder")
                        .WithMany("Contacts")
                        .HasForeignKey("StakeholderId")
                        .IsRequired();

                    b.Navigation("PrimaryEmailContactItem");

                    b.Navigation("PrimaryMobileContactItem");

                    b.Navigation("Stakeholder");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactEvent", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactEvents")
                        .HasForeignKey("ContactId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FrequencyType", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("EventType");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactItem", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactItems")
                        .HasForeignKey("ContactId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenter", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostType", "CostType")
                        .WithMany()
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenterDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany("CostCenterDepartments")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CostDepartment", "CostDepartment")
                        .WithMany()
                        .HasForeignKey("CostDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("CostDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenterEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany("CostCenterEmployees")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeCostCenters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostSubDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostDepartment", "CostDepartment")
                        .WithMany("CostSubDepartments")
                        .HasForeignKey("CostDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Creditor", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CreditorStatus", "CreditorStatus")
                        .WithMany()
                        .HasForeignKey("CreditorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditorStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorBankAccount", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BankAccountType", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BankName", "BankName")
                        .WithMany()
                        .HasForeignKey("BankNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountType");

                    b.Navigation("BankName");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CreditorFileType", "CreditorFileType")
                        .WithMany()
                        .HasForeignKey("CreditorFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Creditor", "Creditor")
                        .WithMany()
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creditor");

                    b.Navigation("CreditorFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorNotificationStatusUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CreditorStatus", "CreditorStatus")
                        .WithMany()
                        .HasForeignKey("CreditorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditorStatus");

                    b.Navigation("EngageRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CreditorStatusHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Creditor", "Creditor")
                        .WithMany("CreditorStatusHistories")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.CreditorStatus", "CreditorStatus")
                        .WithMany()
                        .HasForeignKey("CreditorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creditor");

                    b.Navigation("CreditorStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCAccount", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("DCAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany("DCProducts")
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany("DCProducts")
                        .HasForeignKey("EngageVariantProductId");

                    b.HasOne("Engage.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Engage.Domain.Entities.ProductActiveStatus", "ProductActiveStatus")
                        .WithMany()
                        .HasForeignKey("ProductActiveStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.DCProductClass", "ProductClass")
                        .WithMany()
                        .HasForeignKey("ProductClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SubWarehouse", "ProductSubWarehouse")
                        .WithMany("DCProducts")
                        .HasForeignKey("ProductSubWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouseStatus", "ProductWarehouseStatus")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Vendor", "Vendor")
                        .WithMany("DCProducts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("Manufacturer");

                    b.Navigation("ProductActiveStatus");

                    b.Navigation("ProductClass");

                    b.Navigation("ProductStatus");

                    b.Navigation("ProductSubWarehouse");

                    b.Navigation("ProductWarehouseStatus");

                    b.Navigation("UnitType");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCProductClass", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCDepartment", null)
                        .WithMany("DCProductClasses")
                        .HasForeignKey("DCDepartmentId");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCStockOnHand", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplate");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistoryCCEmail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailHistory", "EmailHistory")
                        .WithMany("EmailHistoryCCEmails")
                        .HasForeignKey("EmailHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailHistory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistoryTemplateVariable", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailHistory", "EmailHistory")
                        .WithMany("EmailHistoryTemplateVariables")
                        .HasForeignKey("EmailHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailHistory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailTemplateType", "EmailTemplateType")
                        .WithMany()
                        .HasForeignKey("EmailTemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplateType");

                    b.Navigation("EmailType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplateHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailTemplateVariableClaimNumber", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmailHistoryTemplateVariable", "EmailHistoryTemplateVariable")
                        .WithMany("ClaimNumbers")
                        .HasForeignKey("EmailHistoryTemplateVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailHistoryTemplateVariable");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "CostCenterManager")
                        .WithMany("CostCenterEmployees")
                        .HasForeignKey("CostCenterManagerId");

                    b.HasOne("Engage.Domain.Entities.EmployeeNationality", "EmployeeCitzenship")
                        .WithMany()
                        .HasForeignKey("EmployeeCitzenshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeDefaultPayslip", "EmployeeDefaultPayslip")
                        .WithMany()
                        .HasForeignKey("EmployeeDefaultPayslipId");

                    b.HasOne("Engage.Domain.Entities.EmployeeDisabledType", "EmployeeDisabledType")
                        .WithMany()
                        .HasForeignKey("EmployeeDisabledTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Gender", "EmployeeGender")
                        .WithMany()
                        .HasForeignKey("EmployeeGenderId");

                    b.HasOne("Engage.Domain.Entities.EmployeeIdentificationType", "EmployeeIdentificationType")
                        .WithMany()
                        .HasForeignKey("EmployeeIdentificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeIncentiveTier", "EmployeeIncentiveTier")
                        .WithMany()
                        .HasForeignKey("EmployeeIncentiveTierId");

                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId");

                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitleTime", "EmployeeJobTitleTime")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleTimeId");

                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitleType", "EmployeeJobTitleType")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleTypeId");

                    b.HasOne("Engage.Domain.Entities.EmployeeLanguage", "EmployeeLanguage")
                        .WithMany()
                        .HasForeignKey("EmployeeLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeNationality", "EmployeeNationality")
                        .WithMany()
                        .HasForeignKey("EmployeeNationalityId");

                    b.HasOne("Engage.Domain.Entities.EmployeeNationality", "EmployeePassportNationality")
                        .WithMany()
                        .HasForeignKey("EmployeePassportNationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePersonType", "EmployeePersonType")
                        .WithMany()
                        .HasForeignKey("EmployeePersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Race", "EmployeeRace")
                        .WithMany()
                        .HasForeignKey("EmployeeRaceId");

                    b.HasOne("Engage.Domain.Entities.EmployeeReinstatementReason", "EmployeeReinstatementReason")
                        .WithMany()
                        .HasForeignKey("EmployeeReinstatementReasonId");

                    b.HasOne("Engage.Domain.Entities.EmployeeSDLExemption", "EmployeeSDLExemption")
                        .WithMany()
                        .HasForeignKey("EmployeeSDLExemptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStandardIndustryCode", "EmployeeStandardIndustryCode")
                        .WithMany()
                        .HasForeignKey("EmployeeStandardIndustryCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStandardIndustryGroupCode", "EmployeeStandardIndustryGroupCode")
                        .WithMany()
                        .HasForeignKey("EmployeeStandardIndustryGroupCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeState", "EmployeeState")
                        .WithMany()
                        .HasForeignKey("EmployeeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeTaxStatus", "EmployeeTaxStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeTaxStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeTerminationReason", "EmployeeTerminationReason")
                        .WithMany()
                        .HasForeignKey("EmployeeTerminationReasonId");

                    b.HasOne("Engage.Domain.Entities.Title", "EmployeeTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeTitleId");

                    b.HasOne("Engage.Domain.Entities.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("Engage.Domain.Entities.EmployeeUIFExemption", "EmployeeUIFExemption")
                        .WithMany()
                        .HasForeignKey("EmployeeUIFExemptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmploymentAction", "EmploymentAction")
                        .WithMany()
                        .HasForeignKey("EmploymentActionId");

                    b.HasOne("Engage.Domain.Entities.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubRegion", "EngageSubRegion")
                        .WithMany("Employees")
                        .HasForeignKey("EngageSubRegionId");

                    b.HasOne("Engage.Domain.Entities.Employee", "LeaveManager")
                        .WithMany("LeaveEmployees")
                        .HasForeignKey("LeaveManagerId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId");

                    b.HasOne("Engage.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Engage.Domain.Entities.NextOfKinType", "NextOfKinType")
                        .WithMany()
                        .HasForeignKey("NextOfKinTypeId");

                    b.HasOne("Engage.Domain.Entities.PayrollPeriod", "PayrollPeriod")
                        .WithMany()
                        .HasForeignKey("PayrollPeriodId");

                    b.HasOne("Engage.Domain.Entities.Stakeholder", "Stakeholder")
                        .WithOne("Employee")
                        .HasForeignKey("Engage.Domain.Entities.Employee", "StakeholderId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UniformSize", "UniformSize")
                        .WithMany()
                        .HasForeignKey("UniformSizeId");

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CostCenterManager");

                    b.Navigation("EmployeeCitzenship");

                    b.Navigation("EmployeeDefaultPayslip");

                    b.Navigation("EmployeeDisabledType");

                    b.Navigation("EmployeeGender");

                    b.Navigation("EmployeeIdentificationType");

                    b.Navigation("EmployeeIncentiveTier");

                    b.Navigation("EmployeeJobTitle");

                    b.Navigation("EmployeeJobTitleTime");

                    b.Navigation("EmployeeJobTitleType");

                    b.Navigation("EmployeeLanguage");

                    b.Navigation("EmployeeNationality");

                    b.Navigation("EmployeePassportNationality");

                    b.Navigation("EmployeePersonType");

                    b.Navigation("EmployeeRace");

                    b.Navigation("EmployeeReinstatementReason");

                    b.Navigation("EmployeeSDLExemption");

                    b.Navigation("EmployeeStandardIndustryCode");

                    b.Navigation("EmployeeStandardIndustryGroupCode");

                    b.Navigation("EmployeeState");

                    b.Navigation("EmployeeTaxStatus");

                    b.Navigation("EmployeeTerminationReason");

                    b.Navigation("EmployeeTitle");

                    b.Navigation("EmployeeType");

                    b.Navigation("EmployeeUIFExemption");

                    b.Navigation("EmploymentAction");

                    b.Navigation("EmploymentType");

                    b.Navigation("EngageRegion");

                    b.Navigation("EngageSubRegion");

                    b.Navigation("LeaveManager");

                    b.Navigation("Manager");

                    b.Navigation("MaritalStatus");

                    b.Navigation("NextOfKinType");

                    b.Navigation("PayrollPeriod");

                    b.Navigation("Stakeholder");

                    b.Navigation("UniformSize");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAddress", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeNationality", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeNationality", "PostalCountry")
                        .WithMany()
                        .HasForeignKey("PostalCountryId");

                    b.HasOne("Engage.Domain.Entities.Province", "PostalProvince")
                        .WithMany()
                        .HasForeignKey("PostalProvinceId");

                    b.HasOne("Engage.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Country");

                    b.Navigation("Employee");

                    b.Navigation("PostalCountry");

                    b.Navigation("PostalProvince");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAsset", b =>
                {
                    b.HasOne("Engage.Domain.Entities.AssetStatus", "AssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeAssetBrand", "EmployeeAssetBrand")
                        .WithMany()
                        .HasForeignKey("EmployeeAssetBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeAssetType", "EmployeeAssetType")
                        .WithMany()
                        .HasForeignKey("EmployeeAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetStatus");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeAssetBrand");

                    b.Navigation("EmployeeAssetType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAssetHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeAsset", "EmployeeAsset")
                        .WithMany("EmployeeAssetHistories")
                        .HasForeignKey("EmployeeAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "NewEmployee")
                        .WithMany()
                        .HasForeignKey("NewEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "OldEmployee")
                        .WithMany()
                        .HasForeignKey("OldEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAsset");

                    b.Navigation("NewEmployee");

                    b.Navigation("OldEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBadge", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeBadgeType", "EmployeeBadgeType")
                        .WithMany()
                        .HasForeignKey("EmployeeBadgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeBadgeType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBankDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BankAccountOwner", "BankAccountOwner")
                        .WithMany()
                        .HasForeignKey("BankAccountOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BankAccountType", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BankName", "BankName")
                        .WithMany()
                        .HasForeignKey("BankNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BankPaymentMethod", "BankPaymentMethod")
                        .WithMany()
                        .HasForeignKey("BankPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("BankDetails")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("BankAccountOwner");

                    b.Navigation("BankAccountType");

                    b.Navigation("BankName");

                    b.Navigation("BankPaymentMethod");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBenefit", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BenefitType", "BenefitType")
                        .WithMany()
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("Benefits")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("BenefitType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBox", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeCoolerBoxCondition", "EmployeeCoolerBoxCondition")
                        .WithMany()
                        .HasForeignKey("EmployeeCoolerBoxConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCoolerBoxCondition");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBoxHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeCoolerBox", "EmployeeCoolerBox")
                        .WithMany("EmployeeCoolerBoxHistories")
                        .HasForeignKey("EmployeeCoolerBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "NewEmployee")
                        .WithMany()
                        .HasForeignKey("NewEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "OldEmployee")
                        .WithMany()
                        .HasForeignKey("OldEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeCoolerBox");

                    b.Navigation("NewEmployee");

                    b.Navigation("OldEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDeduction", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DeductionCycleType", "DeductionCycleType")
                        .WithMany()
                        .HasForeignKey("DeductionCycleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.DeductionType", "DeductionType")
                        .WithMany()
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("Deductions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("DeductionCycleType");

                    b.Navigation("DeductionType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDisciplinaryProcedure", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("DisciplinaryProcedures")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeExpenseClaim", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("ExpenseClaims")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ExpenseClaimStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Employee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeFileType", "EmployeeFileType")
                        .WithMany()
                        .HasForeignKey("EmployeeFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeFuel", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeFuelExpenseType", "EmployeeFuelExpenseType")
                        .WithMany()
                        .HasForeignKey("EmployeeFuelExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePaymentType", "EmployeePaymentType")
                        .WithMany()
                        .HasForeignKey("EmployeePaymentTypeId");

                    b.HasOne("Engage.Domain.Entities.EmployeeVehicle", "EmployeeVehicle")
                        .WithMany()
                        .HasForeignKey("EmployeeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeFuelExpenseType");

                    b.Navigation("EmployeePaymentType");

                    b.Navigation("EmployeeVehicle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleTime", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany("EmployeeJobTitleTimes")
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany("EmployeeJobTitleTypes")
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitleUserGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany("EmployeeJobTitleUserGroups")
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("EmployeeJobTitleUserGroups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpi", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeKpiType", "EmployeeKpiType")
                        .WithMany()
                        .HasForeignKey("EmployeeKpiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeKpiType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiScore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeKpiScores")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpi", "EmployeeKpi")
                        .WithMany("EmployeeKpiScores")
                        .HasForeignKey("EmployeeKpiId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpiTier", "EmployeeKpiTier")
                        .WithMany()
                        .HasForeignKey("EmployeeKpiTierId");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeKpi");

                    b.Navigation("EmployeeKpiTier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiTier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeKpi", "EmployeeKpi")
                        .WithMany()
                        .HasForeignKey("EmployeeKpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeKpi");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeLeaveEntry", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("LeaveEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeLoan", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("Loans")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePayRate", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePayRateFrequency", "EmployeePayRateFrequency")
                        .WithMany()
                        .HasForeignKey("EmployeePayRateFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePayRatePackage", "EmployeePayRatePackage")
                        .WithMany()
                        .HasForeignKey("EmployeePayRatePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeePayRateFrequency");

                    b.Navigation("EmployeePayRatePackage");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePension", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePensionCategory", "EmployeePensionCategory")
                        .WithMany()
                        .HasForeignKey("EmployeePensionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePensionContributionPercentage", "EmployeePensionContributionPercentage")
                        .WithMany()
                        .HasForeignKey("EmployeePensionContributionPercentageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeePensionScheme", "EmployeePensionScheme")
                        .WithMany()
                        .HasForeignKey("EmployeePensionSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeePensionCategory");

                    b.Navigation("EmployeePensionContributionPercentage");

                    b.Navigation("EmployeePensionScheme");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeePopiConsent", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeePopiConsents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeQualification", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InstitutionType", "InstitutionType")
                        .WithMany()
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("Employee");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeRecurringTransaction", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CreditorBankAccount", "CreditorBankAccount")
                        .WithMany()
                        .HasForeignKey("CreditorBankAccountId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeRecurringTransactionStatus", "EmployeeRecurringTransactionStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeRecurringTransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeTransactionType", "EmployeeTransactionType")
                        .WithMany()
                        .HasForeignKey("EmployeeTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PayrollPeriod", "PayrollPeriod")
                        .WithMany()
                        .HasForeignKey("PayrollPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditorBankAccount");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeRecurringTransactionStatus");

                    b.Navigation("EmployeeTransactionType");

                    b.Navigation("PayrollPeriod");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeRegionContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("EmployeeRegionContacts")
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeReinstatementHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeReinstatementHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeReinstatementReason", "EmployeeReinstatementReason")
                        .WithMany()
                        .HasForeignKey("EmployeeReinstatementReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeReinstatementReason");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Experience", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SkillCategory", "SkillCategory")
                        .WithMany()
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Experience");

                    b.Navigation("Proficiency");

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSkillsDevelopment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("SkillsDevelopment")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendar", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarGroup", "EmployeeStoreCalendarGroup")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarPeriod", "EmployeeStoreCalendarPeriod")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarStatus", "EmployeeStoreCalendarStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarStatusId");

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarType", "EmployeeStoreCalendarType")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarTypeId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyInstance", "SurveyInstance")
                        .WithMany()
                        .HasForeignKey("SurveyInstanceId");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeStoreCalendarGroup");

                    b.Navigation("EmployeeStoreCalendarPeriod");

                    b.Navigation("EmployeeStoreCalendarStatus");

                    b.Navigation("EmployeeStoreCalendarType");

                    b.Navigation("Store");

                    b.Navigation("SurveyInstance");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarBlockDay", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarPeriod", "EmployeeStoreCalendarPeriod")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarStatus", "EmployeeStoreCalendarStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarType", "EmployeeStoreCalendarType")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeStoreCalendarPeriod");

                    b.Navigation("EmployeeStoreCalendarStatus");

                    b.Navigation("EmployeeStoreCalendarType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendarYear", "EmployeeStoreCalendarYear")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeStoreCalendarYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendarSurveyFormSubmission", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendar", "EmployeeStoreCalendar")
                        .WithMany("SurveyFormSubmissions")
                        .HasForeignKey("EmployeeStoreCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormSubmission", "SurveyFormSubmission")
                        .WithMany()
                        .HasForeignKey("SurveyFormSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeStoreCalendar");

                    b.Navigation("SurveyFormSubmission");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCheckIn", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeStoreCheckIns")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("EmployeeStoreCheckIns")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreKpiScore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeStoreKpiScores")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpi", "EmployeeKpi")
                        .WithMany("EmployeeStoreKpiScores")
                        .HasForeignKey("EmployeeKpiId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpiTier", "EmployeeKpiTier")
                        .WithMany()
                        .HasForeignKey("EmployeeKpiTierId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("EmployeeStoreKpiScores")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeKpi");

                    b.Navigation("EmployeeKpiTier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeSuspension", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeSuspensions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeSuspensionReason", "EmployeeSuspensionReason")
                        .WithMany()
                        .HasForeignKey("EmployeeSuspensionReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeSuspensionReason");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTerminationHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeTerminationHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeTerminationReason", "EmployeeTerminationReason")
                        .WithMany()
                        .HasForeignKey("EmployeeTerminationReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeTerminationReason");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTrainingRecord", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeTrainingRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeTrainingStatus", "EmployeeTrainingStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeTrainingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeTrainingStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransaction", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeRecurringTransaction", "EmployeeRecurringTransaction")
                        .WithMany()
                        .HasForeignKey("EmployeeRecurringTransactionId");

                    b.HasOne("Engage.Domain.Entities.EmployeeRecurringTransactionStatus", "EmployeeRecurringTransactionStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeRecurringTransactionStatusId");

                    b.HasOne("Engage.Domain.Entities.EmployeeTransactionRemunerationType", "EmployeeTransactionRemunerationType")
                        .WithMany()
                        .HasForeignKey("EmployeeTransactionRemunerationTypeId");

                    b.HasOne("Engage.Domain.Entities.EmployeeTransactionStatus", "EmployeeTransactionStatus")
                        .WithMany()
                        .HasForeignKey("EmployeeTransactionStatusId");

                    b.HasOne("Engage.Domain.Entities.EmployeeTransactionType", "EmployeeTransactionType")
                        .WithMany()
                        .HasForeignKey("EmployeeTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PayrollPeriod", "PayrollPeriod")
                        .WithMany()
                        .HasForeignKey("PayrollPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeRecurringTransaction");

                    b.Navigation("EmployeeRecurringTransactionStatus");

                    b.Navigation("EmployeeTransactionRemunerationType");

                    b.Navigation("EmployeeTransactionStatus");

                    b.Navigation("EmployeeTransactionType");

                    b.Navigation("PayrollPeriod");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeTransactionType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeTransactionTypeGroup", "EmployeeTransactionTypeGroup")
                        .WithMany()
                        .HasForeignKey("EmployeeTransactionTypeGroupId");

                    b.Navigation("EmployeeTransactionTypeGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeVehicle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.AssetOwner", "AssetOwner")
                        .WithMany()
                        .HasForeignKey("AssetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.AssetStatus", "AssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.VehicleBrand", "VehicleBrand")
                        .WithMany()
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetOwner");

                    b.Navigation("AssetStatus");

                    b.Navigation("Employee");

                    b.Navigation("VehicleBrand");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeVehicleHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeVehicle", "EmployeeVehicle")
                        .WithMany("EmployeeVehicleHistories")
                        .HasForeignKey("EmployeeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "NewEmployee")
                        .WithMany()
                        .HasForeignKey("NewEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "OldEmployee")
                        .WithMany()
                        .HasForeignKey("OldEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeVehicle");

                    b.Navigation("NewEmployee");

                    b.Navigation("OldEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeWorkRole", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("WorkRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.WorkRoleStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Engage.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId");

                    b.Navigation("Employee");

                    b.Navigation("EmploymentType");

                    b.Navigation("Grade");

                    b.Navigation("Manager");

                    b.Navigation("Status");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeWorkRoleContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeWorkRole", "EmployeeWorkRole")
                        .WithMany("EmployeeWorkRoleContacts")
                        .HasForeignKey("EmployeeWorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeWorkRole");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany("Categories")
                        .HasForeignKey("EngageSubGroupId")
                        .IsRequired();

                    b.Navigation("EngageSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartmentGroup", "EngageDepartmentGroup")
                        .WithMany("EngageDepartments")
                        .HasForeignKey("EngageDepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartmentGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartmentCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageMasterProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubCategory", "EngageSubCategory")
                        .WithMany()
                        .HasForeignKey("EngageSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductClassification", "ProductClassification")
                        .WithMany()
                        .HasForeignKey("ProductClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("EngageMasterProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageDepartment");

                    b.Navigation("EngageSubCategory");

                    b.Navigation("ProductClassification");

                    b.Navigation("Supplier");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreSparRegion", "StoreSparRegion")
                        .WithMany()
                        .HasForeignKey("StoreSparRegionId");

                    b.Navigation("StoreSparRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageCategory", "EngageCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("EngageCategoryId")
                        .IsRequired();

                    b.Navigation("EngageCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartmentCategory", "EngageDepartmentCategory")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageGroup", "EngageGroup")
                        .WithMany("SubGroups")
                        .HasForeignKey("EngageGroupId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreDepartment", "StoreDepartment")
                        .WithMany("EngageSubGroups")
                        .HasForeignKey("StoreDepartmentId")
                        .IsRequired();

                    b.Navigation("EngageDepartment");

                    b.Navigation("EngageDepartmentCategory");

                    b.Navigation("EngageGroup");

                    b.Navigation("StoreDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("EngageSubRegions")
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageVariantProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageMasterProduct", "EngageMasterProduct")
                        .WithMany("EngageVariantProducts")
                        .HasForeignKey("EngageMasterProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageMasterProduct");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EntityContactType", "EntityContactType")
                        .WithMany()
                        .HasForeignKey("EntityContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EntityContactType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContactCommunicationType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EntityContact", "EntityContact")
                        .WithMany("CommunicationTypes")
                        .HasForeignKey("EntityContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");

                    b.Navigation("EntityContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContactRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("EntityContacts")
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EntityContact", "EntityContact")
                        .WithMany("EntityContactRegions")
                        .HasForeignKey("EntityContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("EntityContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EvoLedger", b =>
                {
                    b.HasOne("Engage.Domain.Entities.AnalysisPillarSubGroup", "AnalysisPillarSubGroup")
                        .WithMany()
                        .HasForeignKey("AnalysisPillarSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisPillarSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeBankDetailFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeBankDetail", "EmployeeBankDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeBankDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeBankDetail");

                    b.Navigation("FileContainer");
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeCoolerBoxFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeCoolerBox", "EmployeeCoolerBox")
                        .WithMany()
                        .HasForeignKey("EmployeeCoolerBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeCoolerBox");

                    b.Navigation("FileContainer");
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeQualificationFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeQualification", "EmployeeQualification")
                        .WithMany()
                        .HasForeignKey("EmployeeQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeQualification");

                    b.Navigation("FileContainer");
                });

            modelBuilder.Entity("Engage.Domain.Entities.FileEntities.EmployeeSkillFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeSkill", "EmployeeSkill")
                        .WithMany()
                        .HasForeignKey("EmployeeSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSkill");

                    b.Navigation("FileContainer");
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAccount", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("GlAccounts")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.GLAccountType", "GLAccountType")
                        .WithMany("GLAccounts")
                        .HasForeignKey("GLAccountTypeId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("GLAccountType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAdjustment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BudgetPeriod", "BudgetPeriod")
                        .WithMany()
                        .HasForeignKey("BudgetPeriodId");

                    b.HasOne("Engage.Domain.Entities.BudgetYear", "BudgetYear")
                        .WithMany()
                        .HasForeignKey("BudgetYearId");

                    b.HasOne("Engage.Domain.Entities.GLAdjustmentType", "GLAdjustmentType")
                        .WithMany("GLAdjustments")
                        .HasForeignKey("GLAdjustmentTypeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("GLAdjustments")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("BudgetPeriod");

                    b.Navigation("BudgetYear");

                    b.Navigation("GLAdjustmentType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ImportPromotionStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ImportFile", "FileImport")
                        .WithMany()
                        .HasForeignKey("ImportFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("FileImport");

                    b.Navigation("Promotion");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ImportSurveyStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ImportFile", "FileImport")
                        .WithMany()
                        .HasForeignKey("ImportFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileImport");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Incident", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.IncidentStatus", "IncidentStatus")
                        .WithMany()
                        .HasForeignKey("IncidentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.IncidentType", "IncidentType")
                        .WithMany()
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientType");

                    b.Navigation("IncidentStatus");

                    b.Navigation("IncidentType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.IncidentSku", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Incident", "Incident")
                        .WithMany("IncidentSkus")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.IncidentSkuStatus", "IncidentSkuStatus")
                        .WithMany()
                        .HasForeignKey("IncidentSkuStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.IncidentSkuType", "IncidentSkuType")
                        .WithMany()
                        .HasForeignKey("IncidentSkuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCProduct");

                    b.Navigation("Incident");

                    b.Navigation("IncidentSkuStatus");

                    b.Navigation("IncidentSkuType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.InventoryGroup", "InventoryGroup")
                        .WithMany()
                        .HasForeignKey("InventoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InventoryStatus", "InventoryStatus")
                        .WithMany()
                        .HasForeignKey("InventoryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InventoryUnitType", "InventoryUnitType")
                        .WithMany()
                        .HasForeignKey("InventoryUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryGroup");

                    b.Navigation("InventoryStatus");

                    b.Navigation("InventoryUnitType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.InventoryYear", "InventoryYear")
                        .WithMany()
                        .HasForeignKey("InventoryYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InventoryTransactionStatus", "InventoryTransactionStatus")
                        .WithMany()
                        .HasForeignKey("InventoryTransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InventoryTransactionType", "InventoryTransactionType")
                        .WithMany()
                        .HasForeignKey("InventoryTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.InventoryWarehouse", "InventoryWarehouse")
                        .WithMany()
                        .HasForeignKey("InventoryWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("InventoryTransactionStatus");

                    b.Navigation("InventoryTransactionType");

                    b.Navigation("InventoryWarehouse");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.BudgetYearVersion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.BudgetVersion", "BudgetVersion")
                        .WithMany("BudgetYearVersions")
                        .HasForeignKey("BudgetVersionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.BudgetYear", "BudgetYear")
                        .WithMany("BudgetYearVersions")
                        .HasForeignKey("BudgetYearId")
                        .IsRequired();

                    b.Navigation("BudgetVersion");

                    b.Navigation("BudgetYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimClassificationType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimClassification", "ClaimClassification")
                        .WithMany("ClaimClassificationTypes")
                        .HasForeignKey("ClaimClassificationId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimType", "ClaimType")
                        .WithMany("ClaimClassificationTypes")
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired();

                    b.Navigation("ClaimClassification");

                    b.Navigation("ClaimType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimFloatClaim", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimFloat", "ClaimFloat")
                        .WithMany("ClaimFloatClaims")
                        .HasForeignKey("ClaimFloatId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany("ClaimFloatClaims")
                        .HasForeignKey("ClaimId")
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("ClaimFloat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ClaimTypeReportType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimReportType", "ClaimReportType")
                        .WithMany("ClaimTypeReportTypes")
                        .HasForeignKey("ClaimReportTypeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ClaimType", "ClaimType")
                        .WithMany("ClaimTypeReportTypes")
                        .HasForeignKey("ClaimTypeId")
                        .IsRequired();

                    b.Navigation("ClaimReportType");

                    b.Navigation("ClaimType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.DCDept", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCDepartment", "DCDepartment")
                        .WithMany("DCDepts")
                        .HasForeignKey("DCDepartmentId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany("DCDepts")
                        .HasForeignKey("DistributionCenterId")
                        .IsRequired();

                    b.Navigation("DCDepartment");

                    b.Navigation("DistributionCenter");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeDepartments")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("EngageDepartmentId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeBadge", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeBadge", "EmployeeBadge")
                        .WithMany("EmployeeBadges")
                        .HasForeignKey("EmployeeBadgeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeBadges")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeBadge");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeDivision", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeDivision", "EmployeeDivision")
                        .WithMany("EmployeeEmployeeDivisions")
                        .HasForeignKey("EmployeeDivisionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeDivision");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeHealthCondition", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeHealthCondition", "EmployeeHealthCondition")
                        .WithMany("EmployeeEmployeeHealthConditions")
                        .HasForeignKey("EmployeeHealthConditionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeHealthConditions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeHealthCondition");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeJobTitles")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany("EmployeeEmployeeJobTitles")
                        .HasForeignKey("EmployeeJobTitleId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeEmployeeKpi", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeKpis")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpi", "EmployeeKpi")
                        .WithMany("EmployeeKpis")
                        .HasForeignKey("EmployeeKpiId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpiTier", "EmployeeKpiTier")
                        .WithMany("EmployeeKpis")
                        .HasForeignKey("EmployeeKpiTierId");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeKpi");

                    b.Navigation("EmployeeKpiTier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeManager", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeManagers")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Employee", "Manager")
                        .WithMany("ManagerEmployees")
                        .HasForeignKey("ManagerId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeNotification", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeNotifications")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany("EmployeeNotifications")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeRegions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("Employees")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeReport", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeReports")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Report", "Report")
                        .WithMany("EmployeeReports")
                        .HasForeignKey("ReportId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeStores")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageDepartmentCategory", "EngageDepartmentCategory")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentCategoryId");

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FrequencyType", "GetFrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("EmployeeStores")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageDepartmentCategory");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("GetFrequencyType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStoreArchive", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeStoreArchives")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageDepartmentCategory", "EngageDepartmentCategory")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentCategoryId");

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FrequencyType", "GetFrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("EmployeeStoreArchives")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageDepartmentCategory");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("GetFrequencyType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeStoreKpi", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeStoreKpis")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpi", "EmployeeKpi")
                        .WithMany("EmployeeStoreKpis")
                        .HasForeignKey("EmployeeKpiId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EmployeeKpiTier", "EmployeeKpiTier")
                        .WithMany("EmployeeStoreKpis")
                        .HasForeignKey("EmployeeKpiTierId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("EmployeeStoreKpis")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeKpi");

                    b.Navigation("EmployeeKpiTier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EmployeeTraining", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeTrainings")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Training", "Training")
                        .WithMany("EmployeeTrainings")
                        .HasForeignKey("TrainingId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageProductTag", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageMasterProduct", "EngageMasterProduct")
                        .WithMany("EngageProductTags")
                        .HasForeignKey("EngageMasterProductId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageTag", "EngageTag")
                        .WithMany("EngageProductTags")
                        .HasForeignKey("EngageTagId")
                        .IsRequired();

                    b.Navigation("EngageMasterProduct");

                    b.Navigation("EngageTag");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageRegionClaimManager", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("EngageRegionClaimManagers")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("EngageRegionClaimManagers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageSubGroupEngageBrand", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany("EngageSubGroups")
                        .HasForeignKey("EngageBrandId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany("EngageBrands")
                        .HasForeignKey("EngageSubGroupId")
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.EngageSubGroupSupplier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany("EngageSubGroupSuppliers")
                        .HasForeignKey("EngageSubGroupId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("EngageSubGroupSuppliers")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationEmployeeRead", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("NotificationEmployeeReads")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationEmployeeReads")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationNotificationChannel", b =>
                {
                    b.HasOne("Engage.Domain.Entities.NotificationChannel", "NotificationChannel")
                        .WithMany("NotificationChannels")
                        .HasForeignKey("NotificationChannelId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationChannels")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("NotificationChannel");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.NotificationRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("NotificationRegions")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationRegions")
                        .HasForeignKey("NotificationId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.OrderEngageDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany("OrderEngageDepartments")
                        .HasForeignKey("EngageDepartmentId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Order", "Order")
                        .WithMany("OrderEngageDepartments")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.Navigation("EngageDepartment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.ProductWarehouseRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("ProductWarehouseRegions")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouse")
                        .WithMany("ProductWarehouseRegions")
                        .HasForeignKey("ProductWarehouseId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("ProductWarehouse");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.PromotionStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Promotion", "Promotion")
                        .WithMany("PromotionStores")
                        .HasForeignKey("PromotionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("PromotionStores")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Targeting", "Targeting")
                        .WithMany()
                        .HasForeignKey("TargetingId");

                    b.Navigation("Promotion");

                    b.Navigation("Store");

                    b.Navigation("Targeting");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreConceptAttributeStoreAsset", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany("StoreConceptAttributeStoreAssets")
                        .HasForeignKey("StoreAssetId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreConceptAttribute", "StoreConceptAttribute")
                        .WithMany("StoreConceptAttributeStoreAssets")
                        .HasForeignKey("StoreConceptAttributeId")
                        .IsRequired();

                    b.Navigation("StoreAsset");

                    b.Navigation("StoreConceptAttribute");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreConcept", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConcept", "StoreConcept")
                        .WithMany()
                        .HasForeignKey("StoreConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreConcept");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreConceptPerformance", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConcept", "StoreConcept")
                        .WithMany("StoreStoreConceptPerformances")
                        .HasForeignKey("StoreConceptId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreStoreConceptPerformances")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreConcept");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreDepartment", "StoreDepartment")
                        .WithMany("StoreDepartments")
                        .HasForeignKey("StoreDepartmentId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreStoreDepartments")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.StoreStoreList", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreStoreLists")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreList", "StoreList")
                        .WithMany("StoreStoreLists")
                        .HasForeignKey("StoreListId")
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreList");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierClaimAccountManager", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierClaimAccountManagers")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("SupplierClaimAccountManagers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierClaimClassification", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimClassification", "ClaimClassification")
                        .WithMany("SupplierClaimClassifications")
                        .HasForeignKey("ClaimClassificationId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierClaimClassifications")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("ClaimClassification");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierEngageBrand", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany("SupplierEngageBrands")
                        .HasForeignKey("EngageBrandId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierEngageBrands")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageMasterProduct", "EngageMasterProduct")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("EngageMasterProductId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("EngageMasterProduct");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FrequencyType", "FrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("SupplierStores")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierStores")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierRegion", "SupplierRegion")
                        .WithMany()
                        .HasForeignKey("SupplierRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierSubRegion", "SupplierSubRegion")
                        .WithMany()
                        .HasForeignKey("SupplierSubRegionId");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("FrequencyType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierRegion");

                    b.Navigation("SupplierSubRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SupplierSupplierType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierSupplierTypes")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierType", "SupplierType")
                        .WithMany("SupplierSupplierTypes")
                        .HasForeignKey("SupplierTypeId")
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("SupplierType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("SurveyEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyEmployees")
                        .HasForeignKey("SurveyId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Targeting", "Targeting")
                        .WithMany()
                        .HasForeignKey("TargetingId");

                    b.Navigation("Employee");

                    b.Navigation("Survey");

                    b.Navigation("Targeting");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("SurveyEngageRegions")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyEngageRegions")
                        .HasForeignKey("SurveyId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyQuestionFalseReason", b =>
                {
                    b.HasOne("Engage.Domain.Entities.QuestionFalseReason", "QuestionFalseReason")
                        .WithMany("SurveyQuestionFalseReasons")
                        .HasForeignKey("QuestionFalseReasonId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionFalseReasons")
                        .HasForeignKey("SurveyQuestionId")
                        .IsRequired();

                    b.Navigation("QuestionFalseReason");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("SurveyStores")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyStores")
                        .HasForeignKey("SurveyId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Targeting", "Targeting")
                        .WithMany()
                        .HasForeignKey("TargetingId");

                    b.Navigation("Store");

                    b.Navigation("Survey");

                    b.Navigation("Targeting");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.SurveyStoreFormat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany("SurveyStoreFormats")
                        .HasForeignKey("StoreFormatId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyStoreFormats")
                        .HasForeignKey("SurveyId")
                        .IsRequired();

                    b.Navigation("StoreFormat");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.TrainingFacilitator", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("TrainingFacilitators")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Training", "Training")
                        .WithMany("TrainingFacilitators")
                        .HasForeignKey("TrainingId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Engage.Domain.Entities.LinkEntities.UserUserGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Location", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageLocation", "EngageLocation")
                        .WithMany()
                        .HasForeignKey("EngageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Stakeholder", "Stakeholder")
                        .WithMany("Locations")
                        .HasForeignKey("StakeholderId")
                        .IsRequired();

                    b.Navigation("EngageLocation");

                    b.Navigation("EngageRegion");

                    b.Navigation("LocationType");

                    b.Navigation("Stakeholder");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Manufacturer", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NPrinting", b =>
                {
                    b.HasOne("Engage.Domain.Entities.NPrintingBatch", "NPrintingBatch")
                        .WithMany("NPrintings")
                        .HasForeignKey("NPrintingBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NPrintingBatch");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NPrintingBatch", b =>
                {
                    b.HasOne("Engage.Domain.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.WebFileCategory", "WebFileCategory")
                        .WithMany()
                        .HasForeignKey("WebFileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("WebFileCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Engage.Domain.Entities.NotificationCategory", "NotificationCategory")
                        .WithMany()
                        .HasForeignKey("NotificationCategoryId");

                    b.HasOne("Engage.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationCategory");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OptionType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.OptionTypeGroup", "OptionTypeGroup")
                        .WithMany("OptionTypes")
                        .HasForeignKey("OptionTypeGroupId")
                        .IsRequired();

                    b.Navigation("OptionTypeGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Order", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany()
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderTemplate", "OrderTemplate")
                        .WithMany()
                        .HasForeignKey("OrderTemplateId");

                    b.HasOne("Engage.Domain.Entities.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("DistributionCenter");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderTemplate");

                    b.Navigation("OrderType");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderSku", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Order", "Order")
                        .WithMany("OrderSkus")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderQuantityType", "OrderQuantityType")
                        .WithMany()
                        .HasForeignKey("OrderQuantityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderSkuStatus", "OrderSkuStatus")
                        .WithMany()
                        .HasForeignKey("OrderSkuStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderSkuType", "OrderSkuType")
                        .WithMany()
                        .HasForeignKey("OrderSkuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderTemplateProduct", "OrderTemplateProduct")
                        .WithMany("OrderSkus")
                        .HasForeignKey("OrderTemplateProductId");

                    b.Navigation("DCProduct");

                    b.Navigation("Order");

                    b.Navigation("OrderQuantityType");

                    b.Navigation("OrderSkuStatus");

                    b.Navigation("OrderSkuType");

                    b.Navigation("OrderTemplateProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderStagingSku", b =>
                {
                    b.HasOne("Engage.Domain.Entities.OrderStaging", "OrderStaging")
                        .WithMany()
                        .HasForeignKey("OrderStagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStaging");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplate", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany()
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderTemplateStatus", "OrderTemplateStatus")
                        .WithMany()
                        .HasForeignKey("OrderTemplateStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("OrderTemplateStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.OrderTemplate", "OrderTemplate")
                        .WithMany("OrderTemplateGroups")
                        .HasForeignKey("OrderTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderTemplate");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.OrderTemplateGroup", "OrderTemplateGroup")
                        .WithMany("OrderTemplateProducts")
                        .HasForeignKey("OrderTemplateGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCProduct");

                    b.Navigation("OrderTemplateGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Engage.Domain.Entities.OrganizationSetting", "OrganizationSetting")
                        .WithMany()
                        .HasForeignKey("OrganizationSettingId");

                    b.Navigation("OrganizationSetting");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Creditor", "Creditor")
                        .WithMany()
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentArchive", "PaymentArchive")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentArchiveId");

                    b.HasOne("Engage.Domain.Entities.PaymentBatch", "PaymentBatch")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentPeriod", "PaymentPeriod")
                        .WithMany()
                        .HasForeignKey("PaymentPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId");

                    b.Navigation("Creditor");

                    b.Navigation("PaymentArchive");

                    b.Navigation("PaymentBatch");

                    b.Navigation("PaymentPeriod");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentBatchRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentBatch", "PaymentBatch")
                        .WithMany("BatchRegions")
                        .HasForeignKey("PaymentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("PaymentBatch");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLine", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Payment", "Payment")
                        .WithMany("PaymentLines")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId");

                    b.Navigation("ExpenseType");

                    b.Navigation("Payment");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineCostCenter", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentLine", "PaymentLine")
                        .WithMany("CostCenters")
                        .HasForeignKey("PaymentLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("PaymentLine");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineCostSubDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CostSubDepartment", "CostSubDepartment")
                        .WithMany()
                        .HasForeignKey("CostSubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentLine", "PaymentLine")
                        .WithMany("SubDepartments")
                        .HasForeignKey("PaymentLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostSubDepartment");

                    b.Navigation("PaymentLine");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineDivision", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeDivision", "EmployeeDivision")
                        .WithMany()
                        .HasForeignKey("EmployeeDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentLine", "PaymentLine")
                        .WithMany("EmployeeDivisions")
                        .HasForeignKey("PaymentLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeDivision");

                    b.Navigation("PaymentLine");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentLine", "PaymentLine")
                        .WithMany("Employees")
                        .HasForeignKey("PaymentLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PaymentLine");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLineFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.PaymentLineFileType", "PaymentLineFileType")
                        .WithMany()
                        .HasForeignKey("PaymentLineFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentLine", "PaymentLine")
                        .WithMany()
                        .HasForeignKey("PaymentLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentLine");

                    b.Navigation("PaymentLineFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentNotificationStatusUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.PaymentYear", "PaymentYear")
                        .WithMany()
                        .HasForeignKey("PaymentYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentProofPayment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentProof", "PaymentProof")
                        .WithMany()
                        .HasForeignKey("PaymentProofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentProof");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentStatusHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Payment", "Payment")
                        .WithMany("PaymentStatusHistories")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PayrollPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.PayrollYear", "PayrollYear")
                        .WithMany()
                        .HasForeignKey("PayrollYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayrollYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Product", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductMasterColor", "ProductMasterColor")
                        .WithMany()
                        .HasForeignKey("ProductMasterColorId");

                    b.HasOne("Engage.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductMasterSize", "ProductMasterSize")
                        .WithMany()
                        .HasForeignKey("ProductMasterSizeId");

                    b.HasOne("Engage.Domain.Entities.ProductModuleStatus", "ProductModuleStatus")
                        .WithMany()
                        .HasForeignKey("ProductModuleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductPackSizeType", "ProductPackSizeType")
                        .WithMany()
                        .HasForeignKey("ProductPackSizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductSizeType", "ProductSizeType")
                        .WithMany()
                        .HasForeignKey("ProductSizeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductSystemStatus", "ProductSystemStatus")
                        .WithMany()
                        .HasForeignKey("ProductSystemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouse")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Product", "RelatedProduct")
                        .WithMany()
                        .HasForeignKey("RelatedProductId");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductMasterColor");

                    b.Navigation("ProductMasterSize");

                    b.Navigation("ProductModuleStatus");

                    b.Navigation("ProductPackSizeType");

                    b.Navigation("ProductSizeType");

                    b.Navigation("ProductSystemStatus");

                    b.Navigation("ProductWarehouse");

                    b.Navigation("RelatedProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductAnalysis", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany()
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageCategory", "EngageCategory")
                        .WithMany()
                        .HasForeignKey("EngageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageGroup", "EngageGroup")
                        .WithMany()
                        .HasForeignKey("EngageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubCategory", "EngageSubCategory")
                        .WithMany()
                        .HasForeignKey("EngageSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductAnalysisDivision", "ProductAnalysisDivision")
                        .WithMany()
                        .HasForeignKey("ProductAnalysisDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductAnalysisGroup", "ProductAnalysisGroup")
                        .WithMany()
                        .HasForeignKey("ProductAnalysisGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("EngageCategory");

                    b.Navigation("EngageGroup");

                    b.Navigation("EngageSubCategory");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("ProductAnalysisDivision");

                    b.Navigation("ProductAnalysisGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductSubGroup", "ProductSubGroup")
                        .WithMany()
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductFilter", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany()
                        .HasForeignKey("EngageVariantProductId");

                    b.HasOne("Engage.Domain.Entities.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId");

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductFilterUpload", b =>
                {
                    b.HasOne("Engage.Domain.Entities.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductManufacturer", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany()
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMaster", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductManufacturer", "ProductManufacturer")
                        .WithMany()
                        .HasForeignKey("ProductManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductMasterStatus", "ProductMasterStatus")
                        .WithMany()
                        .HasForeignKey("ProductMasterStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductMasterSystemStatus", "ProductMasterSystemStatus")
                        .WithMany()
                        .HasForeignKey("ProductMasterSystemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductReason", "ProductReason")
                        .WithMany()
                        .HasForeignKey("ProductReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductSubCategory", "ProductSubCategory")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductVendor", "ProductVendor")
                        .WithMany()
                        .HasForeignKey("ProductVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductManufacturer");

                    b.Navigation("ProductMasterStatus");

                    b.Navigation("ProductMasterSystemStatus");

                    b.Navigation("ProductReason");

                    b.Navigation("ProductSubCategory");

                    b.Navigation("ProductVendor");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterColor", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductMasterSize", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductOrderStatus", "ProductOrderStatus")
                        .WithMany()
                        .HasForeignKey("ProductOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductOrderType", "ProductOrderType")
                        .WithMany()
                        .HasForeignKey("ProductOrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductPeriod", "ProductPeriod")
                        .WithMany()
                        .HasForeignKey("ProductPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany()
                        .HasForeignKey("ProductSupplierId");

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouse")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouseOut")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseOutId");

                    b.Navigation("ProductOrderStatus");

                    b.Navigation("ProductOrderType");

                    b.Navigation("ProductPeriod");

                    b.Navigation("ProductSupplier");

                    b.Navigation("ProductWarehouse");

                    b.Navigation("ProductWarehouseOut");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductOrderStatus", "ProductOrderStatus")
                        .WithMany()
                        .HasForeignKey("ProductOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOrder");

                    b.Navigation("ProductOrderStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductOrderLine", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductOrderLineStatus", "ProductOrderLineStatus")
                        .WithMany()
                        .HasForeignKey("ProductOrderLineStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductOrderLineType", "ProductOrderLineType")
                        .WithMany()
                        .HasForeignKey("ProductOrderLineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductOrder");

                    b.Navigation("ProductOrderLineStatus");

                    b.Navigation("ProductOrderLineType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductYear", "ProductYear")
                        .WithMany()
                        .HasForeignKey("ProductYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSubCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductTransaction", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductPeriod", "ProductPeriod")
                        .WithMany()
                        .HasForeignKey("ProductPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductTransactionStatus", "ProductTransactionStatus")
                        .WithMany()
                        .HasForeignKey("ProductTransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductTransactionType", "ProductTransactionType")
                        .WithMany()
                        .HasForeignKey("ProductTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouse")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageRegion");

                    b.Navigation("Product");

                    b.Navigation("ProductPeriod");

                    b.Navigation("ProductTransactionStatus");

                    b.Navigation("ProductTransactionType");

                    b.Navigation("ProductWarehouse");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouse", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("EngageRegion");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouseSummary", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductPeriod", "ProductPeriod")
                        .WithMany()
                        .HasForeignKey("ProductPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProductWarehouse", "ProductWarehouse")
                        .WithMany()
                        .HasForeignKey("ProductWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Product");

                    b.Navigation("ProductPeriod");

                    b.Navigation("ProductWarehouse");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Project", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Engage.Domain.Entities.ProjectCampaign", "ProjectCampaign")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCampaignId");

                    b.HasOne("Engage.Domain.Entities.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId");

                    b.HasOne("Engage.Domain.Entities.ProjectPriority", "ProjectPriority")
                        .WithMany()
                        .HasForeignKey("ProjectPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectSubCategory", "ProjectSubCategory")
                        .WithMany()
                        .HasForeignKey("ProjectSubCategoryId");

                    b.HasOne("Engage.Domain.Entities.ProjectSubType", "ProjectSubType")
                        .WithMany()
                        .HasForeignKey("ProjectSubTypeId");

                    b.HasOne("Engage.Domain.Entities.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Owner");

                    b.Navigation("ProjectCampaign");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectPriority");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectSubCategory");

                    b.Navigation("ProjectSubType");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectAssignee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectAssignees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStakeholder", "ProjectStakeholder")
                        .WithMany()
                        .HasForeignKey("ProjectStakeholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId");

                    b.Navigation("Project");

                    b.Navigation("ProjectStakeholder");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCampaign", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCategorySupplier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectCategory", "ProjectCategory")
                        .WithMany("ProjectCategorySuppliers")
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectComment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectComments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectDcProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DcProduct")
                        .WithMany()
                        .HasForeignKey("DcProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcProduct");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectEngageBrand", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("EngageBrands")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectExternalUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ExternalUserType", "ExternalUserType")
                        .WithMany()
                        .HasForeignKey("ExternalUserTypeId");

                    b.Navigation("ExternalUserType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectExternalUserCommunicationType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectExternalUser", "ProjectExternalUser")
                        .WithMany("CommunicationTypes")
                        .HasForeignKey("ProjectExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");

                    b.Navigation("ProjectExternalUser");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectFileType", "ProjectFileType")
                        .WithMany()
                        .HasForeignKey("ProjectFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectNote", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectNotes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTag", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStatusHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStoreAsset", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("StoreAsset");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSubCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId");

                    b.HasOne("Engage.Domain.Entities.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageSubGroup");

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSubType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectSupplier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectSuppliers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTacOp", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTacOpRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("ProjectTacOpRegions")
                        .HasForeignKey("EngageRegionId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTacOp", "ProjectTacOp")
                        .WithMany("ProjectTacOpRegions")
                        .HasForeignKey("ProjectTacOpId")
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("ProjectTacOp");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectStakeholderUser", "ProjectStakeholder")
                        .WithMany()
                        .HasForeignKey("ProjectStakeholderId");

                    b.HasOne("Engage.Domain.Entities.ProjectTaskPriority", "ProjectTaskPriority")
                        .WithMany()
                        .HasForeignKey("ProjectTaskPriorityId");

                    b.HasOne("Engage.Domain.Entities.ProjectTaskSeverity", "ProjectTaskSeverity")
                        .WithMany()
                        .HasForeignKey("ProjectTaskSeverityId");

                    b.HasOne("Engage.Domain.Entities.ProjectTaskStatus", "ProjectTaskStatus")
                        .WithMany()
                        .HasForeignKey("ProjectTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTaskType", "ProjectTaskType")
                        .WithMany()
                        .HasForeignKey("ProjectTaskTypeId");

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("ProjectStakeholder");

                    b.Navigation("ProjectTaskPriority");

                    b.Navigation("ProjectTaskSeverity");

                    b.Navigation("ProjectTaskStatus");

                    b.Navigation("ProjectTaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskAssignee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTaskStatus", "ProjectTaskStatus")
                        .WithMany()
                        .HasForeignKey("ProjectTaskStatusId");

                    b.Navigation("Project");

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskComment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskNote", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskNotes")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskProjectStakeholderUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectStakeholderUser", "ProjectStakeholder")
                        .WithMany("ProjectTaskProjectStakeholderUsers")
                        .HasForeignKey("ProjectStakeholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskProjectStakeholderUsers")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStakeholder");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskStakeholder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectStakeholder", "ProjectStakeholder")
                        .WithMany()
                        .HasForeignKey("ProjectStakeholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTaskStatus", "ProjectTaskStatus")
                        .WithMany()
                        .HasForeignKey("ProjectTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStakeholder");

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTaskStatusHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.ProjectTaskStatus", "ProjectTaskStatus")
                        .WithMany()
                        .HasForeignKey("ProjectTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.PromotionType", "PromotionType")
                        .WithMany()
                        .HasForeignKey("PromotionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PromotionProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany()
                        .HasForeignKey("EngageVariantProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.PromotionProductType", "PromotionProductType")
                        .WithMany()
                        .HasForeignKey("PromotionProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("Promotion");

                    b.Navigation("PromotionProductType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.RoleUserGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Role", "Role")
                        .WithMany("RoleUserGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("RoleUserGroups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityPermissionRole", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SecurityPermission", "SecurityPermission")
                        .WithMany("SecurityPermissionRoles")
                        .HasForeignKey("SecurityPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SecurityRole", "SecurityRole")
                        .WithMany("SecurityPermissionRoles")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityPermission");

                    b.Navigation("SecurityRole");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityRoleUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SecurityRole", "SecurityRole")
                        .WithMany("SecurityRoleUsers")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubCategory", "EngageSubCategory")
                        .WithMany()
                        .HasForeignKey("EngageSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EvoLedger", "EvoLedger")
                        .WithMany()
                        .HasForeignKey("EvoLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparAnalysisGroup", "SparAnalysisGroup")
                        .WithMany()
                        .HasForeignKey("SparAnalysisGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparProductStatus", "SparProductStatus")
                        .WithMany()
                        .HasForeignKey("SparProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparSystemStatus", "SparSystemStatus")
                        .WithMany()
                        .HasForeignKey("SparSystemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparUnitType", "SparUnitType")
                        .WithMany()
                        .HasForeignKey("SparUnitTypeId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageSubCategory");

                    b.Navigation("EvoLedger");

                    b.Navigation("SparAnalysisGroup");

                    b.Navigation("SparProductStatus");

                    b.Navigation("SparSystemStatus");

                    b.Navigation("SparUnitType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SparSubProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany()
                        .HasForeignKey("DistributionCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparProduct", "SparProduct")
                        .WithMany()
                        .HasForeignKey("SparProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SparSource", "SparSource")
                        .WithMany()
                        .HasForeignKey("SparSourceId");

                    b.HasOne("Engage.Domain.Entities.SparSubProductStatus", "SparSubProductStatus")
                        .WithMany()
                        .HasForeignKey("SparSubProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("SparProduct");

                    b.Navigation("SparSource");

                    b.Navigation("SparSubProductStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Stakeholder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StatsOrdersByRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StatsStoresByRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Store", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageLocation", "EngageLocation")
                        .WithMany()
                        .HasForeignKey("EngageLocationId");

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("Stores")
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubRegion", "EngageSubRegion")
                        .WithMany("Stores")
                        .HasForeignKey("EngageSubRegionId");

                    b.HasOne("Engage.Domain.Entities.Store", "ParentStore")
                        .WithMany()
                        .HasForeignKey("ParentStoreId");

                    b.HasOne("Engage.Domain.Entities.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Engage.Domain.Entities.Location", "PrimaryLocation")
                        .WithMany()
                        .HasForeignKey("PrimaryLocationId");

                    b.HasOne("Engage.Domain.Entities.Stakeholder", "Stakeholder")
                        .WithOne("Store")
                        .HasForeignKey("Engage.Domain.Entities.Store", "StakeholderId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreCluster", "StoreCluster")
                        .WithMany()
                        .HasForeignKey("StoreClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreGroup", "StoreGroup")
                        .WithMany()
                        .HasForeignKey("StoreGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreLSM", "StoreLSM")
                        .WithMany()
                        .HasForeignKey("StoreLSMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.LocationType", "StoreLocationType")
                        .WithMany()
                        .HasForeignKey("StoreLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreMediaGroup", "StoreMediaGroup")
                        .WithMany()
                        .HasForeignKey("StoreMediaGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreSparRegion", "StoreSparRegion")
                        .WithMany()
                        .HasForeignKey("StoreSparRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageLocation");

                    b.Navigation("EngageRegion");

                    b.Navigation("EngageSubRegion");

                    b.Navigation("ParentStore");

                    b.Navigation("PrimaryContact");

                    b.Navigation("PrimaryLocation");

                    b.Navigation("Stakeholder");

                    b.Navigation("StoreCluster");

                    b.Navigation("StoreFormat");

                    b.Navigation("StoreGroup");

                    b.Navigation("StoreLSM");

                    b.Navigation("StoreLocationType");

                    b.Navigation("StoreMediaGroup");

                    b.Navigation("StoreSparRegion");

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAsset", b =>
                {
                    b.HasOne("Engage.Domain.Entities.AssetStatus", "AssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusId");

                    b.HasOne("Engage.Domain.Entities.StoreAssetCondition", "StoreAssetCondition")
                        .WithMany()
                        .HasForeignKey("StoreAssetConditionId");

                    b.HasOne("Engage.Domain.Entities.StoreAssetOwner", "StoreAssetOwner")
                        .WithMany()
                        .HasForeignKey("StoreAssetOwnerId");

                    b.HasOne("Engage.Domain.Entities.StoreAssetStatus", "StoreAssetStatus")
                        .WithMany()
                        .HasForeignKey("StoreAssetStatusId");

                    b.HasOne("Engage.Domain.Entities.StoreAssetSubType", "StoreAssetSubType")
                        .WithMany()
                        .HasForeignKey("StoreAssetSubTypeId");

                    b.HasOne("Engage.Domain.Entities.StoreAssetType", "StoreAssetType")
                        .WithMany()
                        .HasForeignKey("StoreAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreAssets")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetStatus");

                    b.Navigation("Store");

                    b.Navigation("StoreAssetCondition");

                    b.Navigation("StoreAssetOwner");

                    b.Navigation("StoreAssetStatus");

                    b.Navigation("StoreAssetSubType");

                    b.Navigation("StoreAssetType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetBlob", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetFileType", "StoreAssetFileType")
                        .WithMany()
                        .HasForeignKey("StoreAssetFileTypeId");

                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany("StoreAssetBlobs")
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAsset");

                    b.Navigation("StoreAssetFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetFileType", "StoreAssetFileType")
                        .WithMany()
                        .HasForeignKey("StoreAssetFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAsset");

                    b.Navigation("StoreAssetFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetOwnerStoreAssetType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetOwner", "StoreAssetOwner")
                        .WithMany("AssetOwnerAssetTypes")
                        .HasForeignKey("StoreAssetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAssetType", "StoreAssetType")
                        .WithMany("AssetOwnerAssetTypes")
                        .HasForeignKey("StoreAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAssetOwner");

                    b.Navigation("StoreAssetType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetStoreAssetTypeContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany("AssetTypeContacts")
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAssetTypeContact", "StoreAssetTypeContact")
                        .WithMany("StoreAssets")
                        .HasForeignKey("StoreAssetTypeContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAsset");

                    b.Navigation("StoreAssetTypeContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetSubType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetType", "StoreAssetType")
                        .WithMany()
                        .HasForeignKey("StoreAssetTypeId");

                    b.Navigation("StoreAssetType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeStoreAssetSubType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetSubType", "StoreAssetSubType")
                        .WithMany("StoreAssetTypes")
                        .HasForeignKey("StoreAssetSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAssetType", "StoreAssetType")
                        .WithMany("AssetSubTypes")
                        .HasForeignKey("StoreAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAssetSubType");

                    b.Navigation("StoreAssetType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeStoreAssetTypeContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAssetTypeContact", "StoreAssetTypeContact")
                        .WithMany("StoreAssetTypes")
                        .HasForeignKey("StoreAssetTypeContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreAssetType", "StoreAssetType")
                        .WithMany("AssetContacts")
                        .HasForeignKey("StoreAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAssetType");

                    b.Navigation("StoreAssetTypeContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreBankDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("BankDetails")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConcept", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttribute", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConceptAttributeType", "StoreConceptAttributeType")
                        .WithMany()
                        .HasForeignKey("StoreConceptAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreConcept", "StoreConcept")
                        .WithMany()
                        .HasForeignKey("StoreConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreConcept");

                    b.Navigation("StoreConceptAttributeType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttributeOption", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConceptAttribute", "StoreConceptAttribute")
                        .WithMany("StoreConceptAttributeOptions")
                        .HasForeignKey("StoreConceptAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreConceptAttribute");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttributeValue", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConceptAttribute", "StoreConceptAttribute")
                        .WithMany()
                        .HasForeignKey("StoreConceptAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreConceptAttributeOption", "StoreConceptAttributeOption")
                        .WithMany()
                        .HasForeignKey("StoreConceptAttributeOptionId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreConceptAttributeValues")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreConceptAttribute");

                    b.Navigation("StoreConceptAttributeOption");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptLevel", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreConcept", "StoreConcept")
                        .WithMany("StoreConceptLevels")
                        .HasForeignKey("StoreConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreConceptLevels")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreConcept");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreCycle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.FrequencyType", "FrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreCycleOperation", "StoreCycleOperation")
                        .WithMany()
                        .HasForeignKey("StoreCycleOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartment");

                    b.Navigation("FrequencyType");

                    b.Navigation("Store");

                    b.Navigation("StoreCycleOperation");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFilter", b =>
                {
                    b.HasOne("Engage.Domain.Entities.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUpload");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFilterUpload", b =>
                {
                    b.HasOne("Engage.Domain.Entities.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreOwner", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreGroup", "StoreGroup")
                        .WithMany()
                        .HasForeignKey("StoreGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreOwners")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreOwnerType", "StoreOwnerType")
                        .WithMany()
                        .HasForeignKey("StoreOwnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreGroup");

                    b.Navigation("StoreOwnerType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOS", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StorePOSType", "StorePOSType")
                        .WithMany()
                        .HasForeignKey("StorePOSTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StorePOSType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSFreezerQuestion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StorePOSFreezerType", "StorePOSFreezerType")
                        .WithMany()
                        .HasForeignKey("StorePOSFreezerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StorePOSType", "StorePOSType")
                        .WithMany()
                        .HasForeignKey("StorePOSTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StorePOSFreezerType");

                    b.Navigation("StorePOSType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StorePOSQuestion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StorePOSType", "StorePOSType")
                        .WithMany()
                        .HasForeignKey("StorePOSTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StorePOSType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SubContractorBrand", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageRegion");

                    b.Navigation("Parent");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Engage.Domain.Entities.Location", "PrimaryLocation")
                        .WithMany()
                        .HasForeignKey("PrimaryLocationId");

                    b.HasOne("Engage.Domain.Entities.Stakeholder", "Stakeholder")
                        .WithOne("Supplier")
                        .HasForeignKey("Engage.Domain.Entities.Supplier", "StakeholderId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierGroup", "SupplierGroup")
                        .WithMany()
                        .HasForeignKey("SupplierGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryContact");

                    b.Navigation("PrimaryLocation");

                    b.Navigation("Stakeholder");

                    b.Navigation("SupplierGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowance", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierSalesLead", "SalesLead")
                        .WithMany()
                        .HasForeignKey("SupplierSalesLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesLead");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowanceContract", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierSalesLead", "SupplierSalesLead")
                        .WithMany()
                        .HasForeignKey("SupplierSalesLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("SupplierSalesLead");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowanceSubContract", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierAllowanceContract", "SupplierAllowanceContract")
                        .WithMany("SupplierAllowanceSubContracts")
                        .HasForeignKey("SupplierAllowanceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierAllowanceContract");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.SupplierBudgetType", "SupplierBudgetType")
                        .WithMany()
                        .HasForeignKey("SupplierBudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierBudgetVersion", "SupplierBudgetVersion")
                        .WithMany()
                        .HasForeignKey("SupplierBudgetVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierContractDetail", "SupplierContractDetail")
                        .WithMany()
                        .HasForeignKey("SupplierContractDetailId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierBudgetType");

                    b.Navigation("SupplierBudgetVersion");

                    b.Navigation("SupplierContractDetail");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierBudgetVersion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierBudgetVersionType", "SupplierBudgetVersionType")
                        .WithMany()
                        .HasForeignKey("SupplierBudgetVersionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierPeriod", "SupplierPeriod")
                        .WithMany()
                        .HasForeignKey("SupplierPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierBudgetVersionType");

                    b.Navigation("SupplierPeriod");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContract", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierContact", "SupplierContact")
                        .WithMany()
                        .HasForeignKey("SupplierContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierContractGroup", "SupplierContractGroup")
                        .WithMany()
                        .HasForeignKey("SupplierContractGroupId");

                    b.HasOne("Engage.Domain.Entities.SupplierContractSubGroup", "SupplierContractSubGroup")
                        .WithMany()
                        .HasForeignKey("SupplierContractSubGroupId");

                    b.HasOne("Engage.Domain.Entities.SupplierContractType", "SupplierContractType")
                        .WithMany()
                        .HasForeignKey("SupplierContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("SupplierContact");

                    b.Navigation("SupplierContractGroup");

                    b.Navigation("SupplierContractSubGroup");

                    b.Navigation("SupplierContractType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractAmount", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierContractAmountType", "SupplierContractAmountType")
                        .WithMany()
                        .HasForeignKey("SupplierContractAmountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierContractSplit", "SupplierContractSplit")
                        .WithMany()
                        .HasForeignKey("SupplierContractSplitId");

                    b.HasOne("Engage.Domain.Entities.SupplierSubContractDetail", "SupplierSubContractDetail")
                        .WithMany()
                        .HasForeignKey("SupplierSubContractDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierContractAmountType");

                    b.Navigation("SupplierContractSplit");

                    b.Navigation("SupplierSubContractDetail");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.SupplierContractDetailType", "SupplierContractDetailType")
                        .WithMany()
                        .HasForeignKey("SupplierContractDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierContract", "SupplierContract")
                        .WithMany()
                        .HasForeignKey("SupplierContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("SupplierContract");

                    b.Navigation("SupplierContractDetailType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContractSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierContractGroup", "SupplierContractGroup")
                        .WithMany()
                        .HasForeignKey("SupplierContractGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierContractGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierYear", "SupplierYear")
                        .WithMany()
                        .HasForeignKey("SupplierYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierRegions")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSetting", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContract", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierContract", "SupplierContract")
                        .WithMany()
                        .HasForeignKey("SupplierContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SupplierSubContractType", "SupplierSubContractType")
                        .WithMany()
                        .HasForeignKey("SupplierSubContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierContract");

                    b.Navigation("SupplierSubContractType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubContractDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierSubContractDetailType", "SupplierSubContractDetailType")
                        .WithMany()
                        .HasForeignKey("SupplierSubContractDetailTypeId");

                    b.HasOne("Engage.Domain.Entities.SupplierSubContractType", "SupplierSubContractType")
                        .WithMany()
                        .HasForeignKey("SupplierSubContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierSubContractDetailType");

                    b.Navigation("SupplierSubContractType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierSubRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierRegion", "SupplierRegion")
                        .WithMany("SupplierSubRegions")
                        .HasForeignKey("SupplierRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Survey", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageMasterProduct", "EngageMasterProduct")
                        .WithMany()
                        .HasForeignKey("EngageMasterProductId");

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyType", "SurveyType")
                        .WithMany()
                        .HasForeignKey("SurveyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageMasterProduct");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Supplier");

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("Engage.Domain.Entities.QuestionFalseReason", "QuestionFalseReason")
                        .WithMany()
                        .HasForeignKey("QuestionFalseReasonId");

                    b.HasOne("Engage.Domain.Entities.SurveyInstance", "SurveyInstance")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyInstanceId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("EmployeeStoreSurveyAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionFalseReason");

                    b.Navigation("SurveyInstance");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswerOption", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyAnswer", "SurveyAnswer")
                        .WithMany("SurveyAnswerOptions")
                        .HasForeignKey("SurveyAnswerId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyQuestionOption", "SurveyQuestionOption")
                        .WithMany("SurveyAnswerOptions")
                        .HasForeignKey("SurveyQuestionOptionId")
                        .IsRequired();

                    b.Navigation("SurveyAnswer");

                    b.Navigation("SurveyQuestionOption");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswerPhoto", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyAnswer", "SurveyAnswer")
                        .WithMany("SurveyAnswerPhotos")
                        .HasForeignKey("SurveyAnswerId")
                        .IsRequired();

                    b.Navigation("SurveyAnswer");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyForm", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageBrand", "EngageBrand")
                        .WithMany()
                        .HasForeignKey("EngageBrandId");

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubgroupId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Engage.Domain.Entities.SurveyFormType", "SurveyFormType")
                        .WithMany()
                        .HasForeignKey("SurveyFormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageBrand");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Supplier");

                    b.Navigation("SurveyFormType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswer", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyForm", null)
                        .WithMany("SurveyFormAnswers")
                        .HasForeignKey("SurveyFormId");

                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestion", "SurveyFormQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyFormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormReason", "SurveyFormReason")
                        .WithMany()
                        .HasForeignKey("SurveyFormReasonId");

                    b.HasOne("Engage.Domain.Entities.SurveyFormSubmission", "SurveyFormSubmission")
                        .WithMany("SurveyFormAnswers")
                        .HasForeignKey("SurveyFormSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormQuestion");

                    b.Navigation("SurveyFormReason");

                    b.Navigation("SurveyFormSubmission");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormAnswer", "SurveyFormAnswer")
                        .WithMany()
                        .HasForeignKey("SurveyFormAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormReason", "SurveyFormReason")
                        .WithMany()
                        .HasForeignKey("SurveyFormReasonId");

                    b.Navigation("SurveyFormAnswer");

                    b.Navigation("SurveyFormReason");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerOption", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormAnswer", "SurveyFormAnswer")
                        .WithMany("SurveyFormAnswerOptions")
                        .HasForeignKey("SurveyFormAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormOption", "SurveyFormOption")
                        .WithMany()
                        .HasForeignKey("SurveyFormOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormAnswer");

                    b.Navigation("SurveyFormOption");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerOptionHistory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormAnswerHistory", "SurveyFormAnswerHistory")
                        .WithMany("SurveyFormAnswerOptionHistories")
                        .HasForeignKey("SurveyFormAnswerHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormOption", "SurveyFormOption")
                        .WithMany()
                        .HasForeignKey("SurveyFormOptionId");

                    b.Navigation("SurveyFormAnswerHistory");

                    b.Navigation("SurveyFormOption");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageMasterProduct", "EngageMasterProduct")
                        .WithMany()
                        .HasForeignKey("EngageMasterProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyForm", "SurveyForm")
                        .WithMany("SurveyFormProducts")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageMasterProduct");

                    b.Navigation("SurveyForm");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestionGroup", "SurveyFormQuestionGroup")
                        .WithMany("SurveyFormQuestions")
                        .HasForeignKey("SurveyFormQuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestionType", "SurveyFormQuestionType")
                        .WithMany()
                        .HasForeignKey("SurveyFormQuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormQuestionGroup");

                    b.Navigation("SurveyFormQuestionType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyForm", "SurveyForm")
                        .WithMany("SurveyFormQuestionGroups")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyForm");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionGroupProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany()
                        .HasForeignKey("EngageVariantProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestionGroup", "SurveyFormQuestionGroup")
                        .WithMany("SurveyFormQuestionGroupProducts")
                        .HasForeignKey("SurveyFormQuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("SurveyFormQuestionGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionOption", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormOption", "SurveyFormOption")
                        .WithMany()
                        .HasForeignKey("SurveyFormOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestion", "SurveyFormQuestion")
                        .WithMany("SurveyFormQuestionOptions")
                        .HasForeignKey("SurveyFormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormOption");

                    b.Navigation("SurveyFormQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany()
                        .HasForeignKey("EngageVariantProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestion", "SurveyFormQuestion")
                        .WithMany("SurveyFormQuestionProducts")
                        .HasForeignKey("SurveyFormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("SurveyFormQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionReason", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyFormQuestion", "SurveyFormQuestion")
                        .WithMany("SurveyFormQuestionReasons")
                        .HasForeignKey("SurveyFormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyFormReason", "SurveyFormReason")
                        .WithMany()
                        .HasForeignKey("SurveyFormReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyFormQuestion");

                    b.Navigation("SurveyFormReason");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormSubmission", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Engage.Domain.Entities.SurveyForm", "SurveyForm")
                        .WithMany()
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("Store");

                    b.Navigation("SurveyForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyForm", "SurveyForm")
                        .WithMany()
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyForm");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyInstance", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("SurveyInstances")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("SurveyInstances")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyInstances")
                        .HasForeignKey("SurveyId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageVariantProduct", "EngageVariantProduct")
                        .WithMany()
                        .HasForeignKey("EngageVariantProductId");

                    b.HasOne("Engage.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreConceptAttribute", "StoreConceptAttribute")
                        .WithMany()
                        .HasForeignKey("StoreConceptAttributeId");

                    b.HasOne("Engage.Domain.Entities.StoreConcept", "StoreConcept")
                        .WithMany()
                        .HasForeignKey("StoreConceptId");

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageVariantProduct");

                    b.Navigation("QuestionType");

                    b.Navigation("StoreConcept");

                    b.Navigation("StoreConceptAttribute");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestionOption", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestionRule", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SurveyQuestion", "Question")
                        .WithMany("Rules")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.SurveyQuestion", "TargetQuestion")
                        .WithMany()
                        .HasForeignKey("TargetQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TargetQuestion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.TenantSetting", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Training", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.HasOne("Engage.Domain.Entities.TrainingCategory", "TrainingCategory")
                        .WithMany()
                        .HasForeignKey("TrainingCategoryId");

                    b.HasOne("Engage.Domain.Entities.TrainingDuration", "TrainingDuration")
                        .WithMany()
                        .HasForeignKey("TrainingDurationId");

                    b.HasOne("Engage.Domain.Entities.TrainingPeriod", "TrainingPeriod")
                        .WithMany()
                        .HasForeignKey("TrainingPeriodId");

                    b.HasOne("Engage.Domain.Entities.TrainingProvider", "TrainingProvider")
                        .WithMany()
                        .HasForeignKey("TrainingProviderId");

                    b.HasOne("Engage.Domain.Entities.TrainingType", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("TrainingCategory");

                    b.Navigation("TrainingDuration");

                    b.Navigation("TrainingPeriod");

                    b.Navigation("TrainingProvider");

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.TrainingFileType", "TrainingFileType")
                        .WithMany()
                        .HasForeignKey("TrainingFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Training", "Training")
                        .WithMany("TrainingFiles")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("TrainingFileType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.TrainingYear", "TrainingYear")
                        .WithMany("TrainingPeriods")
                        .HasForeignKey("TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingYear");
                });

            modelBuilder.Entity("Engage.Domain.Entities.User", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Engage.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserCommunicationType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("UserCommunicationTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEngageSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("UserEngageSubGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageSubGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEntityRecord", b =>
                {
                    b.HasOne("Engage.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("UserEntityRecords")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId");

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserOrganization", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserOrganizationRole", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UserOrganization", "UserOrganization")
                        .WithMany()
                        .HasForeignKey("UserOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserOrganization");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany("Users")
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany("UserRegions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserRolePermission", b =>
                {
                    b.HasOne("Engage.Domain.Entities.UserPermission", "UserPermission")
                        .WithMany()
                        .HasForeignKey("UserPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPermission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.VatPeriod", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DistributionCenter")
                        .WithMany("Vendors")
                        .HasForeignKey("DistributionCenterId")
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Vendors")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("DistributionCenter");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerRegionView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerRegionView2", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreFormatView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeePerStoreView_", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeStoreView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerRegionView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerStoreFormatView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Views.SurveysByEmployeeSubGroupPerStoreView", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EngageSubGroup");

                    b.Navigation("Store");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Voucher", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.VoucherStatus", "VoucherStatus")
                        .WithMany()
                        .HasForeignKey("VoucherStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Supplier");

                    b.Navigation("VoucherStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.VoucherDetail", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Engage.Domain.Entities.StoreContact", "StoreContact")
                        .WithMany()
                        .HasForeignKey("StoreContactId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Engage.Domain.Entities.VoucherDetailStatus", "VoucherDetailStatus")
                        .WithMany()
                        .HasForeignKey("VoucherDetailStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Voucher", "Voucher")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Employee");

                    b.Navigation("Store");

                    b.Navigation("StoreContact");

                    b.Navigation("Voucher");

                    b.Navigation("VoucherDetailStatus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DistributionCenter", "DC")
                        .WithMany("Warehouses")
                        .HasForeignKey("DCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DC");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebEvent", b =>
                {
                    b.HasOne("Engage.Domain.Entities.WebEventType", "WebEventType")
                        .WithMany()
                        .HasForeignKey("WebEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebEventType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFile", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Engage.Domain.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.NPrinting", "NPrinting")
                        .WithMany()
                        .HasForeignKey("NPrintingId");

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Engage.Domain.Entities.TargetStrategy", "TargetStrategy")
                        .WithMany()
                        .HasForeignKey("TargetStrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.WebFileCategory", "WebFileCategory")
                        .WithMany("WebFiles")
                        .HasForeignKey("WebFileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FileType");

                    b.Navigation("NPrinting");

                    b.Navigation("Store");

                    b.Navigation("TargetStrategy");

                    b.Navigation("WebFileCategory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileCategory", b =>
                {
                    b.HasOne("Engage.Domain.Entities.WebFileGroup", "WebFileGroup")
                        .WithMany()
                        .HasForeignKey("WebFileGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebFileGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.WebFile", "WebFile")
                        .WithMany()
                        .HasForeignKey("WebFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebFile");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebPageEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.WebPage", "WebPage")
                        .WithMany()
                        .HasForeignKey("WebPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("WebPage");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.HasOne("Z.EntityFramework.Plus.AuditEntry", "Parent")
                        .WithMany("Properties")
                        .HasForeignKey("AuditEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileCategoryGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany()
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileEngageSubGroup", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageSubGroup", "EngageSubGroup")
                        .WithMany()
                        .HasForeignKey("EngageSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageSubGroup");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CategoryFileStoreFormat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryClaim", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryClaimFloat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ClaimFloat", "ClaimFloat")
                        .WithMany()
                        .HasForeignKey("ClaimFloatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimFloat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryEmployeeStoreCalendar", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeStoreCalendar", "EmployeeStoreCalendar")
                        .WithMany()
                        .HasForeignKey("EmployeeStoreCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeStoreCalendar");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryOrder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryProject", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CommunicationHistoryStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimBlob", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany("ClaimBlobs")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageRegionContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany("StoreContacts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany("NotificationEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationEmployees")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationStoreFormat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("StoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagClaim", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagDCProduct", b =>
                {
                    b.HasOne("Engage.Domain.Entities.DCProduct", "DCProduct")
                        .WithMany()
                        .HasForeignKey("DCProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCProduct");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagOrder", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagStoreAsset", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreAsset", "StoreAsset")
                        .WithMany()
                        .HasForeignKey("StoreAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAsset");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagSupplier", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectProjectTagUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderEmployeeRegionContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeRegionContact", "EmployeeRegionContact")
                        .WithMany()
                        .HasForeignKey("EmployeeRegionContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeRegionContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderExternalUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.ProjectExternalUser", "ProjectExternalUser")
                        .WithMany()
                        .HasForeignKey("ProjectExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectExternalUser");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderStoreContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreContact", "StoreContact")
                        .WithMany()
                        .HasForeignKey("StoreContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderSupplierContact", b =>
                {
                    b.HasOne("Engage.Domain.Entities.SupplierContact", "SupplierContact")
                        .WithMany()
                        .HasForeignKey("SupplierContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierContact");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderUser", b =>
                {
                    b.HasOne("Engage.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeDivision", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeDivision", "EmployeeDivision")
                        .WithMany()
                        .HasForeignKey("EmployeeDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeDivision");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EmployeeEngageRegion")
                        .WithMany()
                        .HasForeignKey("EmployeeEngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormEngageDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormExcludedEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "ExcludedEmployee")
                        .WithMany()
                        .HasForeignKey("ExcludedEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcludedEmployee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormExcludedStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "ExcludedStore")
                        .WithMany()
                        .HasForeignKey("ExcludedStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcludedStore");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreCluster", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreCluster", "StoreCluster")
                        .WithMany()
                        .HasForeignKey("StoreClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreCluster");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "StoreEngageRegion")
                        .WithMany()
                        .HasForeignKey("StoreEngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreEngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreFormat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreLSM", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreLSM", "StoreLSM")
                        .WithMany()
                        .HasForeignKey("StoreLSMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreLSM");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormStoreType", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEmployeeJobTitleTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEmployeeTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyEngageRegionTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyStoreFormatTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyStoreTarget", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployee", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployeeDivision", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeDivision", "EmployeeDivision")
                        .WithMany()
                        .HasForeignKey("EmployeeDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeDivision");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEmployeeJobTitle", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EmployeeJobTitle", "EmployeeJobTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeJobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeJobTitle");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEngageDepartment", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageDepartment", "EngageDepartment")
                        .WithMany()
                        .HasForeignKey("EngageDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageDepartment");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileEngageRegion", b =>
                {
                    b.HasOne("Engage.Domain.Entities.EngageRegion", "EngageRegion")
                        .WithMany()
                        .HasForeignKey("EngageRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngageRegion");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileStore", b =>
                {
                    b.HasOne("Engage.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileStoreFormat", b =>
                {
                    b.HasOne("Engage.Domain.Entities.StoreFormat", "StoreFormat")
                        .WithMany()
                        .HasForeignKey("StoreFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFormat");
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetPeriod", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetType", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetVersion", b =>
                {
                    b.Navigation("BudgetYearVersions");

                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.BudgetYear", b =>
                {
                    b.Navigation("BudgetPeriods");

                    b.Navigation("BudgetYearVersions");

                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Claim", b =>
                {
                    b.Navigation("ClaimBlobs");

                    b.Navigation("ClaimFloatClaims");

                    b.Navigation("ClaimHistory");

                    b.Navigation("ClaimSkus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimClassification", b =>
                {
                    b.Navigation("ClaimClassificationTypes");

                    b.Navigation("SupplierClaimClassifications");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimFloat", b =>
                {
                    b.Navigation("ClaimFloatClaims");

                    b.Navigation("ClaimFloatTopUpHistory");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimReportType", b =>
                {
                    b.Navigation("ClaimTypeReportTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimType", b =>
                {
                    b.Navigation("ClaimClassificationTypes");

                    b.Navigation("ClaimTypeReportTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ClaimYear", b =>
                {
                    b.Navigation("ClaimPeriods");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Contact", b =>
                {
                    b.Navigation("ContactEvents");

                    b.Navigation("ContactItems");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ContactItem", b =>
                {
                    b.Navigation("PrimaryEmailContactItems");

                    b.Navigation("PrimaryMobileContactItems");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostCenter", b =>
                {
                    b.Navigation("CostCenterDepartments");

                    b.Navigation("CostCenterEmployees");
                });

            modelBuilder.Entity("Engage.Domain.Entities.CostDepartment", b =>
                {
                    b.Navigation("CostSubDepartments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Creditor", b =>
                {
                    b.Navigation("CreditorStatusHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DCDepartment", b =>
                {
                    b.Navigation("DCDepts");

                    b.Navigation("DCProductClasses");
                });

            modelBuilder.Entity("Engage.Domain.Entities.DistributionCenter", b =>
                {
                    b.Navigation("DCDepts");

                    b.Navigation("DCProducts");

                    b.Navigation("StoreAccounts");

                    b.Navigation("Vendors");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistory", b =>
                {
                    b.Navigation("EmailHistoryCCEmails");

                    b.Navigation("EmailHistoryTemplateVariables");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmailHistoryTemplateVariable", b =>
                {
                    b.Navigation("ClaimNumbers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("Benefits");

                    b.Navigation("CostCenterEmployees");

                    b.Navigation("Deductions");

                    b.Navigation("DisciplinaryProcedures");

                    b.Navigation("EmployeeBadges");

                    b.Navigation("EmployeeCostCenters");

                    b.Navigation("EmployeeDepartments");

                    b.Navigation("EmployeeDivisions");

                    b.Navigation("EmployeeFiles");

                    b.Navigation("EmployeeHealthConditions");

                    b.Navigation("EmployeeJobTitles");

                    b.Navigation("EmployeeKpiScores");

                    b.Navigation("EmployeeKpis");

                    b.Navigation("EmployeeManagers");

                    b.Navigation("EmployeeNotifications");

                    b.Navigation("EmployeePopiConsents");

                    b.Navigation("EmployeeQualifications");

                    b.Navigation("EmployeeRegions");

                    b.Navigation("EmployeeReinstatementHistories");

                    b.Navigation("EmployeeReports");

                    b.Navigation("EmployeeSkills");

                    b.Navigation("EmployeeStoreArchives");

                    b.Navigation("EmployeeStoreCheckIns");

                    b.Navigation("EmployeeStoreKpiScores");

                    b.Navigation("EmployeeStoreKpis");

                    b.Navigation("EmployeeStores");

                    b.Navigation("EmployeeSuspensions");

                    b.Navigation("EmployeeTerminationHistories");

                    b.Navigation("EmployeeTrainingRecords");

                    b.Navigation("EmployeeTrainings");

                    b.Navigation("Employees");

                    b.Navigation("ExpenseClaims");

                    b.Navigation("LeaveEmployees");

                    b.Navigation("LeaveEntries");

                    b.Navigation("Loans");

                    b.Navigation("ManagerEmployees");

                    b.Navigation("NotificationEmployeeReads");

                    b.Navigation("NotificationEmployees");

                    b.Navigation("SkillsDevelopment");

                    b.Navigation("SurveyEmployees");

                    b.Navigation("SurveyInstances");

                    b.Navigation("TrainingFacilitators");

                    b.Navigation("WorkRoles");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeAsset", b =>
                {
                    b.Navigation("EmployeeAssetHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeBadge", b =>
                {
                    b.Navigation("EmployeeBadges");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeCoolerBox", b =>
                {
                    b.Navigation("EmployeeCoolerBoxHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeDivision", b =>
                {
                    b.Navigation("EmployeeEmployeeDivisions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeHealthCondition", b =>
                {
                    b.Navigation("EmployeeEmployeeHealthConditions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeJobTitle", b =>
                {
                    b.Navigation("EmployeeEmployeeJobTitles");

                    b.Navigation("EmployeeJobTitleTimes");

                    b.Navigation("EmployeeJobTitleTypes");

                    b.Navigation("EmployeeJobTitleUserGroups");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpi", b =>
                {
                    b.Navigation("EmployeeKpiScores");

                    b.Navigation("EmployeeKpis");

                    b.Navigation("EmployeeStoreKpiScores");

                    b.Navigation("EmployeeStoreKpis");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeKpiTier", b =>
                {
                    b.Navigation("EmployeeKpis");

                    b.Navigation("EmployeeStoreKpis");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeStoreCalendar", b =>
                {
                    b.Navigation("SurveyFormSubmissions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeVehicle", b =>
                {
                    b.Navigation("EmployeeVehicleHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EmployeeWorkRole", b =>
                {
                    b.Navigation("EmployeeWorkRoleContacts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageBrand", b =>
                {
                    b.Navigation("EngageSubGroups");

                    b.Navigation("SupplierEngageBrands");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartment", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OrderEngageDepartments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageDepartmentGroup", b =>
                {
                    b.Navigation("EngageDepartments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageGroup", b =>
                {
                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageMasterProduct", b =>
                {
                    b.Navigation("EngageProductTags");

                    b.Navigation("EngageVariantProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageRegion", b =>
                {
                    b.Navigation("EmployeeRegionContacts");

                    b.Navigation("Employees");

                    b.Navigation("EngageRegionClaimManagers");

                    b.Navigation("EngageSubRegions");

                    b.Navigation("EntityContacts");

                    b.Navigation("GlAccounts");

                    b.Navigation("NotificationRegions");

                    b.Navigation("ProductWarehouseRegions");

                    b.Navigation("ProjectTacOpRegions");

                    b.Navigation("Stores");

                    b.Navigation("SurveyEngageRegions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubGroup", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("EngageBrands");

                    b.Navigation("EngageSubGroupSuppliers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageSubRegion", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageTag", b =>
                {
                    b.Navigation("EngageProductTags");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EngageVariantProduct", b =>
                {
                    b.Navigation("DCProducts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.EntityContact", b =>
                {
                    b.Navigation("CommunicationTypes");

                    b.Navigation("EntityContactRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAccount", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAccountType", b =>
                {
                    b.Navigation("GLAccounts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.GLAdjustmentType", b =>
                {
                    b.Navigation("GLAdjustments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Incident", b =>
                {
                    b.Navigation("IncidentSkus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NPrintingBatch", b =>
                {
                    b.Navigation("NPrintings");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Notification", b =>
                {
                    b.Navigation("EmployeeNotifications");

                    b.Navigation("NotificationChannels");

                    b.Navigation("NotificationEmployeeReads");

                    b.Navigation("NotificationEmployees");

                    b.Navigation("NotificationRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.NotificationChannel", b =>
                {
                    b.Navigation("NotificationChannels");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OptionTypeGroup", b =>
                {
                    b.Navigation("OptionTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderEngageDepartments");

                    b.Navigation("OrderSkus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplate", b =>
                {
                    b.Navigation("OrderTemplateGroups");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateGroup", b =>
                {
                    b.Navigation("OrderTemplateProducts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.OrderTemplateProduct", b =>
                {
                    b.Navigation("OrderSkus");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Payment", b =>
                {
                    b.Navigation("PaymentLines");

                    b.Navigation("PaymentStatusHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentArchive", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentBatch", b =>
                {
                    b.Navigation("BatchRegions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.PaymentLine", b =>
                {
                    b.Navigation("CostCenters");

                    b.Navigation("EmployeeDivisions");

                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProductWarehouse", b =>
                {
                    b.Navigation("ProductWarehouseRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Project", b =>
                {
                    b.Navigation("EngageBrands");

                    b.Navigation("ProjectAssignees");

                    b.Navigation("ProjectComments");

                    b.Navigation("ProjectNotes");

                    b.Navigation("ProjectSuppliers");

                    b.Navigation("ProjectTags");

                    b.Navigation("ProjectTasks");

                    b.Navigation("ProjectUsers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCampaign", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectCategory", b =>
                {
                    b.Navigation("ProjectCategorySuppliers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectExternalUser", b =>
                {
                    b.Navigation("CommunicationTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTacOp", b =>
                {
                    b.Navigation("ProjectTacOpRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectTask", b =>
                {
                    b.Navigation("ProjectTaskNotes");

                    b.Navigation("ProjectTaskProjectStakeholderUsers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("PromotionStores");
                });

            modelBuilder.Entity("Engage.Domain.Entities.QuestionFalseReason", b =>
                {
                    b.Navigation("SurveyQuestionFalseReasons");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Report", b =>
                {
                    b.Navigation("EmployeeReports");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleUserGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityPermission", b =>
                {
                    b.Navigation("SecurityPermissionRoles");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SecurityRole", b =>
                {
                    b.Navigation("SecurityPermissionRoles");

                    b.Navigation("SecurityRoleUsers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Stakeholder", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Employee");

                    b.Navigation("Locations");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Store", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("DCAccounts");

                    b.Navigation("EmployeeStoreArchives");

                    b.Navigation("EmployeeStoreCheckIns");

                    b.Navigation("EmployeeStoreKpiScores");

                    b.Navigation("EmployeeStoreKpis");

                    b.Navigation("EmployeeStores");

                    b.Navigation("PromotionStores");

                    b.Navigation("StoreAssets");

                    b.Navigation("StoreCategoryGroups");

                    b.Navigation("StoreConceptAttributeValues");

                    b.Navigation("StoreConceptLevels");

                    b.Navigation("StoreContacts");

                    b.Navigation("StoreOwners");

                    b.Navigation("StoreStoreConceptPerformances");

                    b.Navigation("StoreStoreDepartments");

                    b.Navigation("StoreStoreLists");

                    b.Navigation("SupplierStores");

                    b.Navigation("SurveyInstances");

                    b.Navigation("SurveyStores");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAsset", b =>
                {
                    b.Navigation("AssetTypeContacts");

                    b.Navigation("StoreAssetBlobs");

                    b.Navigation("StoreConceptAttributeStoreAssets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetOwner", b =>
                {
                    b.Navigation("AssetOwnerAssetTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetSubType", b =>
                {
                    b.Navigation("StoreAssetTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetType", b =>
                {
                    b.Navigation("AssetContacts");

                    b.Navigation("AssetOwnerAssetTypes");

                    b.Navigation("AssetSubTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreAssetTypeContact", b =>
                {
                    b.Navigation("StoreAssetTypes");

                    b.Navigation("StoreAssets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConcept", b =>
                {
                    b.Navigation("StoreConceptLevels");

                    b.Navigation("StoreStoreConceptPerformances");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreConceptAttribute", b =>
                {
                    b.Navigation("StoreConceptAttributeOptions");

                    b.Navigation("StoreConceptAttributeStoreAssets");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreDepartment", b =>
                {
                    b.Navigation("EngageSubGroups");

                    b.Navigation("StoreDepartments");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreFormat", b =>
                {
                    b.Navigation("SurveyStoreFormats");
                });

            modelBuilder.Entity("Engage.Domain.Entities.StoreList", b =>
                {
                    b.Navigation("StoreStoreLists");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SubWarehouse", b =>
                {
                    b.Navigation("DCProducts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("EngageMasterProducts");

                    b.Navigation("EngageSubGroupSuppliers");

                    b.Navigation("GLAdjustments");

                    b.Navigation("SupplierClaimAccountManagers");

                    b.Navigation("SupplierClaimClassifications");

                    b.Navigation("SupplierEngageBrands");

                    b.Navigation("SupplierProducts");

                    b.Navigation("SupplierRegions");

                    b.Navigation("SupplierStores");

                    b.Navigation("SupplierSupplierTypes");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierAllowanceContract", b =>
                {
                    b.Navigation("SupplierAllowanceSubContracts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierRegion", b =>
                {
                    b.Navigation("SupplierSubRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SupplierType", b =>
                {
                    b.Navigation("SupplierSupplierTypes");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Survey", b =>
                {
                    b.Navigation("SurveyEmployees");

                    b.Navigation("SurveyEngageRegions");

                    b.Navigation("SurveyInstances");

                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyStoreFormats");

                    b.Navigation("SurveyStores");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyAnswer", b =>
                {
                    b.Navigation("SurveyAnswerOptions");

                    b.Navigation("SurveyAnswerPhotos");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyForm", b =>
                {
                    b.Navigation("SurveyFormAnswers");

                    b.Navigation("SurveyFormProducts");

                    b.Navigation("SurveyFormQuestionGroups");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswer", b =>
                {
                    b.Navigation("SurveyFormAnswerOptions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormAnswerHistory", b =>
                {
                    b.Navigation("SurveyFormAnswerOptionHistories");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestion", b =>
                {
                    b.Navigation("SurveyFormQuestionOptions");

                    b.Navigation("SurveyFormQuestionProducts");

                    b.Navigation("SurveyFormQuestionReasons");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormQuestionGroup", b =>
                {
                    b.Navigation("SurveyFormQuestionGroupProducts");

                    b.Navigation("SurveyFormQuestions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyFormSubmission", b =>
                {
                    b.Navigation("SurveyFormAnswers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyInstance", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("EmployeeStoreSurveyAnswers");

                    b.Navigation("Rules");

                    b.Navigation("SurveyQuestionFalseReasons");

                    b.Navigation("SurveyQuestionOptions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.SurveyQuestionOption", b =>
                {
                    b.Navigation("SurveyAnswerOptions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Training", b =>
                {
                    b.Navigation("EmployeeTrainings");

                    b.Navigation("TrainingFacilitators");

                    b.Navigation("TrainingFiles");
                });

            modelBuilder.Entity("Engage.Domain.Entities.TrainingYear", b =>
                {
                    b.Navigation("TrainingPeriods");
                });

            modelBuilder.Entity("Engage.Domain.Entities.User", b =>
                {
                    b.Navigation("EngageRegionClaimManagers");

                    b.Navigation("ProjectUsers");

                    b.Navigation("SupplierClaimAccountManagers");

                    b.Navigation("UserCommunicationTypes");

                    b.Navigation("UserEngageSubGroups");

                    b.Navigation("UserGroups");

                    b.Navigation("UserRegions");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("UserEntityRecords");
                });

            modelBuilder.Entity("Engage.Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("EmployeeJobTitleUserGroups");

                    b.Navigation("RoleUserGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("DCProducts");
                });

            modelBuilder.Entity("Engage.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("VoucherDetails");
                });

            modelBuilder.Entity("Engage.Domain.Entities.WebFileCategory", b =>
                {
                    b.Navigation("WebFiles");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Engage.Domain.Entities.ProjectStakeholderUser", b =>
                {
                    b.Navigation("ProjectTaskProjectStakeholderUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
