namespace Engage.Application.Services.Shared.Commands;

public static class DeleteCommandUtils
{
    public async static Task<BaseAuditableEntity> FindAsync(int id, string entityName, IAppDbContext context, CancellationToken cancellationToken)
    {
        BaseAuditableEntity entity = entityName.ToLower() switch
        {
            "budget" => await context.Budgets.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.BudgetId == id, cancellationToken),
            "budgetperiod" => await context.BudgetPeriods.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.BudgetPeriodId == id, cancellationToken),
            "budgetyear" => await context.BudgetYears.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.BudgetYearId == id, cancellationToken),
            "claim" => await context.Claims.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimId == id, cancellationToken),
            "claimclassification" => await context.ClaimClassifications.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimClassificationId == id, cancellationToken),
            "claimfloat" => await context.ClaimFloats.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimFloatId == id, cancellationToken),
            "claimperiod" => await context.ClaimPeriods.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimPeriodId == id, cancellationToken),
            "claimyear" => await context.ClaimYears.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimYearId == id, cancellationToken),
            "claimsku" => await context.ClaimSkus.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimSkuId == id, cancellationToken),
            "claimskutype" => await context.ClaimSkuTypes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimSkuTypeId == id, cancellationToken),
            "claimtype" => await context.ClaimTypes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ClaimTypeId == id, cancellationToken),
            "contact" => await context.Contacts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ContactId == id, cancellationToken),
            "dcproduct" => await context.DCProducts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.DCProductId == id, cancellationToken),
            "dcaccount" => await context.DCAccounts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.DCAccountId == id, cancellationToken),
            "dcdepartment" => await context.DCDepartments.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.DCDepartmentId == id, cancellationToken),
            "distributioncenter" => await context.DistributionCenters.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.DistributionCenterId == id, cancellationToken),
            "employeebadge" => await context.EmployeeBadges.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeBadgeId == id, cancellationToken),
            "employeebankdetail" => await context.EmployeeBankDetails.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeBankDetailId == id, cancellationToken),
            "employeebenefit" => await context.EmployeeBenefits.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeBenefitId == id, cancellationToken),
            "employeecoolerbox" => await context.EmployeeCoolerBoxes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeCoolerBoxId == id, cancellationToken),
            "employeededuction" => await context.EmployeeDeductions.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeDeductionId == id, cancellationToken),
            "employeedisciplinaryprocedure" => await context.EmployeeDisciplinaryProcedures.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeDisciplinaryProcedureId == id, cancellationToken),
            "employeeexpenseclaim" => await context.EmployeeExpenseClaims.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeExpenseClaimId == id, cancellationToken),
            "employeefuel" => await context.EmployeeFuels.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeFuelId == id, cancellationToken),
            "employeejobtitle" => await context.EmployeeJobTitles.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeJobTitleId == id, cancellationToken),
            "employeeleaveentry" => await context.EmployeeLeaveEntries.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeLeaveEntryId == id, cancellationToken),
            "employeeloan" => await context.EmployeeLoans.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeLoanId == id, cancellationToken),
            "employee" => await context.Employees.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeId == id, cancellationToken),
            "employeekpi" => await context.EmployeeKpis.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeKpiId == id, cancellationToken),
            "employeekpitier" => await context.EmployeeKpiTiers.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeKpiTierId == id, cancellationToken),
            "employeestorecheckin" => await context.EmployeeStoreCheckIns.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeStoreCheckInId == id, cancellationToken),
            "employeestore" => await context.EmployeeStores.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeStoreId == id, cancellationToken),
            "employeeskillsdevelopment" => await context.EmployeeSkillsDevelopment.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeSkillsDevelopmentId == id, cancellationToken),
            "employeeworkrole" => await context.EmployeeWorkRoles.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EmployeeWorkRoleId == id, cancellationToken),
            "engagemasterproduct" => await context.EngageMasterProducts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EngageMasterProductId == id, cancellationToken),
            "engagevariantproduct" => await context.EngageVariantProducts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EngageVariantProductId == id, cancellationToken),
            "entityblob" => await context.EntityBlobs.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EntityBlobId == id, cancellationToken),
            "entitycontact" => await context.EntityContacts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.EntityContactId == id, cancellationToken),
            "glaccount" => await context.GLAccounts.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.GLAccountId == id, cancellationToken),
            "glaccounttype" => await context.GLAccountTypes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.GLAccountTypeId == id, cancellationToken),
            "gladjustment" => await context.GLAdjustments.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.GLAdjustmentId == id, cancellationToken),
            "incident" => await context.Incidents.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.IncidentId == id, cancellationToken),
            "incidentsku" => await context.IncidentSkus.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.IncidentSkuId == id, cancellationToken),
            "incidentskutype" => await context.IncidentSkuTypes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.IncidentSkuTypeId == id, cancellationToken),
            "incidenttype" => await context.IncidentTypes.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.IncidentTypeId == id, cancellationToken),
            "location" => await context.Locations.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.LocationId == id, cancellationToken),
            "manufacturer" => await context.Manufacturers.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.ManufacturerId == id, cancellationToken),
            "notification" => await context.Notifications.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.NotificationId == id, cancellationToken),
            "order" => await context.Orders.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.OrderId == id, cancellationToken),
            "ordertemplate" => await context.OrderTemplates.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.OrderTemplateId == id, cancellationToken),
            "ordersku" => await context.OrderSkus.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.OrderSkuId == id, cancellationToken),
            "store" => await context.Stores.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.StoreId == id, cancellationToken),
            "storeasset" => await context.StoreAssets.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.StoreAssetId == id, cancellationToken),
            "storeassetblob" => await context.StoreAssetBlobs.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.StoreAssetBlobId == id, cancellationToken),
            "storebankdetail" => await context.StoreBankDetails.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.StoreBankDetailId == id, cancellationToken),
            "supplier" => await context.Suppliers.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SupplierId == id, cancellationToken),
            "supplierstore" => await context.SupplierStores.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SupplierStoreId == id, cancellationToken),
            "survey" => await context.Surveys.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyId == id, cancellationToken),
            "surveyquestion" => await context.SurveyQuestions.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyQuestionId == id, cancellationToken),
            "surveyquestionoption" => await context.SurveyQuestionOptions.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyQuestionOptionId == id, cancellationToken),
            "surveyinstance" => await context.SurveyInstances.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyInstanceId == id, cancellationToken),
            "surveyanswer" => await context.SurveyAnswers.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyAnswerId == id, cancellationToken),
            "surveyansweroption" => await context.SurveyAnswerOptions.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyAnswerOptionId == id, cancellationToken),
            "surveyanswerphoto" => await context.SurveyAnswerPhotos.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyAnswerPhotoId == id, cancellationToken),
            "surveyformquestion" => await context.SurveyFormQuestions.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyFormQuestionId == id, cancellationToken),
            "surveyformquestiongroup" => await context.SurveyFormQuestionGroups.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.SurveyFormQuestionGroupId == id, cancellationToken),
            "training" => await context.Trainings.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.TrainingId == id, cancellationToken),
            "user" => await context.Users.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.UserId == id, cancellationToken),
            "usergroup" => await context.UserGroups.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.UserGroupId == id, cancellationToken),
            "vat" => await context.Vat.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.VatId == id, cancellationToken),
            "vatperiod" => await context.VatPeriods.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.VatPeriodId == id, cancellationToken),
            "vendor" => await context.Vendors.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.VendorId == id, cancellationToken),
            "warehouse" => await context.Warehouses.IgnoreQueryFilters().SingleOrDefaultAsync(e => e.WarehouseId == id, cancellationToken),
            _ => throw new UnknownDeleteException(entityName),
        };

        return entity;
    }
}
